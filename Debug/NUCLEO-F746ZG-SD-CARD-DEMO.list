
NUCLEO-F746ZG-SD-CARD-DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08009ee0  08009ee0  00019ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0001a080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  20000070  0800a100  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b1c  0800a100  00020b1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d035  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ca4  00000000  00000000  0003d0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  00040d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  00041ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292f8  00000000  00000000  000430b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a199  00000000  00000000  0006c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efe38  00000000  00000000  00086549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176381  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e8c  00000000  00000000  001763d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009ec8 	.word	0x08009ec8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08009ec8 	.word	0x08009ec8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <MX_DMA_Init+0x48>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <MX_DMA_Init+0x48>)
 80005b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <MX_DMA_Init+0x48>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	203b      	movs	r0, #59	; 0x3b
 80005cc:	f000 febb 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d0:	203b      	movs	r0, #59	; 0x3b
 80005d2:	f000 fed4 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2045      	movs	r0, #69	; 0x45
 80005dc:	f000 feb3 	bl	8001346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80005e0:	2045      	movs	r0, #69	; 0x45
 80005e2:	f000 fecc 	bl	800137e <HAL_NVIC_EnableIRQ>

}
 80005e6:	bf00      	nop
 80005e8:	3708      	adds	r7, #8
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08c      	sub	sp, #48	; 0x30
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060a:	4b68      	ldr	r3, [pc, #416]	; (80007ac <MX_GPIO_Init+0x1b8>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a67      	ldr	r2, [pc, #412]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000610:	f043 0304 	orr.w	r3, r3, #4
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b65      	ldr	r3, [pc, #404]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0304 	and.w	r3, r3, #4
 800061e:	61bb      	str	r3, [r7, #24]
 8000620:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000622:	4b62      	ldr	r3, [pc, #392]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a61      	ldr	r2, [pc, #388]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b5f      	ldr	r3, [pc, #380]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063a:	4b5c      	ldr	r3, [pc, #368]	; (80007ac <MX_GPIO_Init+0x1b8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a5b      	ldr	r2, [pc, #364]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b59      	ldr	r3, [pc, #356]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0301 	and.w	r3, r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000652:	4b56      	ldr	r3, [pc, #344]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a55      	ldr	r2, [pc, #340]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800066a:	4b50      	ldr	r3, [pc, #320]	; (80007ac <MX_GPIO_Init+0x1b8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a4f      	ldr	r2, [pc, #316]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000670:	f043 0308 	orr.w	r3, r3, #8
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b4d      	ldr	r3, [pc, #308]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0308 	and.w	r3, r3, #8
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a49      	ldr	r2, [pc, #292]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b47      	ldr	r3, [pc, #284]	; (80007ac <MX_GPIO_Init+0x1b8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a0:	4843      	ldr	r0, [pc, #268]	; (80007b0 <MX_GPIO_Init+0x1bc>)
 80006a2:	f001 fbd9 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2140      	movs	r1, #64	; 0x40
 80006aa:	4842      	ldr	r0, [pc, #264]	; (80007b4 <MX_GPIO_Init+0x1c0>)
 80006ac:	f001 fbd4 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 031c 	add.w	r3, r7, #28
 80006c4:	4619      	mov	r1, r3
 80006c6:	483c      	ldr	r0, [pc, #240]	; (80007b8 <MX_GPIO_Init+0x1c4>)
 80006c8:	f001 fa1a 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006cc:	2332      	movs	r3, #50	; 0x32
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d8:	2303      	movs	r3, #3
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006dc:	230b      	movs	r3, #11
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4619      	mov	r1, r3
 80006e6:	4834      	ldr	r0, [pc, #208]	; (80007b8 <MX_GPIO_Init+0x1c4>)
 80006e8:	f001 fa0a 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006ec:	2386      	movs	r3, #134	; 0x86
 80006ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f8:	2303      	movs	r3, #3
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006fc:	230b      	movs	r3, #11
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	482d      	ldr	r0, [pc, #180]	; (80007bc <MX_GPIO_Init+0x1c8>)
 8000708:	f001 f9fa 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800070c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071a:	2300      	movs	r3, #0
 800071c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071e:	f107 031c 	add.w	r3, r7, #28
 8000722:	4619      	mov	r1, r3
 8000724:	4822      	ldr	r0, [pc, #136]	; (80007b0 <MX_GPIO_Init+0x1bc>)
 8000726:	f001 f9eb 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000730:	2302      	movs	r3, #2
 8000732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800073c:	230b      	movs	r3, #11
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	481a      	ldr	r0, [pc, #104]	; (80007b0 <MX_GPIO_Init+0x1bc>)
 8000748:	f001 f9da 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	4619      	mov	r1, r3
 8000762:	4814      	ldr	r0, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x1c0>)
 8000764:	f001 f9cc 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076c:	2300      	movs	r3, #0
 800076e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	2300      	movs	r3, #0
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000774:	f107 031c 	add.w	r3, r7, #28
 8000778:	4619      	mov	r1, r3
 800077a:	480e      	ldr	r0, [pc, #56]	; (80007b4 <MX_GPIO_Init+0x1c0>)
 800077c:	f001 f9c0 	bl	8001b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000780:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000792:	230b      	movs	r3, #11
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_GPIO_Init+0x1c0>)
 800079e:	f001 f9af 	bl	8001b00 <HAL_GPIO_Init>

}
 80007a2:	bf00      	nop
 80007a4:	3730      	adds	r7, #48	; 0x30
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40020400 	.word	0x40020400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40020000 	.word	0x40020000

080007c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b0d8      	sub	sp, #352	; 0x160
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc62 	bl	800108e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f87b 	bl	80008c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f7ff ff11 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007d2:	f000 fafb 	bl	8000dcc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007d6:	f000 fb89 	bl	8000eec <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80007da:	f7ff fee5 	bl	80005a8 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80007de:	f000 f911 	bl	8000a04 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80007e2:	f005 fd45 	bl	8006270 <MX_FATFS_Init>
   * TODO:
   *  separate read and write files
   *  comments and file content to English
   *  remove all warnings - unused status variables can turn on red LED
   */
  FRESULT init = init_file_system();
 80007e6:	f000 f8d7 	bl	8000998 <init_file_system>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 315b 	strb.w	r3, [r7, #347]	; 0x15b

  // ustaiwnie wskaźnika zapisu/odczytu na początku pliku
  FRESULT status_lseek = f_lseek(&SDFile, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	4831      	ldr	r0, [pc, #196]	; (80008b8 <main+0xf8>)
 80007f4:	f008 f9ba 	bl	8008b6c <f_lseek>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 315a 	strb.w	r3, [r7, #346]	; 0x15a

  // przygotowanie buffora do którego zapiszemy dane
  const uint32_t str_form_sd_len = 64;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  char buffer_fom_sd[64] = {0};
 8000804:	2300      	movs	r3, #0
 8000806:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800080a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800080e:	223c      	movs	r2, #60	; 0x3c
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f008 ff0e 	bl	8009634 <memset>

  // odczyt do '\n' znaku z pliku do buffora o maksymalnej długości str_form_sd_len
  f_gets(buffer_fom_sd, str_form_sd_len, &SDFile);
 8000818:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 800081c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000820:	4a25      	ldr	r2, [pc, #148]	; (80008b8 <main+0xf8>)
 8000822:	4618      	mov	r0, r3
 8000824:	f008 fbab 	bl	8008f7e <f_gets>

  // read specific number of bytes alternative.
  // If the file needs to be read fast, it should be read in large chunk as possible.
  f_lseek(&SDFile, 0);
 8000828:	2100      	movs	r1, #0
 800082a:	4823      	ldr	r0, [pc, #140]	; (80008b8 <main+0xf8>)
 800082c:	f008 f99e 	bl	8008b6c <f_lseek>
  uint16_t bytes_to_read = 10;
 8000830:	230a      	movs	r3, #10
 8000832:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152
  uint16_t bytes_read;
  f_read(&SDFile, buffer_fom_sd, bytes_to_read, &bytes_read);
 8000836:	f8b7 2152 	ldrh.w	r2, [r7, #338]	; 0x152
 800083a:	f507 7383 	add.w	r3, r7, #262	; 0x106
 800083e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000842:	481d      	ldr	r0, [pc, #116]	; (80008b8 <main+0xf8>)
 8000844:	f007 fe60 	bl	8008508 <f_read>

  //gets the current read/write pointer of a file
  uint32_t char_in_file = f_tell(&SDFile);
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <main+0xf8>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  // ustawienie wskaźnika zapisu/odczytu na końcu pliku
  f_lseek(&SDFile, f_size(&SDFile));
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <main+0xf8>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4619      	mov	r1, r3
 8000856:	4818      	ldr	r0, [pc, #96]	; (80008b8 <main+0xf8>)
 8000858:	f008 f988 	bl	8008b6c <f_lseek>

  uint32_t counter = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  uint16_t sd_card_save_buff_size = 256;
 8000862:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000866:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// zapis na kartę sd:
	f_printf(&SDFile, "Demonstracyjny zapis na kartę SD (f_printf) %d \n", counter++);
 800086a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800086e:	1c5a      	adds	r2, r3, #1
 8000870:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 8000874:	461a      	mov	r2, r3
 8000876:	4911      	ldr	r1, [pc, #68]	; (80008bc <main+0xfc>)
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <main+0xf8>)
 800087a:	f008 fc35 	bl	80090e8 <f_printf>

	uint16_t bytes_to_write = snprintf(sd_card_save_buff, sd_card_save_buff_size, "Demosntracyjny zapis na karte (f_write) %d \n", counter);
 800087e:	f8b7 114a 	ldrh.w	r1, [r7, #330]	; 0x14a
 8000882:	1d38      	adds	r0, r7, #4
 8000884:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000888:	4a0d      	ldr	r2, [pc, #52]	; (80008c0 <main+0x100>)
 800088a:	f008 fedb 	bl	8009644 <sniprintf>
 800088e:	4603      	mov	r3, r0
 8000890:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
	uint16_t number_of_bytes_writen = 0;
 8000894:	1cbb      	adds	r3, r7, #2
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]
	f_write(&SDFile, sd_card_save_buff, bytes_to_write, &number_of_bytes_writen);
 800089a:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800089e:	1cbb      	adds	r3, r7, #2
 80008a0:	1d39      	adds	r1, r7, #4
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <main+0xf8>)
 80008a4:	f007 ff6f 	bl	8008786 <f_write>
	f_sync(&SDFile);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <main+0xf8>)
 80008aa:	f008 f8e1 	bl	8008a70 <f_sync>

	HAL_Delay(1000);
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f000 fc49 	bl	8001148 <HAL_Delay>
  {
 80008b6:	e7d8      	b.n	800086a <main+0xaa>
 80008b8:	200006ac 	.word	0x200006ac
 80008bc:	08009ee0 	.word	0x08009ee0
 80008c0:	08009f14 	.word	0x08009f14

080008c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0320 	add.w	r3, r7, #32
 80008ce:	2230      	movs	r2, #48	; 0x30
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 feae 	bl	8009634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]
 80008e4:	60da      	str	r2, [r3, #12]
 80008e6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008e8:	f001 fc18 	bl	800211c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <SystemClock_Config+0xcc>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a27      	ldr	r2, [pc, #156]	; (8000990 <SystemClock_Config+0xcc>)
 80008f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b25      	ldr	r3, [pc, #148]	; (8000990 <SystemClock_Config+0xcc>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000904:	4b23      	ldr	r3, [pc, #140]	; (8000994 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800090c:	4a21      	ldr	r2, [pc, #132]	; (8000994 <SystemClock_Config+0xd0>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <SystemClock_Config+0xd0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000920:	2301      	movs	r3, #1
 8000922:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000924:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000932:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000934:	2304      	movs	r3, #4
 8000936:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000938:	2348      	movs	r3, #72	; 0x48
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000940:	2303      	movs	r3, #3
 8000942:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4618      	mov	r0, r3
 800094a:	f001 fbf7 	bl	800213c <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000954:	f000 f850 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096e:	f107 030c 	add.w	r3, r7, #12
 8000972:	2102      	movs	r1, #2
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fe85 	bl	8002684 <HAL_RCC_ClockConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000980:	f000 f83a 	bl	80009f8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000984:	f001 ff6a 	bl	800285c <HAL_RCC_EnableCSS>
}
 8000988:	bf00      	nop
 800098a:	3750      	adds	r7, #80	; 0x50
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <init_file_system>:

/* USER CODE BEGIN 4 */
FRESULT init_file_system(){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

	FRESULT res =  f_mount(&SDFatFS, SDPath, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	4911      	ldr	r1, [pc, #68]	; (80009e8 <init_file_system+0x50>)
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <init_file_system+0x54>)
 80009a4:	f007 fbac 	bl	8008100 <f_mount>
 80009a8:	4603      	mov	r3, r0
 80009aa:	71fb      	strb	r3, [r7, #7]
	if(FR_OK != res){
 80009ac:	79fb      	ldrb	r3, [r7, #7]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <init_file_system+0x1e>
		return res;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	e014      	b.n	80009e0 <init_file_system+0x48>
	}

	res =  f_open(&SDFile, "TestFile.txt", FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_WRITE | FA_READ);
 80009b6:	2233      	movs	r2, #51	; 0x33
 80009b8:	490d      	ldr	r1, [pc, #52]	; (80009f0 <init_file_system+0x58>)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <init_file_system+0x5c>)
 80009bc:	f007 fbe6 	bl	800818c <f_open>
 80009c0:	4603      	mov	r3, r0
 80009c2:	71fb      	strb	r3, [r7, #7]
	if(FR_OK != res){
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <init_file_system+0x36>
		return res;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	e008      	b.n	80009e0 <init_file_system+0x48>
	}

	res = f_lseek(&SDFile, f_size(&SDFile));
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <init_file_system+0x5c>)
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <init_file_system+0x5c>)
 80009d6:	f008 f8c9 	bl	8008b6c <f_lseek>
 80009da:	4603      	mov	r3, r0
 80009dc:	71fb      	strb	r3, [r7, #7]
	return res;
 80009de:	79fb      	ldrb	r3, [r7, #7]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200006a8 	.word	0x200006a8
 80009ec:	200008dc 	.word	0x200008dc
 80009f0:	08009f44 	.word	0x08009f44
 80009f4:	200006ac 	.word	0x200006ac

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a0a:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <MX_SDMMC1_SD_Init+0x3c>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a26:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 4;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	; (8000a3c <MX_SDMMC1_SD_Init+0x38>)
 8000a2e:	2204      	movs	r2, #4
 8000a30:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	200000d4 	.word	0x200000d4
 8000a40:	40012c00 	.word	0x40012c00

08000a44 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0ac      	sub	sp, #176	; 0xb0
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	2284      	movs	r2, #132	; 0x84
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 fde5 	bl	8009634 <memset>
  if(sdHandle->Instance==SDMMC1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a74      	ldr	r2, [pc, #464]	; (8000c40 <HAL_SD_MspInit+0x1fc>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	f040 80e0 	bne.w	8000c36 <HAL_SD_MspInit+0x1f2>
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8000a76:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8000a7a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a88:	f107 0318 	add.w	r3, r7, #24
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 f827 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8000a98:	f7ff ffae 	bl	80009f8 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000a9c:	4b69      	ldr	r3, [pc, #420]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa0:	4a68      	ldr	r2, [pc, #416]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa6:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab4:	4b63      	ldr	r3, [pc, #396]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a62      	ldr	r2, [pc, #392]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a5c      	ldr	r2, [pc, #368]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <HAL_SD_MspInit+0x200>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ae4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000afe:	230c      	movs	r3, #12
 8000b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b08:	4619      	mov	r1, r3
 8000b0a:	484f      	ldr	r0, [pc, #316]	; (8000c48 <HAL_SD_MspInit+0x204>)
 8000b0c:	f000 fff8 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b10:	2304      	movs	r3, #4
 8000b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b32:	4619      	mov	r1, r3
 8000b34:	4845      	ldr	r0, [pc, #276]	; (8000c4c <HAL_SD_MspInit+0x208>)
 8000b36:	f000 ffe3 	bl	8001b00 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8000b3a:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b3c:	4a45      	ldr	r2, [pc, #276]	; (8000c54 <HAL_SD_MspInit+0x210>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b40:	4b43      	ldr	r3, [pc, #268]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b46:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b48:	4b41      	ldr	r3, [pc, #260]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4e:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b54:	4b3e      	ldr	r3, [pc, #248]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b5a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b5c:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8000b6c:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b6e:	2220      	movs	r2, #32
 8000b70:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b72:	4b37      	ldr	r3, [pc, #220]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b78:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b7a:	2204      	movs	r2, #4
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b7e:	4b34      	ldr	r3, [pc, #208]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b80:	2203      	movs	r2, #3
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b84:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b8c:	4b30      	ldr	r3, [pc, #192]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b92:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8000b94:	482e      	ldr	r0, [pc, #184]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000b96:	f000 fc0d 	bl	80013b4 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000ba0:	f7ff ff2a 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a2a      	ldr	r2, [pc, #168]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8000baa:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <HAL_SD_MspInit+0x20c>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8000bb0:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bb2:	4a2a      	ldr	r2, [pc, #168]	; (8000c5c <HAL_SD_MspInit+0x218>)
 8000bb4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8000bb6:	4b28      	ldr	r3, [pc, #160]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bbe:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bc0:	2240      	movs	r2, #64	; 0x40
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b23      	ldr	r3, [pc, #140]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bdc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000be4:	2220      	movs	r2, #32
 8000be6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bf0:	2204      	movs	r2, #4
 8000bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bf6:	2203      	movs	r2, #3
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000bfa:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000bfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000c04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c08:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8000c0a:	4813      	ldr	r0, [pc, #76]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000c0c:	f000 fbd2 	bl	80013b4 <HAL_DMA_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000c16:	f7ff feef 	bl	80009f8 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_SD_MspInit+0x214>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2031      	movs	r0, #49	; 0x31
 8000c2c:	f000 fb8b 	bl	8001346 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000c30:	2031      	movs	r0, #49	; 0x31
 8000c32:	f000 fba4 	bl	800137e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8000c36:	bf00      	nop
 8000c38:	37b0      	adds	r7, #176	; 0xb0
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40012c00 	.word	0x40012c00
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800
 8000c4c:	40020c00 	.word	0x40020c00
 8000c50:	20000158 	.word	0x20000158
 8000c54:	40026458 	.word	0x40026458
 8000c58:	200001b8 	.word	0x200001b8
 8000c5c:	400264a0 	.word	0x400264a0

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x44>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000cac:	f001 fefc 	bl	8002aa8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x8>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 fa06 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <SDMMC1_IRQHandler+0x10>)
 8000d06:	f002 fd5b 	bl	80037c0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000d4 	.word	0x200000d4

08000d14 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <DMA2_Stream3_IRQHandler+0x10>)
 8000d1a:	f000 fc7b 	bl	8001614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000158 	.word	0x20000158

08000d28 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DMA2_Stream6_IRQHandler+0x10>)
 8000d2e:	f000 fc71 	bl	8001614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200001b8 	.word	0x200001b8

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f008 fc38 	bl	80095e0 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20050000 	.word	0x20050000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	2000008c 	.word	0x2000008c
 8000da4:	20000b20 	.word	0x20000b20

08000da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd0:	4b14      	ldr	r3, [pc, #80]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <MX_USART3_UART_Init+0x5c>)
 8000dd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ddc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dde:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df2:	220c      	movs	r2, #12
 8000df4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_USART3_UART_Init+0x58>)
 8000e10:	f003 fd7f 	bl	8004912 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e1a:	f7ff fded 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20000218 	.word	0x20000218
 8000e28:	40004800 	.word	0x40004800

08000e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b0aa      	sub	sp, #168	; 0xa8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2284      	movs	r2, #132	; 0x84
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f008 fbf1 	bl	8009634 <memset>
  if(uartHandle->Instance==USART3)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_UART_MspInit+0xb4>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d13c      	bne.n	8000ed6 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e60:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fe38 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e76:	f7ff fdbf 	bl	80009f8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a19      	ldr	r2, [pc, #100]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a13      	ldr	r2, [pc, #76]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <HAL_UART_MspInit+0xb8>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0308 	and.w	r3, r3, #8
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <HAL_UART_MspInit+0xbc>)
 8000ed2:	f000 fe15 	bl	8001b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	37a8      	adds	r7, #168	; 0xa8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004800 	.word	0x40004800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020c00 	.word	0x40020c00

08000eec <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ef2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ef6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000efa:	2206      	movs	r2, #6
 8000efc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f00:	2202      	movs	r2, #2
 8000f02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f30:	f000 ffab 	bl	8001e8a <HAL_PCD_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f7ff fd5d 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000029c 	.word	0x2000029c

08000f48 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0ac      	sub	sp, #176	; 0xb0
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	60da      	str	r2, [r3, #12]
 8000f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	2284      	movs	r2, #132	; 0x84
 8000f66:	2100      	movs	r1, #0
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f008 fb63 	bl	8009634 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d159      	bne.n	800102c <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f7c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 fda9 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f94:	f7ff fd30 	bl	80009f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9c:	4a25      	ldr	r2, [pc, #148]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fb0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fca:	230a      	movs	r3, #10
 8000fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <HAL_PCD_MspInit+0xf0>)
 8000fd8:	f000 fd92 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4810      	ldr	r0, [pc, #64]	; (8001038 <HAL_PCD_MspInit+0xf0>)
 8000ff8:	f000 fd82 	bl	8001b00 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8001002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001006:	6353      	str	r3, [r2, #52]	; 0x34
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_PCD_MspInit+0xec>)
 800100a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800100c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	4a06      	ldr	r2, [pc, #24]	; (8001034 <HAL_PCD_MspInit+0xec>)
 800101a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101e:	6453      	str	r3, [r2, #68]	; 0x44
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <HAL_PCD_MspInit+0xec>)
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800102c:	bf00      	nop
 800102e:	37b0      	adds	r7, #176	; 0xb0
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000

0800103c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001042:	490e      	ldr	r1, [pc, #56]	; (800107c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001044:	4a0e      	ldr	r2, [pc, #56]	; (8001080 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001058:	4c0b      	ldr	r4, [pc, #44]	; (8001088 <LoopFillZerobss+0x26>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001066:	f7ff fe9f 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106a:	f008 fabf 	bl	80095ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800106e:	f7ff fba7 	bl	80007c0 <main>
  bx  lr    
 8001072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001074:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001080:	0800a090 	.word	0x0800a090
  ldr r2, =_sbss
 8001084:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001088:	20000b1c 	.word	0x20000b1c

0800108c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC_IRQHandler>

0800108e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001092:	2003      	movs	r0, #3
 8001094:	f000 f94c 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 f805 	bl	80010a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109e:	f7ff fddf 	bl	8000c60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x54>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x58>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	4619      	mov	r1, r3
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 f967 	bl	800139a <HAL_SYSTICK_Config>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e00e      	b.n	80010f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d80a      	bhi.n	80010f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295
 80010e4:	f000 f92f 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	4a06      	ldr	r2, [pc, #24]	; (8001104 <HAL_InitTick+0x5c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e000      	b.n	80010f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000008 	.word	0x20000008
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	200006a0 	.word	0x200006a0

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	200006a0 	.word	0x200006a0

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff ffee 	bl	8001130 <HAL_GetTick>
 8001154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4413      	add	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800116e:	bf00      	nop
 8001170:	f7ff ffde 	bl	8001130 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000008 	.word	0x20000008

08001190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011ac:	4013      	ands	r3, r2
 80011ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <__NVIC_SetPriorityGrouping+0x44>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011be:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <__NVIC_SetPriorityGrouping+0x40>)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	60d3      	str	r3, [r2, #12]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	05fa0000 	.word	0x05fa0000

080011d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <__NVIC_GetPriorityGrouping+0x18>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	f003 0307 	and.w	r3, r3, #7
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0b      	blt.n	800121e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_EnableIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000e100 	.word	0xe000e100

08001230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	6039      	str	r1, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	db0a      	blt.n	800125a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2da      	uxtb	r2, r3
 8001248:	490c      	ldr	r1, [pc, #48]	; (800127c <__NVIC_SetPriority+0x4c>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	0112      	lsls	r2, r2, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	440b      	add	r3, r1
 8001254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001258:	e00a      	b.n	8001270 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4908      	ldr	r1, [pc, #32]	; (8001280 <__NVIC_SetPriority+0x50>)
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	3b04      	subs	r3, #4
 8001268:	0112      	lsls	r2, r2, #4
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	440b      	add	r3, r1
 800126e:	761a      	strb	r2, [r3, #24]
}
 8001270:	bf00      	nop
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000e100 	.word	0xe000e100
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001284:	b480      	push	{r7}
 8001286:	b089      	sub	sp, #36	; 0x24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	f1c3 0307 	rsb	r3, r3, #7
 800129e:	2b04      	cmp	r3, #4
 80012a0:	bf28      	it	cs
 80012a2:	2304      	movcs	r3, #4
 80012a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	d902      	bls.n	80012b4 <NVIC_EncodePriority+0x30>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3b03      	subs	r3, #3
 80012b2:	e000      	b.n	80012b6 <NVIC_EncodePriority+0x32>
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	f04f 32ff 	mov.w	r2, #4294967295
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	401a      	ands	r2, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012cc:	f04f 31ff 	mov.w	r1, #4294967295
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	fa01 f303 	lsl.w	r3, r1, r3
 80012d6:	43d9      	mvns	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	4313      	orrs	r3, r2
         );
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3724      	adds	r7, #36	; 0x24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff8e 	bl	8001230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	; (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff29 	bl	8001190 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff3e 	bl	80011d8 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff8e 	bl	8001284 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5d 	bl	8001230 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	4603      	mov	r3, r0
 8001386:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff31 	bl	80011f4 <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff ffa2 	bl	80012ec <SysTick_Config>
 80013a8:	4603      	mov	r3, r0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff feb6 	bl	8001130 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d101      	bne.n	80013d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e099      	b.n	8001504 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f022 0201 	bic.w	r2, r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f0:	e00f      	b.n	8001412 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013f2:	f7ff fe9d 	bl	8001130 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b05      	cmp	r3, #5
 80013fe:	d908      	bls.n	8001412 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2220      	movs	r2, #32
 8001404:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e078      	b.n	8001504 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e8      	bne.n	80013f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4b38      	ldr	r3, [pc, #224]	; (800150c <HAL_DMA_Init+0x158>)
 800142c:	4013      	ands	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	2b04      	cmp	r3, #4
 800146a:	d107      	bne.n	800147c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001474:	4313      	orrs	r3, r2
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4313      	orrs	r3, r2
 800147a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	f023 0307 	bic.w	r3, r3, #7
 8001492:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	4313      	orrs	r3, r2
 800149c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d117      	bne.n	80014d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d00e      	beq.n	80014d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 faa5 	bl	8001a08 <DMA_CheckFifoParam>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d008      	beq.n	80014d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2240      	movs	r2, #64	; 0x40
 80014c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014d2:	2301      	movs	r3, #1
 80014d4:	e016      	b.n	8001504 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa5c 	bl	800199c <DMA_CalcBaseAndBitshift>
 80014e4:	4603      	mov	r3, r0
 80014e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	223f      	movs	r2, #63	; 0x3f
 80014ee:	409a      	lsls	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	f010803f 	.word	0xf010803f

08001510 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001526:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800152e:	2b01      	cmp	r3, #1
 8001530:	d101      	bne.n	8001536 <HAL_DMA_Start_IT+0x26>
 8001532:	2302      	movs	r3, #2
 8001534:	e048      	b.n	80015c8 <HAL_DMA_Start_IT+0xb8>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b01      	cmp	r3, #1
 8001548:	d137      	bne.n	80015ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2202      	movs	r2, #2
 800154e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f000 f9ee 	bl	8001940 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001568:	223f      	movs	r2, #63	; 0x3f
 800156a:	409a      	lsls	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0216 	orr.w	r2, r2, #22
 800157e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800158e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d007      	beq.n	80015a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0208 	orr.w	r2, r2, #8
 80015a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e005      	b.n	80015c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015c2:	2302      	movs	r3, #2
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d004      	beq.n	80015ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2280      	movs	r2, #128	; 0x80
 80015e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00c      	b.n	8001608 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2205      	movs	r2, #5
 80015f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0201 	bic.w	r2, r2, #1
 8001604:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001620:	4b92      	ldr	r3, [pc, #584]	; (800186c <HAL_DMA_IRQHandler+0x258>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a92      	ldr	r2, [pc, #584]	; (8001870 <HAL_DMA_IRQHandler+0x25c>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0a9b      	lsrs	r3, r3, #10
 800162c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163e:	2208      	movs	r2, #8
 8001640:	409a      	lsls	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d01a      	beq.n	8001680 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0204 	bic.w	r2, r2, #4
 8001666:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	2208      	movs	r2, #8
 800166e:	409a      	lsls	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	2201      	movs	r2, #1
 8001686:	409a      	lsls	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4013      	ands	r3, r2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d012      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a2:	2201      	movs	r2, #1
 80016a4:	409a      	lsls	r2, r3
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2204      	movs	r2, #4
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d012      	beq.n	80016ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00b      	beq.n	80016ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2204      	movs	r2, #4
 80016da:	409a      	lsls	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e4:	f043 0204 	orr.w	r2, r3, #4
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f0:	2210      	movs	r2, #16
 80016f2:	409a      	lsls	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d043      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03c      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170e:	2210      	movs	r2, #16
 8001710:	409a      	lsls	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d018      	beq.n	8001756 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d108      	bne.n	8001744 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	2b00      	cmp	r3, #0
 8001738:	d024      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	4798      	blx	r3
 8001742:	e01f      	b.n	8001784 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	4798      	blx	r3
 8001754:	e016      	b.n	8001784 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0208 	bic.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	2b00      	cmp	r3, #0
 800177a:	d003      	beq.n	8001784 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001788:	2220      	movs	r2, #32
 800178a:	409a      	lsls	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	4013      	ands	r3, r2
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 808e 	beq.w	80018b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f000 8086 	beq.w	80018b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2220      	movs	r2, #32
 80017ac:	409a      	lsls	r2, r3
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b05      	cmp	r3, #5
 80017bc:	d136      	bne.n	800182c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f022 0216 	bic.w	r2, r2, #22
 80017cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d103      	bne.n	80017ee <HAL_DMA_IRQHandler+0x1da>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0208 	bic.w	r2, r2, #8
 80017fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001802:	223f      	movs	r2, #63	; 0x3f
 8001804:	409a      	lsls	r2, r3
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181e:	2b00      	cmp	r3, #0
 8001820:	d07d      	beq.n	800191e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
        }
        return;
 800182a:	e078      	b.n	800191e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01c      	beq.n	8001874 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d108      	bne.n	800185a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	2b00      	cmp	r3, #0
 800184e:	d030      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
 8001858:	e02b      	b.n	80018b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800185e:	2b00      	cmp	r3, #0
 8001860:	d027      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
 800186a:	e022      	b.n	80018b2 <HAL_DMA_IRQHandler+0x29e>
 800186c:	20000000 	.word	0x20000000
 8001870:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10f      	bne.n	80018a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0210 	bic.w	r2, r2, #16
 8001890:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d032      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d022      	beq.n	800190c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2205      	movs	r2, #5
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d307      	bcc.n	80018fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f2      	bne.n	80018de <HAL_DMA_IRQHandler+0x2ca>
 80018f8:	e000      	b.n	80018fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018fa:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e000      	b.n	8001920 <HAL_DMA_IRQHandler+0x30c>
        return;
 800191e:	bf00      	nop
    }
  }
}
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop

08001928 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800195c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b40      	cmp	r3, #64	; 0x40
 800196c:	d108      	bne.n	8001980 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800197e:	e007      	b.n	8001990 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3b10      	subs	r3, #16
 80019ac:	4a13      	ldr	r2, [pc, #76]	; (80019fc <DMA_CalcBaseAndBitshift+0x60>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <DMA_CalcBaseAndBitshift+0x64>)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d908      	bls.n	80019dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <DMA_CalcBaseAndBitshift+0x68>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	1d1a      	adds	r2, r3, #4
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	659a      	str	r2, [r3, #88]	; 0x58
 80019da:	e006      	b.n	80019ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	461a      	mov	r2, r3
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <DMA_CalcBaseAndBitshift+0x68>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	aaaaaaab 	.word	0xaaaaaaab
 8001a00:	08009fb0 	.word	0x08009fb0
 8001a04:	fffffc00 	.word	0xfffffc00

08001a08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d11f      	bne.n	8001a62 <DMA_CheckFifoParam+0x5a>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d856      	bhi.n	8001ad6 <DMA_CheckFifoParam+0xce>
 8001a28:	a201      	add	r2, pc, #4	; (adr r2, 8001a30 <DMA_CheckFifoParam+0x28>)
 8001a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2e:	bf00      	nop
 8001a30:	08001a41 	.word	0x08001a41
 8001a34:	08001a53 	.word	0x08001a53
 8001a38:	08001a41 	.word	0x08001a41
 8001a3c:	08001ad7 	.word	0x08001ad7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d046      	beq.n	8001ada <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a50:	e043      	b.n	8001ada <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a5a:	d140      	bne.n	8001ade <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a60:	e03d      	b.n	8001ade <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a6a:	d121      	bne.n	8001ab0 <DMA_CheckFifoParam+0xa8>
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d837      	bhi.n	8001ae2 <DMA_CheckFifoParam+0xda>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <DMA_CheckFifoParam+0x70>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a8f 	.word	0x08001a8f
 8001a80:	08001a89 	.word	0x08001a89
 8001a84:	08001aa1 	.word	0x08001aa1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a8c:	e030      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d025      	beq.n	8001ae6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a9e:	e022      	b.n	8001ae6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001aa8:	d11f      	bne.n	8001aea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001aae:	e01c      	b.n	8001aea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d903      	bls.n	8001abe <DMA_CheckFifoParam+0xb6>
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d003      	beq.n	8001ac4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001abc:	e018      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8001ac2:	e015      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00e      	beq.n	8001aee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
      break;
 8001ad4:	e00b      	b.n	8001aee <DMA_CheckFifoParam+0xe6>
      break;
 8001ad6:	bf00      	nop
 8001ad8:	e00a      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ada:	bf00      	nop
 8001adc:	e008      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ade:	bf00      	nop
 8001ae0:	e006      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae2:	bf00      	nop
 8001ae4:	e004      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ae6:	bf00      	nop
 8001ae8:	e002      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001aea:	bf00      	nop
 8001aec:	e000      	b.n	8001af0 <DMA_CheckFifoParam+0xe8>
      break;
 8001aee:	bf00      	nop
    }
  } 
  
  return status; 
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e175      	b.n	8001e0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 8164 	bne.w	8001e06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x56>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80be 	beq.w	8001e06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	4b66      	ldr	r3, [pc, #408]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8e:	4a65      	ldr	r2, [pc, #404]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	6453      	str	r3, [r2, #68]	; 0x44
 8001c96:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_GPIO_Init+0x324>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ca2:	4a61      	ldr	r2, [pc, #388]	; (8001e28 <HAL_GPIO_Init+0x328>)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a58      	ldr	r2, [pc, #352]	; (8001e2c <HAL_GPIO_Init+0x32c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d037      	beq.n	8001d3e <HAL_GPIO_Init+0x23e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a57      	ldr	r2, [pc, #348]	; (8001e30 <HAL_GPIO_Init+0x330>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d031      	beq.n	8001d3a <HAL_GPIO_Init+0x23a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a56      	ldr	r2, [pc, #344]	; (8001e34 <HAL_GPIO_Init+0x334>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d02b      	beq.n	8001d36 <HAL_GPIO_Init+0x236>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a55      	ldr	r2, [pc, #340]	; (8001e38 <HAL_GPIO_Init+0x338>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d025      	beq.n	8001d32 <HAL_GPIO_Init+0x232>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a54      	ldr	r2, [pc, #336]	; (8001e3c <HAL_GPIO_Init+0x33c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d01f      	beq.n	8001d2e <HAL_GPIO_Init+0x22e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a53      	ldr	r2, [pc, #332]	; (8001e40 <HAL_GPIO_Init+0x340>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d019      	beq.n	8001d2a <HAL_GPIO_Init+0x22a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_GPIO_Init+0x344>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d013      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_GPIO_Init+0x348>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <HAL_GPIO_Init+0x222>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a50      	ldr	r2, [pc, #320]	; (8001e4c <HAL_GPIO_Init+0x34c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <HAL_GPIO_Init+0x21e>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x350>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d101      	bne.n	8001d1a <HAL_GPIO_Init+0x21a>
 8001d16:	2309      	movs	r3, #9
 8001d18:	e012      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	e010      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d1e:	2308      	movs	r3, #8
 8001d20:	e00e      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d22:	2307      	movs	r3, #7
 8001d24:	e00c      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d26:	2306      	movs	r3, #6
 8001d28:	e00a      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d2a:	2305      	movs	r3, #5
 8001d2c:	e008      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d2e:	2304      	movs	r3, #4
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d32:	2303      	movs	r3, #3
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x240>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	f002 0203 	and.w	r2, r2, #3
 8001d46:	0092      	lsls	r2, r2, #2
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d50:	4935      	ldr	r1, [pc, #212]	; (8001e28 <HAL_GPIO_Init+0x328>)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3302      	adds	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d5e:	4b3d      	ldr	r3, [pc, #244]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d82:	4a34      	ldr	r2, [pc, #208]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d88:	4b32      	ldr	r3, [pc, #200]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dac:	4a29      	ldr	r2, [pc, #164]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001db2:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e00:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_GPIO_Init+0x354>)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	61fb      	str	r3, [r7, #28]
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	2b0f      	cmp	r3, #15
 8001e10:	f67f ae86 	bls.w	8001b20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40013800 	.word	0x40013800
 8001e2c:	40020000 	.word	0x40020000
 8001e30:	40020400 	.word	0x40020400
 8001e34:	40020800 	.word	0x40020800
 8001e38:	40020c00 	.word	0x40020c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40021400 	.word	0x40021400
 8001e44:	40021800 	.word	0x40021800
 8001e48:	40021c00 	.word	0x40021c00
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40022400 	.word	0x40022400
 8001e54:	40013c00 	.word	0x40013c00

08001e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	460b      	mov	r3, r1
 8001e62:	807b      	strh	r3, [r7, #2]
 8001e64:	4613      	mov	r3, r2
 8001e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e68:	787b      	ldrb	r3, [r7, #1]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e6e:	887a      	ldrh	r2, [r7, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e74:	e003      	b.n	8001e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	041a      	lsls	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	619a      	str	r2, [r3, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8c:	b08f      	sub	sp, #60	; 0x3c
 8001e8e:	af0a      	add	r7, sp, #40	; 0x28
 8001e90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e116      	b.n	80020ca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff f846 	bl	8000f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 ff32 	bl	8005d44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	603b      	str	r3, [r7, #0]
 8001ee6:	687e      	ldr	r6, [r7, #4]
 8001ee8:	466d      	mov	r5, sp
 8001eea:	f106 0410 	add.w	r4, r6, #16
 8001eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001efe:	1d33      	adds	r3, r6, #4
 8001f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f02:	6838      	ldr	r0, [r7, #0]
 8001f04:	f003 fec6 	bl	8005c94 <USB_CoreInit>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2202      	movs	r2, #2
 8001f12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e0d7      	b.n	80020ca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f003 ff20 	bl	8005d66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	73fb      	strb	r3, [r7, #15]
 8001f2a:	e04a      	b.n	8001fc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	6879      	ldr	r1, [r7, #4]
 8001f30:	4613      	mov	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	333d      	adds	r3, #61	; 0x3d
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	333c      	adds	r3, #60	; 0x3c
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	b298      	uxth	r0, r3
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3342      	adds	r3, #66	; 0x42
 8001f68:	4602      	mov	r2, r0
 8001f6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	333f      	adds	r3, #63	; 0x3f
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3344      	adds	r3, #68	; 0x44
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3348      	adds	r3, #72	; 0x48
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	6879      	ldr	r1, [r7, #4]
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3350      	adds	r3, #80	; 0x50
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d3af      	bcc.n	8001f2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e044      	b.n	800205c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	3301      	adds	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
 800205c:	7bfa      	ldrb	r2, [r7, #15]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d3b5      	bcc.n	8001fd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	687e      	ldr	r6, [r7, #4]
 800206e:	466d      	mov	r5, sp
 8002070:	f106 0410 	add.w	r4, r6, #16
 8002074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002078:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800207a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800207c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002080:	e885 0003 	stmia.w	r5, {r0, r1}
 8002084:	1d33      	adds	r3, r6, #4
 8002086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002088:	6838      	ldr	r0, [r7, #0]
 800208a:	f003 feb9 	bl	8005e00 <USB_DevInit>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e014      	b.n	80020ca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d102      	bne.n	80020be <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 f80b 	bl	80020d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f004 f873 	bl	80061ae <USB_DevDisconnect>

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PCDEx_ActivateLPM+0x44>)
 8002104:	4313      	orrs	r3, r2
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	10000003 	.word	0x10000003

0800211c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a04      	ldr	r2, [pc, #16]	; (8002138 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40007000 	.word	0x40007000

0800213c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e291      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 8087 	beq.w	800226e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002160:	4b96      	ldr	r3, [pc, #600]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b04      	cmp	r3, #4
 800216a:	d00c      	beq.n	8002186 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800216c:	4b93      	ldr	r3, [pc, #588]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d112      	bne.n	800219e <HAL_RCC_OscConfig+0x62>
 8002178:	4b90      	ldr	r3, [pc, #576]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002184:	d10b      	bne.n	800219e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002186:	4b8d      	ldr	r3, [pc, #564]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d06c      	beq.n	800226c <HAL_RCC_OscConfig+0x130>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d168      	bne.n	800226c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e26b      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a6:	d106      	bne.n	80021b6 <HAL_RCC_OscConfig+0x7a>
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a83      	ldr	r2, [pc, #524]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e02e      	b.n	8002214 <HAL_RCC_OscConfig+0xd8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10c      	bne.n	80021d8 <HAL_RCC_OscConfig+0x9c>
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a7e      	ldr	r2, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a7b      	ldr	r2, [pc, #492]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	e01d      	b.n	8002214 <HAL_RCC_OscConfig+0xd8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e0:	d10c      	bne.n	80021fc <HAL_RCC_OscConfig+0xc0>
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a75      	ldr	r2, [pc, #468]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	6013      	str	r3, [r2, #0]
 80021ee:	4b73      	ldr	r3, [pc, #460]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a72      	ldr	r2, [pc, #456]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f8:	6013      	str	r3, [r2, #0]
 80021fa:	e00b      	b.n	8002214 <HAL_RCC_OscConfig+0xd8>
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b6c      	ldr	r3, [pc, #432]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a6b      	ldr	r2, [pc, #428]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7fe ff88 	bl	8001130 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7fe ff84 	bl	8001130 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e21f      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b61      	ldr	r3, [pc, #388]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0xe8>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7fe ff74 	bl	8001130 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7fe ff70 	bl	8001130 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	; 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e20b      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800225e:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x110>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d069      	beq.n	800234e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800227a:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002286:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d11c      	bne.n	80022cc <HAL_RCC_OscConfig+0x190>
 8002292:	4b4a      	ldr	r3, [pc, #296]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d116      	bne.n	80022cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d005      	beq.n	80022b6 <HAL_RCC_OscConfig+0x17a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d001      	beq.n	80022b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e1df      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	493d      	ldr	r1, [pc, #244]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ca:	e040      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d023      	beq.n	800231c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a38      	ldr	r2, [pc, #224]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022da:	f043 0301 	orr.w	r3, r3, #1
 80022de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe ff26 	bl	8001130 <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe ff22 	bl	8001130 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1bd      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b30      	ldr	r3, [pc, #192]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4929      	ldr	r1, [pc, #164]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]
 800231a:	e018      	b.n	800234e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800231c:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a26      	ldr	r2, [pc, #152]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002328:	f7fe ff02 	bl	8001130 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002330:	f7fe fefe 	bl	8001130 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e199      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d038      	beq.n	80023cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d019      	beq.n	8002396 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002362:	4b16      	ldr	r3, [pc, #88]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002366:	4a15      	ldr	r2, [pc, #84]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7fe fedf 	bl	8001130 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002376:	f7fe fedb 	bl	8001130 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e176      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800238a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x23a>
 8002394:	e01a      	b.n	80023cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_RCC_OscConfig+0x280>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fec5 	bl	8001130 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a8:	e00a      	b.n	80023c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fec1 	bl	8001130 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d903      	bls.n	80023c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e15c      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
 80023bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023c0:	4b91      	ldr	r3, [pc, #580]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80023c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ee      	bne.n	80023aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 80a4 	beq.w	8002522 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023da:	4b8b      	ldr	r3, [pc, #556]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b88      	ldr	r3, [pc, #544]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	4a87      	ldr	r2, [pc, #540]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023f0:	6413      	str	r3, [r2, #64]	; 0x40
 80023f2:	4b85      	ldr	r3, [pc, #532]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002402:	4b82      	ldr	r3, [pc, #520]	; (800260c <HAL_RCC_OscConfig+0x4d0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d118      	bne.n	8002440 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800240e:	4b7f      	ldr	r3, [pc, #508]	; (800260c <HAL_RCC_OscConfig+0x4d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a7e      	ldr	r2, [pc, #504]	; (800260c <HAL_RCC_OscConfig+0x4d0>)
 8002414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800241a:	f7fe fe89 	bl	8001130 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fe85 	bl	8001130 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b64      	cmp	r3, #100	; 0x64
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e120      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	4b75      	ldr	r3, [pc, #468]	; (800260c <HAL_RCC_OscConfig+0x4d0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x31a>
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800244a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	6713      	str	r3, [r2, #112]	; 0x70
 8002454:	e02d      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x33c>
 800245e:	4b6a      	ldr	r3, [pc, #424]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002462:	4a69      	ldr	r2, [pc, #420]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	6713      	str	r3, [r2, #112]	; 0x70
 800246a:	4b67      	ldr	r3, [pc, #412]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800246c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246e:	4a66      	ldr	r2, [pc, #408]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	6713      	str	r3, [r2, #112]	; 0x70
 8002476:	e01c      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d10c      	bne.n	800249a <HAL_RCC_OscConfig+0x35e>
 8002480:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002484:	4a60      	ldr	r2, [pc, #384]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002486:	f043 0304 	orr.w	r3, r3, #4
 800248a:	6713      	str	r3, [r2, #112]	; 0x70
 800248c:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a5d      	ldr	r2, [pc, #372]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	e00b      	b.n	80024b2 <HAL_RCC_OscConfig+0x376>
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249e:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	; 0x70
 80024a6:	4b58      	ldr	r3, [pc, #352]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024aa:	4a57      	ldr	r2, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d015      	beq.n	80024e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fe39 	bl	8001130 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	e00a      	b.n	80024d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c2:	f7fe fe35 	bl	8001130 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0ce      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d8:	4b4b      	ldr	r3, [pc, #300]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d0ee      	beq.n	80024c2 <HAL_RCC_OscConfig+0x386>
 80024e4:	e014      	b.n	8002510 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fe23 	bl	8001130 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	e00a      	b.n	8002504 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ee:	f7fe fe1f 	bl	8001130 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d901      	bls.n	8002504 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002500:	2303      	movs	r3, #3
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1ee      	bne.n	80024ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d105      	bne.n	8002522 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b3c      	ldr	r3, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 80a4 	beq.w	8002674 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b08      	cmp	r3, #8
 8002536:	d06b      	beq.n	8002610 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d149      	bne.n	80025d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002540:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fdf0 	bl	8001130 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002554:	f7fe fdec 	bl	8001130 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e087      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002566:	4b28      	ldr	r3, [pc, #160]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f0      	bne.n	8002554 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69da      	ldr	r2, [r3, #28]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	019b      	lsls	r3, r3, #6
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	041b      	lsls	r3, r3, #16
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	4313      	orrs	r3, r2
 8002598:	4a1b      	ldr	r2, [pc, #108]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800259e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a0:	4b19      	ldr	r3, [pc, #100]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fdc0 	bl	8001130 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe fdbc 	bl	8001130 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e057      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0f0      	beq.n	80025b4 <HAL_RCC_OscConfig+0x478>
 80025d2:	e04f      	b.n	8002674 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0b      	ldr	r2, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fda6 	bl	8001130 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fda2 	bl	8001130 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e03d      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	4b03      	ldr	r3, [pc, #12]	; (8002608 <HAL_RCC_OscConfig+0x4cc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x4ac>
 8002606:	e035      	b.n	8002674 <HAL_RCC_OscConfig+0x538>
 8002608:	40023800 	.word	0x40023800
 800260c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002610:	4b1b      	ldr	r3, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x544>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d028      	beq.n	8002670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002628:	429a      	cmp	r2, r3
 800262a:	d121      	bne.n	8002670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d11a      	bne.n	8002670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002640:	4013      	ands	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002646:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002648:	4293      	cmp	r3, r2
 800264a:	d111      	bne.n	8002670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	3b01      	subs	r3, #1
 800265a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800

08002684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d101      	bne.n	800269c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e0d0      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800269c:	4b6a      	ldr	r3, [pc, #424]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d910      	bls.n	80026cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026aa:	4b67      	ldr	r3, [pc, #412]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 020f 	bic.w	r2, r3, #15
 80026b2:	4965      	ldr	r1, [pc, #404]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d001      	beq.n	80026cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0b8      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e4:	4b59      	ldr	r3, [pc, #356]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	4a58      	ldr	r2, [pc, #352]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b50      	ldr	r3, [pc, #320]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	494d      	ldr	r1, [pc, #308]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b47      	ldr	r3, [pc, #284]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d115      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e07f      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e073      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b3d      	ldr	r3, [pc, #244]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e06b      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f023 0203 	bic.w	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	4936      	ldr	r1, [pc, #216]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002778:	f7fe fcda 	bl	8001130 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	e00a      	b.n	8002796 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002780:	f7fe fcd6 	bl	8001130 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e053      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 020c 	and.w	r2, r3, #12
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1eb      	bne.n	8002780 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d210      	bcs.n	80027d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 020f 	bic.w	r2, r3, #15
 80027be:	4922      	ldr	r1, [pc, #136]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d001      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e032      	b.n	800283e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	4916      	ldr	r1, [pc, #88]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d009      	beq.n	8002816 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002802:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	490e      	ldr	r1, [pc, #56]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002816:	f000 f831 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	490a      	ldr	r1, [pc, #40]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	fa22 f303 	lsr.w	r3, r2, r3
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1d4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fc36 	bl	80010a8 <HAL_InitTick>

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40023c00 	.word	0x40023c00
 800284c:	40023800 	.word	0x40023800
 8002850:	08009f98 	.word	0x08009f98
 8002854:	20000000 	.word	0x20000000
 8002858:	20000004 	.word	0x20000004

0800285c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M7 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_RCC_EnableCSS+0x1c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a04      	ldr	r2, [pc, #16]	; (8002878 <HAL_RCC_EnableCSS+0x1c>)
 8002866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	bf00      	nop
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002880:	b084      	sub	sp, #16
 8002882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	2300      	movs	r3, #0
 800288e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002894:	4b67      	ldr	r3, [pc, #412]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d00d      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x40>
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	f200 80bd 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ae:	e0b7      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b61      	ldr	r3, [pc, #388]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028b2:	60bb      	str	r3, [r7, #8]
      break;
 80028b4:	e0b7      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b6:	4b61      	ldr	r3, [pc, #388]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028b8:	60bb      	str	r3, [r7, #8]
      break;
 80028ba:	e0b4      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028c6:	4b5b      	ldr	r3, [pc, #364]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d04d      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b58      	ldr	r3, [pc, #352]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	461a      	mov	r2, r3
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	ea02 0800 	and.w	r8, r2, r0
 80028ea:	ea03 0901 	and.w	r9, r3, r1
 80028ee:	4640      	mov	r0, r8
 80028f0:	4649      	mov	r1, r9
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	014b      	lsls	r3, r1, #5
 80028fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002900:	0142      	lsls	r2, r0, #5
 8002902:	4610      	mov	r0, r2
 8002904:	4619      	mov	r1, r3
 8002906:	ebb0 0008 	subs.w	r0, r0, r8
 800290a:	eb61 0109 	sbc.w	r1, r1, r9
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	018b      	lsls	r3, r1, #6
 8002918:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800291c:	0182      	lsls	r2, r0, #6
 800291e:	1a12      	subs	r2, r2, r0
 8002920:	eb63 0301 	sbc.w	r3, r3, r1
 8002924:	f04f 0000 	mov.w	r0, #0
 8002928:	f04f 0100 	mov.w	r1, #0
 800292c:	00d9      	lsls	r1, r3, #3
 800292e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002932:	00d0      	lsls	r0, r2, #3
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	eb12 0208 	adds.w	r2, r2, r8
 800293c:	eb43 0309 	adc.w	r3, r3, r9
 8002940:	f04f 0000 	mov.w	r0, #0
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	0259      	lsls	r1, r3, #9
 800294a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800294e:	0250      	lsls	r0, r2, #9
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	461a      	mov	r2, r3
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	f7fd fca6 	bl	80002b0 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e04a      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800296e:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	099b      	lsrs	r3, r3, #6
 8002974:	461a      	mov	r2, r3
 8002976:	f04f 0300 	mov.w	r3, #0
 800297a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800297e:	f04f 0100 	mov.w	r1, #0
 8002982:	ea02 0400 	and.w	r4, r2, r0
 8002986:	ea03 0501 	and.w	r5, r3, r1
 800298a:	4620      	mov	r0, r4
 800298c:	4629      	mov	r1, r5
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	014b      	lsls	r3, r1, #5
 8002998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800299c:	0142      	lsls	r2, r0, #5
 800299e:	4610      	mov	r0, r2
 80029a0:	4619      	mov	r1, r3
 80029a2:	1b00      	subs	r0, r0, r4
 80029a4:	eb61 0105 	sbc.w	r1, r1, r5
 80029a8:	f04f 0200 	mov.w	r2, #0
 80029ac:	f04f 0300 	mov.w	r3, #0
 80029b0:	018b      	lsls	r3, r1, #6
 80029b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029b6:	0182      	lsls	r2, r0, #6
 80029b8:	1a12      	subs	r2, r2, r0
 80029ba:	eb63 0301 	sbc.w	r3, r3, r1
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	00d9      	lsls	r1, r3, #3
 80029c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029cc:	00d0      	lsls	r0, r2, #3
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	1912      	adds	r2, r2, r4
 80029d4:	eb45 0303 	adc.w	r3, r5, r3
 80029d8:	f04f 0000 	mov.w	r0, #0
 80029dc:	f04f 0100 	mov.w	r1, #0
 80029e0:	0299      	lsls	r1, r3, #10
 80029e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80029e6:	0290      	lsls	r0, r2, #10
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	f7fd fc5a 	bl	80002b0 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4613      	mov	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	60bb      	str	r3, [r7, #8]
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a22:	60bb      	str	r3, [r7, #8]
      break;
 8002a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a26:	68bb      	ldr	r3, [r7, #8]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08009fa8 	.word	0x08009fa8

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffdc 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0b5b      	lsrs	r3, r3, #13
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08009fa8 	.word	0x08009fa8

08002aa8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab4:	2b80      	cmp	r3, #128	; 0x80
 8002ab6:	d104      	bne.n	8002ac2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002ab8:	f000 f80a 	bl	8002ad0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <HAL_RCC_NMI_IRQHandler+0x24>)
 8002abe:	2280      	movs	r2, #128	; 0x80
 8002ac0:	701a      	strb	r2, [r3, #0]
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	4002380e 	.word	0x4002380e

08002ad0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr
	...

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b08:	4b69      	ldr	r3, [pc, #420]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a68      	ldr	r2, [pc, #416]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	4b66      	ldr	r3, [pc, #408]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	4964      	ldr	r1, [pc, #400]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b48:	4959      	ldr	r1, [pc, #356]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d017      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b76:	4b4e      	ldr	r3, [pc, #312]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	494a      	ldr	r1, [pc, #296]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b94:	d101      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0320 	and.w	r3, r3, #32
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 808b 	beq.w	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bc4:	4b3a      	ldr	r3, [pc, #232]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	4a39      	ldr	r2, [pc, #228]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bce:	6413      	str	r3, [r2, #64]	; 0x40
 8002bd0:	4b37      	ldr	r3, [pc, #220]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002be8:	f7fe faa2 	bl	8001130 <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7fe fa9e 	bl	8001130 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e357      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c0e:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d035      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d02e      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c2c:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c36:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c42:	4b1b      	ldr	r3, [pc, #108]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c4e:	4a18      	ldr	r2, [pc, #96]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c54:	4b16      	ldr	r3, [pc, #88]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d114      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa66 	bl	8001130 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe fa62 	bl	8001130 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e319      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c96:	d111      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	4901      	ldr	r1, [pc, #4]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
 8002cae:	e00b      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40007000 	.word	0x40007000
 8002cb8:	0ffffcff 	.word	0x0ffffcff
 8002cbc:	4bb1      	ldr	r3, [pc, #708]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	4ab0      	ldr	r2, [pc, #704]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cc6:	6093      	str	r3, [r2, #8]
 8002cc8:	4bae      	ldr	r3, [pc, #696]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd4:	49ab      	ldr	r1, [pc, #684]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0310 	and.w	r3, r3, #16
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d010      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ce6:	4ba7      	ldr	r3, [pc, #668]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cec:	4aa5      	ldr	r2, [pc, #660]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cf6:	4ba3      	ldr	r3, [pc, #652]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d00:	49a0      	ldr	r1, [pc, #640]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d14:	4b9b      	ldr	r3, [pc, #620]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d22:	4998      	ldr	r1, [pc, #608]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d36:	4b93      	ldr	r3, [pc, #588]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	498f      	ldr	r1, [pc, #572]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d58:	4b8a      	ldr	r3, [pc, #552]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d66:	4987      	ldr	r1, [pc, #540]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d7a:	4b82      	ldr	r3, [pc, #520]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	497e      	ldr	r1, [pc, #504]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4976      	ldr	r1, [pc, #472]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dbe:	4b71      	ldr	r3, [pc, #452]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f023 020c 	bic.w	r2, r3, #12
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dcc:	496d      	ldr	r1, [pc, #436]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	4965      	ldr	r1, [pc, #404]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e02:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e10:	495c      	ldr	r1, [pc, #368]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e24:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	4954      	ldr	r1, [pc, #336]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e46:	4b4f      	ldr	r3, [pc, #316]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	494b      	ldr	r1, [pc, #300]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	4943      	ldr	r1, [pc, #268]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	493a      	ldr	r1, [pc, #232]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eba:	4932      	ldr	r1, [pc, #200]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d011      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ece:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002edc:	4929      	ldr	r1, [pc, #164]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f1c:	4919      	ldr	r1, [pc, #100]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f40:	4910      	ldr	r1, [pc, #64]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d006      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 80d9 	beq.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f5c:	4b09      	ldr	r3, [pc, #36]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f68:	f7fe f8e2 	bl	8001130 <HAL_GetTick>
 8002f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f70:	f7fe f8de 	bl	8001130 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b64      	cmp	r3, #100	; 0x64
 8002f7c:	d904      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e197      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002f82:	bf00      	nop
 8002f84:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f88:	4b6c      	ldr	r3, [pc, #432]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1ed      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d021      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11d      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fa8:	4b64      	ldr	r3, [pc, #400]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fb6:	4b61      	ldr	r3, [pc, #388]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fbc:	0e1b      	lsrs	r3, r3, #24
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	019a      	lsls	r2, r3, #6
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	4957      	ldr	r1, [pc, #348]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d004      	beq.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d02e      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800300e:	d129      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003010:	4b4a      	ldr	r3, [pc, #296]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003016:	0c1b      	lsrs	r3, r3, #16
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0f1b      	lsrs	r3, r3, #28
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	019a      	lsls	r2, r3, #6
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	041b      	lsls	r3, r3, #16
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	061b      	lsls	r3, r3, #24
 800303e:	431a      	orrs	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	071b      	lsls	r3, r3, #28
 8003044:	493d      	ldr	r1, [pc, #244]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800304c:	4b3b      	ldr	r3, [pc, #236]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800304e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003052:	f023 021f 	bic.w	r2, r3, #31
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	3b01      	subs	r3, #1
 800305c:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800305e:	4313      	orrs	r3, r2
 8003060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01d      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003070:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	0e1b      	lsrs	r3, r3, #24
 8003078:	f003 030f 	and.w	r3, r3, #15
 800307c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800307e:	4b2f      	ldr	r3, [pc, #188]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003084:	0f1b      	lsrs	r3, r3, #28
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	019a      	lsls	r2, r3, #6
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	431a      	orrs	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	431a      	orrs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	071b      	lsls	r3, r3, #28
 80030a4:	4925      	ldr	r1, [pc, #148]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d011      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	019a      	lsls	r2, r3, #6
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	071b      	lsls	r3, r3, #28
 80030d4:	4919      	ldr	r1, [pc, #100]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030dc:	4b17      	ldr	r3, [pc, #92]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a16      	ldr	r2, [pc, #88]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030e8:	f7fe f822 	bl	8001130 <HAL_GetTick>
 80030ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030f0:	f7fe f81e 	bl	8001130 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	; 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0d7      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0f0      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b01      	cmp	r3, #1
 8003112:	f040 80cd 	bne.w	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800311c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003122:	f7fe f805 	bl	8001130 <HAL_GetTick>
 8003126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003128:	e00a      	b.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800312a:	f7fe f801 	bl	8001130 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	d903      	bls.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e0ba      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800313c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800314c:	d0ed      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800316a:	2b00      	cmp	r3, #0
 800316c:	d02e      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d12a      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003176:	4b51      	ldr	r3, [pc, #324]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003184:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	0f1b      	lsrs	r3, r3, #28
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	019a      	lsls	r2, r3, #6
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	4944      	ldr	r1, [pc, #272]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031b2:	4b42      	ldr	r3, [pc, #264]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	021b      	lsls	r3, r3, #8
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d022      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e0:	d11d      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031e2:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e8:	0e1b      	lsrs	r3, r3, #24
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f6:	0f1b      	lsrs	r3, r3, #28
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	019a      	lsls	r2, r3, #6
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	071b      	lsls	r3, r3, #28
 8003216:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d028      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800322c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003230:	0e1b      	lsrs	r3, r3, #24
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003238:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	019a      	lsls	r2, r3, #6
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	071b      	lsls	r3, r3, #28
 800325e:	4917      	ldr	r1, [pc, #92]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800326c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	4911      	ldr	r1, [pc, #68]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd ff52 	bl	8001130 <HAL_GetTick>
 800328c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003290:	f7fd ff4e 	bl	8001130 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e007      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d1ef      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f7fd fbad 	bl	8000a44 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f814 	bl	8003320 <HAL_SD_InitCard>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e00a      	b.n	8003318 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003320:	b5b0      	push	{r4, r5, r7, lr}
 8003322:	b08e      	sub	sp, #56	; 0x38
 8003324:	af04      	add	r7, sp, #16
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003334:	2300      	movs	r3, #0
 8003336:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800333c:	2376      	movs	r3, #118	; 0x76
 800333e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681d      	ldr	r5, [r3, #0]
 8003344:	466c      	mov	r4, sp
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800334e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003358:	4628      	mov	r0, r5
 800335a:	f001 ff25 	bl	80051a8 <SDMMC_Init>
 800335e:	4603      	mov	r3, r0
 8003360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e059      	b.n	8003424 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685a      	ldr	r2, [r3, #4]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800337e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f001 ff59 	bl	800523c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003398:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800339a:	2002      	movs	r0, #2
 800339c:	f7fd fed4 	bl	8001148 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 fff1 	bl	8004388 <SD_PowerON>
 80033a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00b      	beq.n	80033c6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e02e      	b.n	8003424 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 ff12 	bl	80041f0 <SD_InitCard>
 80033cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00b      	beq.n	80033ec <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e01b      	b.n	8003424 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033f4:	4618      	mov	r0, r3
 80033f6:	f001 ffb3 	bl	8005360 <SDMMC_CmdBlockLength>
 80033fa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00f      	beq.n	8003422 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_SD_InitCard+0x10c>)
 8003408:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3728      	adds	r7, #40	; 0x28
 8003428:	46bd      	mov	sp, r7
 800342a:	bdb0      	pop	{r4, r5, r7, pc}
 800342c:	004005ff 	.word	0x004005ff

08003430 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08c      	sub	sp, #48	; 0x30
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d107      	bne.n	8003458 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0c3      	b.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b01      	cmp	r3, #1
 8003462:	f040 80bc 	bne.w	80035de <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800346c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	441a      	add	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003476:	429a      	cmp	r2, r3
 8003478:	d907      	bls.n	800348a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e0aa      	b.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	4a4e      	ldr	r2, [pc, #312]	; (80035e8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80034b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b6:	4a4d      	ldr	r2, [pc, #308]	; (80035ec <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80034b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2200      	movs	r2, #0
 80034c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2200      	movs	r2, #0
 80034c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3380      	adds	r3, #128	; 0x80
 80034f0:	4619      	mov	r1, r3
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	025b      	lsls	r3, r3, #9
 80034f8:	089b      	lsrs	r3, r3, #2
 80034fa:	f7fe f809 	bl	8001510 <HAL_DMA_Start_IT>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d017      	beq.n	8003534 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a35      	ldr	r2, [pc, #212]	; (80035f0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e055      	b.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0208 	orr.w	r2, r2, #8
 8003542:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003548:	2b01      	cmp	r3, #1
 800354a:	d002      	beq.n	8003552 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	025b      	lsls	r3, r3, #9
 8003550:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295
 8003556:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	025b      	lsls	r3, r3, #9
 800355c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800355e:	2390      	movs	r3, #144	; 0x90
 8003560:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003562:	2302      	movs	r3, #2
 8003564:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800356a:	2301      	movs	r3, #1
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f107 0210 	add.w	r2, r7, #16
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f001 fec5 	bl	8005308 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d90a      	bls.n	800359a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2282      	movs	r2, #130	; 0x82
 8003588:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003590:	4618      	mov	r0, r3
 8003592:	f001 ff29 	bl	80053e8 <SDMMC_CmdReadMultiBlock>
 8003596:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003598:	e009      	b.n	80035ae <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2281      	movs	r2, #129	; 0x81
 800359e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fefc 	bl	80053a4 <SDMMC_CmdReadSingleBlock>
 80035ac:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d012      	beq.n	80035da <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	; (80035f0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80035ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e002      	b.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80035de:	2302      	movs	r3, #2
  }
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3730      	adds	r7, #48	; 0x30
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	08003fff 	.word	0x08003fff
 80035ec:	08004071 	.word	0x08004071
 80035f0:	004005ff 	.word	0x004005ff

080035f4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d107      	bne.n	800361c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0c6      	b.n	80037aa <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	f040 80bf 	bne.w	80037a8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800363a:	429a      	cmp	r2, r3
 800363c:	d907      	bls.n	800364e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0ad      	b.n	80037aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2203      	movs	r2, #3
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2200      	movs	r2, #0
 800365c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 021a 	orr.w	r2, r2, #26
 800366c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8003674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	4a4f      	ldr	r2, [pc, #316]	; (80037b8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800367c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2200      	movs	r2, #0
 8003684:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	2b01      	cmp	r3, #1
 800368c:	d002      	beq.n	8003694 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003690:	025b      	lsls	r3, r3, #9
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d90a      	bls.n	80036b0 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	22a0      	movs	r2, #160	; 0xa0
 800369e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fee2 	bl	8005470 <SDMMC_CmdWriteMultiBlock>
 80036ac:	62f8      	str	r0, [r7, #44]	; 0x2c
 80036ae:	e009      	b.n	80036c4 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2290      	movs	r2, #144	; 0x90
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 feb5 	bl	800542c <SDMMC_CmdWriteSingleBlock>
 80036c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d012      	beq.n	80036f0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	; (80037bc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80036d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e05c      	b.n	80037aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0208 	orr.w	r2, r2, #8
 80036fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	430a      	orrs	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3380      	adds	r3, #128	; 0x80
 8003730:	461a      	mov	r2, r3
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	025b      	lsls	r3, r3, #9
 8003736:	089b      	lsrs	r3, r3, #2
 8003738:	f7fd feea 	bl	8001510 <HAL_DMA_Start_IT>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01a      	beq.n	8003778 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 021a 	bic.w	r2, r2, #26
 8003750:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a19      	ldr	r2, [pc, #100]	; (80037bc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003758:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e018      	b.n	80037aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	025b      	lsls	r3, r3, #9
 8003782:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8003784:	2390      	movs	r3, #144	; 0x90
 8003786:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8003788:	2300      	movs	r3, #0
 800378a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800378c:	2300      	movs	r3, #0
 800378e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f107 0210 	add.w	r2, r7, #16
 800379c:	4611      	mov	r1, r2
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 fdb2 	bl	8005308 <SDMMC_ConfigData>

      return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3730      	adds	r7, #48	; 0x30
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	08003fd5 	.word	0x08003fd5
 80037b8:	08004071 	.word	0x08004071
 80037bc:	004005ff 	.word	0x004005ff

080037c0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d008      	beq.n	80037ee <HAL_SD_IRQHandler+0x2e>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 ffed 	bl	80047c6 <SD_Read_IT>
 80037ec:	e153      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 808d 	beq.w	8003918 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003806:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	4ba3      	ldr	r3, [pc, #652]	; (8003aa0 <HAL_SD_IRQHandler+0x2e0>)
 8003814:	400b      	ands	r3, r1
 8003816:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d039      	beq.n	80038a6 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d104      	bne.n	8003846 <HAL_SD_IRQHandler+0x86>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b00      	cmp	r3, #0
 8003844:	d011      	beq.n	800386a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f001 fe32 	bl	80054b4 <SDMMC_CmdStopTransfer>
 8003850:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f921 	bl	8003aac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003872:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d104      	bne.n	8003896 <HAL_SD_IRQHandler+0xd6>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f002 fd90 	bl	80063bc <HAL_SD_RxCpltCallback>
 800389c:	e0fb      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f002 fd82 	bl	80063a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80038a4:	e0f7      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 80f2 	beq.w	8003a96 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d011      	beq.n	80038e0 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fdf7 	bl	80054b4 <SDMMC_CmdStopTransfer>
 80038c6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d008      	beq.n	80038e0 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f8e6 	bl	8003aac <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f040 80d5 	bne.w	8003a96 <HAL_SD_IRQHandler+0x2d6>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f040 80cf 	bne.w	8003a96 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0208 	bic.w	r2, r2, #8
 8003906:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f002 fd49 	bl	80063a8 <HAL_SD_TxCpltCallback>
}
 8003916:	e0be      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d008      	beq.n	8003938 <HAL_SD_IRQHandler+0x178>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 ff99 	bl	8004868 <SD_Write_IT>
 8003936:	e0ae      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80a7 	beq.w	8003a96 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	f043 0202 	orr.w	r2, r3, #2
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	f043 0208 	orr.w	r2, r3, #8
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398e:	f043 0220 	orr.w	r2, r3, #32
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a8:	f043 0210 	orr.w	r2, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f240 523a 	movw	r2, #1338	; 0x53a
 80039b8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fd70 	bl	80054b4 <SDMMC_CmdStopTransfer>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 f857 	bl	8003aac <HAL_SD_ErrorCallback>
}
 80039fe:	e04a      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d045      	beq.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d104      	bne.n	8003a1e <HAL_SD_IRQHandler+0x25e>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d011      	beq.n	8003a42 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_SD_IRQHandler+0x2e4>)
 8003a24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd fdd0 	bl	80015d0 <HAL_DMA_Abort_IT>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d02f      	beq.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fb6a 	bl	8004114 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003a40:	e029      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d104      	bne.n	8003a56 <HAL_SD_IRQHandler+0x296>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d011      	beq.n	8003a7a <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <HAL_SD_IRQHandler+0x2e8>)
 8003a5c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd fdb4 	bl	80015d0 <HAL_DMA_Abort_IT>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d013      	beq.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 fb85 	bl	8004182 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003a78:	e00d      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f002 fc80 	bl	8006394 <HAL_SD_AbortCallback>
}
 8003a94:	e7ff      	b.n	8003a96 <HAL_SD_IRQHandler+0x2d6>
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	ffff3ec5 	.word	0xffff3ec5
 8003aa4:	08004115 	.word	0x08004115
 8003aa8:	08004183 	.word	0x08004183

08003aac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ace:	0f9b      	lsrs	r3, r3, #30
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	0e9b      	lsrs	r3, r3, #26
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aec:	0e1b      	lsrs	r3, r3, #24
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b20:	0d1b      	lsrs	r3, r3, #20
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b3e:	0bdb      	lsrs	r3, r3, #15
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b50:	0b9b      	lsrs	r3, r3, #14
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b62:	0b5b      	lsrs	r3, r3, #13
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b74:	0b1b      	lsrs	r3, r3, #12
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2200      	movs	r2, #0
 8003b86:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d163      	bne.n	8003c58 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003ba0:	0f92      	lsrs	r2, r2, #30
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bac:	0edb      	lsrs	r3, r3, #27
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bbe:	0e1b      	lsrs	r3, r3, #24
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bd0:	0d5b      	lsrs	r3, r3, #21
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bf4:	0bdb      	lsrs	r3, r3, #15
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	7e1b      	ldrb	r3, [r3, #24]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	3302      	adds	r3, #2
 8003c18:	2201      	movs	r2, #1
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c22:	fb02 f203 	mul.w	r2, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	7a1b      	ldrb	r3, [r3, #8]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	2201      	movs	r2, #1
 8003c36:	409a      	lsls	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003c44:	0a52      	lsrs	r2, r2, #9
 8003c46:	fb02 f203 	mul.w	r2, r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
 8003c56:	e031      	b.n	8003cbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d11d      	bne.n	8003c9c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c64:	041b      	lsls	r3, r3, #16
 8003c66:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c6e:	0c1b      	lsrs	r3, r3, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	029a      	lsls	r2, r3, #10
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	661a      	str	r2, [r3, #96]	; 0x60
 8003c9a:	e00f      	b.n	8003cbc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <HAL_SD_GetCardCSD+0x344>)
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e09d      	b.n	8003df8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cc0:	0b9b      	lsrs	r3, r3, #14
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd2:	09db      	lsrs	r3, r3, #7
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf4:	0fdb      	lsrs	r3, r3, #31
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	0f5b      	lsrs	r3, r3, #29
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0303 	and.w	r3, r3, #3
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	0e9b      	lsrs	r3, r3, #26
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d24:	0d9b      	lsrs	r3, r3, #22
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	f003 030f 	and.w	r3, r3, #15
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	0d5b      	lsrs	r3, r3, #21
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	0c1b      	lsrs	r3, r3, #16
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	0bdb      	lsrs	r3, r3, #15
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	0b9b      	lsrs	r3, r3, #14
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	0b5b      	lsrs	r3, r3, #13
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	0b1b      	lsrs	r3, r3, #12
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dca:	0a1b      	lsrs	r3, r3, #8
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0303 	and.w	r3, r3, #3
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	004005ff 	.word	0x004005ff

08003e08 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003e60:	b5b0      	push	{r4, r5, r7, lr}
 8003e62:	b08e      	sub	sp, #56	; 0x38
 8003e64:	af04      	add	r7, sp, #16
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2203      	movs	r2, #3
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d02e      	beq.n	8003ede <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d106      	bne.n	8003e96 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
 8003e94:	e029      	b.n	8003eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fb28 	bl	80044f4 <SD_WideBus_Enable>
 8003ea4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eaa:	6a3b      	ldr	r3, [r7, #32]
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8003eb2:	e01a      	b.n	8003eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb65 	bl	800458a <SD_WideBus_Disable>
 8003ec0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ece:	e00c      	b.n	8003eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	639a      	str	r2, [r3, #56]	; 0x38
 8003edc:	e005      	b.n	8003eea <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f08:	e01f      	b.n	8003f4a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681d      	ldr	r5, [r3, #0]
 8003f30:	466c      	mov	r4, sp
 8003f32:	f107 0314 	add.w	r3, r7, #20
 8003f36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f44:	4628      	mov	r0, r5
 8003f46:	f001 f92f 	bl	80051a8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fa04 	bl	8005360 <SDMMC_CmdBlockLength>
 8003f58:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00c      	beq.n	8003f7a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0a      	ldr	r2, [pc, #40]	; (8003f90 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003f66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8003f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3728      	adds	r7, #40	; 0x28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	004005ff 	.word	0x004005ff

08003f94 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa7c 	bl	80044a4 <SD_SendStatus>
 8003fac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d005      	beq.n	8003fc0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	0a5b      	lsrs	r3, r3, #9
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003fca:	693b      	ldr	r3, [r7, #16]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003ff2:	bf00      	nop
 8003ff4:	3714      	adds	r7, #20
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	2b82      	cmp	r3, #130	; 0x82
 8004012:	d111      	bne.n	8004038 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f001 fa4b 	bl	80054b4 <SDMMC_CmdStopTransfer>
 800401e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d008      	beq.n	8004038 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	431a      	orrs	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f7ff fd3a 	bl	8003aac <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 0208 	bic.w	r2, r2, #8
 8004046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004050:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f002 f9ab 	bl	80063bc <HAL_SD_RxCpltCallback>
#endif
}
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fc52 	bl	8001928 <HAL_DMA_GetError>
 8004084:	4603      	mov	r3, r0
 8004086:	2b02      	cmp	r3, #2
 8004088:	d03e      	beq.n	8004108 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004090:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004098:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d002      	beq.n	80040a6 <SD_DMAError+0x36>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d12d      	bne.n	8004102 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a19      	ldr	r2, [pc, #100]	; (8004110 <SD_DMAError+0xa0>)
 80040ac:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80040bc:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80040ca:	6978      	ldr	r0, [r7, #20]
 80040cc:	f7ff ff62 	bl	8003f94 <HAL_SD_GetCardState>
 80040d0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d002      	beq.n	80040de <SD_DMAError+0x6e>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10a      	bne.n	80040f4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f001 f9e6 	bl	80054b4 <SDMMC_CmdStopTransfer>
 80040e8:	4602      	mov	r2, r0
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	431a      	orrs	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff fcd2 	bl	8003aac <HAL_SD_ErrorCallback>
#endif
  }
}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	004005ff 	.word	0x004005ff

08004114 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f240 523a 	movw	r2, #1338	; 0x53a
 800412a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f7ff ff31 	bl	8003f94 <HAL_SD_GetCardState>
 8004132:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b06      	cmp	r3, #6
 8004146:	d002      	beq.n	800414e <SD_DMATxAbort+0x3a>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b05      	cmp	r3, #5
 800414c:	d10a      	bne.n	8004164 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f9ae 	bl	80054b4 <SDMMC_CmdStopTransfer>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	431a      	orrs	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d103      	bne.n	8004174 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f002 f911 	bl	8006394 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004172:	e002      	b.n	800417a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff fc99 	bl	8003aac <HAL_SD_ErrorCallback>
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f240 523a 	movw	r2, #1338	; 0x53a
 8004198:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fefa 	bl	8003f94 <HAL_SD_GetCardState>
 80041a0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d002      	beq.n	80041bc <SD_DMARxAbort+0x3a>
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d10a      	bne.n	80041d2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f001 f977 	bl	80054b4 <SDMMC_CmdStopTransfer>
 80041c6:	4602      	mov	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	431a      	orrs	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d103      	bne.n	80041e2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f002 f8da 	bl	8006394 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80041e0:	e002      	b.n	80041e8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff fc62 	bl	8003aac <HAL_SD_ErrorCallback>
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80041f0:	b5b0      	push	{r4, r5, r7, lr}
 80041f2:	b094      	sub	sp, #80	; 0x50
 80041f4:	af04      	add	r7, sp, #16
 80041f6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041f8:	2301      	movs	r3, #1
 80041fa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f001 f829 	bl	8005258 <SDMMC_GetPowerState>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d102      	bne.n	8004212 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800420c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004210:	e0b6      	b.n	8004380 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004216:	2b03      	cmp	r3, #3
 8004218:	d02f      	beq.n	800427a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f001 fa53 	bl	80056ca <SDMMC_CmdSendCID>
 8004224:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <SD_InitCard+0x40>
    {
      return errorstate;
 800422c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422e:	e0a7      	b.n	8004380 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2100      	movs	r1, #0
 8004236:	4618      	mov	r0, r3
 8004238:	f001 f853 	bl	80052e2 <SDMMC_GetResponse>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2104      	movs	r1, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f001 f84a 	bl	80052e2 <SDMMC_GetResponse>
 800424e:	4602      	mov	r2, r0
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2108      	movs	r1, #8
 800425a:	4618      	mov	r0, r3
 800425c:	f001 f841 	bl	80052e2 <SDMMC_GetResponse>
 8004260:	4602      	mov	r2, r0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	210c      	movs	r1, #12
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f838 	bl	80052e2 <SDMMC_GetResponse>
 8004272:	4602      	mov	r2, r0
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	2b03      	cmp	r3, #3
 8004280:	d00d      	beq.n	800429e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f107 020e 	add.w	r2, r7, #14
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fa59 	bl	8005744 <SDMMC_CmdSetRelAdd>
 8004292:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <SD_InitCard+0xae>
    {
      return errorstate;
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	e070      	b.n	8004380 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d036      	beq.n	8004314 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80042a6:	89fb      	ldrh	r3, [r7, #14]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f001 fa23 	bl	8005706 <SDMMC_CmdSendCSD>
 80042c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80042c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <SD_InitCard+0xdc>
    {
      return errorstate;
 80042c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042ca:	e059      	b.n	8004380 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2100      	movs	r1, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 f805 	bl	80052e2 <SDMMC_GetResponse>
 80042d8:	4602      	mov	r2, r0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2104      	movs	r1, #4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fffc 	bl	80052e2 <SDMMC_GetResponse>
 80042ea:	4602      	mov	r2, r0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2108      	movs	r1, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 fff3 	bl	80052e2 <SDMMC_GetResponse>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	210c      	movs	r1, #12
 8004308:	4618      	mov	r0, r3
 800430a:	f000 ffea 	bl	80052e2 <SDMMC_GetResponse>
 800430e:	4602      	mov	r2, r0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2104      	movs	r1, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f000 ffe1 	bl	80052e2 <SDMMC_GetResponse>
 8004320:	4603      	mov	r3, r0
 8004322:	0d1a      	lsrs	r2, r3, #20
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004328:	f107 0310 	add.w	r3, r7, #16
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff fbc6 	bl	8003ac0 <HAL_SD_GetCardCSD>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800433a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800433e:	e01f      	b.n	8004380 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6819      	ldr	r1, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	461a      	mov	r2, r3
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	4608      	mov	r0, r1
 8004352:	f001 f8d1 	bl	80054f8 <SDMMC_CmdSelDesel>
 8004356:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <SD_InitCard+0x172>
  {
    return errorstate;
 800435e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004360:	e00e      	b.n	8004380 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681d      	ldr	r5, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	466c      	mov	r4, sp
 800436a:	f103 0210 	add.w	r2, r3, #16
 800436e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004370:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004374:	3304      	adds	r3, #4
 8004376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004378:	4628      	mov	r0, r5
 800437a:	f000 ff15 	bl	80051a8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3740      	adds	r7, #64	; 0x40
 8004384:	46bd      	mov	sp, r7
 8004386:	bdb0      	pop	{r4, r5, r7, pc}

08004388 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f001 f8cc 	bl	800553e <SDMMC_CmdGoIdleState>
 80043a6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	e072      	b.n	8004498 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f001 f8df 	bl	800557a <SDMMC_CmdOperCond>
 80043bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f001 f8b5 	bl	800553e <SDMMC_CmdGoIdleState>
 80043d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	e05b      	b.n	8004498 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d137      	bne.n	800445e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f8df 	bl	80055b8 <SDMMC_CmdAppCommand>
 80043fa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d02d      	beq.n	800445e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004402:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004406:	e047      	b.n	8004498 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f001 f8d2 	bl	80055b8 <SDMMC_CmdAppCommand>
 8004414:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <SD_PowerON+0x98>
    {
      return errorstate;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	e03b      	b.n	8004498 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	491e      	ldr	r1, [pc, #120]	; (80044a0 <SD_PowerON+0x118>)
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f8e8 	bl	80055fc <SDMMC_CmdAppOperCommand>
 800442c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004434:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004438:	e02e      	b.n	8004498 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2100      	movs	r1, #0
 8004440:	4618      	mov	r0, r3
 8004442:	f000 ff4e 	bl	80052e2 <SDMMC_GetResponse>
 8004446:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	0fdb      	lsrs	r3, r3, #31
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <SD_PowerON+0xcc>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <SD_PowerON+0xce>
 8004454:	2300      	movs	r3, #0
 8004456:	613b      	str	r3, [r7, #16]

    count++;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	3301      	adds	r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004464:	4293      	cmp	r3, r2
 8004466:	d802      	bhi.n	800446e <SD_PowerON+0xe6>
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0cc      	beq.n	8004408 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004474:	4293      	cmp	r3, r2
 8004476:	d902      	bls.n	800447e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800447c:	e00c      	b.n	8004498 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d003      	beq.n	8004490 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
 800448e:	e002      	b.n	8004496 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	c1100000 	.word	0xc1100000

080044a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80044b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b8:	e018      	b.n	80044ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c2:	041b      	lsls	r3, r3, #16
 80044c4:	4619      	mov	r1, r3
 80044c6:	4610      	mov	r0, r2
 80044c8:	f001 f95d 	bl	8005786 <SDMMC_CmdSendStatus>
 80044cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	e009      	b.n	80044ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2100      	movs	r1, #0
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 feff 	bl	80052e2 <SDMMC_GetResponse>
 80044e4:	4602      	mov	r2, r0
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2100      	movs	r1, #0
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fee9 	bl	80052e2 <SDMMC_GetResponse>
 8004510:	4603      	mov	r3, r0
 8004512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800451a:	d102      	bne.n	8004522 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800451c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004520:	e02f      	b.n	8004582 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004522:	f107 030c 	add.w	r3, r7, #12
 8004526:	4619      	mov	r1, r3
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f879 	bl	8004620 <SD_FindSCR>
 800452e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	e023      	b.n	8004582 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01c      	beq.n	800457e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	4619      	mov	r1, r3
 8004550:	4610      	mov	r0, r2
 8004552:	f001 f831 	bl	80055b8 <SDMMC_CmdAppCommand>
 8004556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	e00f      	b.n	8004582 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2102      	movs	r1, #2
 8004568:	4618      	mov	r0, r3
 800456a:	f001 f86b 	bl	8005644 <SDMMC_CmdBusWidth>
 800456e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	e003      	b.n	8004582 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800457a:	2300      	movs	r3, #0
 800457c:	e001      	b.n	8004582 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800457e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b086      	sub	sp, #24
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fe9e 	bl	80052e2 <SDMMC_GetResponse>
 80045a6:	4603      	mov	r3, r0
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045b0:	d102      	bne.n	80045b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80045b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045b6:	e02f      	b.n	8004618 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f82e 	bl	8004620 <SD_FindSCR>
 80045c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	e023      	b.n	8004618 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01c      	beq.n	8004614 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 ffe6 	bl	80055b8 <SDMMC_CmdAppCommand>
 80045ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	e00f      	b.n	8004618 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2100      	movs	r1, #0
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f820 	bl	8005644 <SDMMC_CmdBusWidth>
 8004604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	e003      	b.n	8004618 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004610:	2300      	movs	r3, #0
 8004612:	e001      	b.n	8004618 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3718      	adds	r7, #24
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b08f      	sub	sp, #60	; 0x3c
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800462a:	f7fc fd81 	bl	8001130 <HAL_GetTick>
 800462e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004634:	2300      	movs	r3, #0
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2108      	movs	r1, #8
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fe8a 	bl	8005360 <SDMMC_CmdBlockLength>
 800464c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004656:	e0b2      	b.n	80047be <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f000 ffa7 	bl	80055b8 <SDMMC_CmdAppCommand>
 800466a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	e0a3      	b.n	80047be <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800467c:	2308      	movs	r3, #8
 800467e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8004680:	2330      	movs	r3, #48	; 0x30
 8004682:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004684:	2302      	movs	r3, #2
 8004686:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004688:	2300      	movs	r3, #0
 800468a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800468c:	2301      	movs	r3, #1
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f107 0210 	add.w	r2, r7, #16
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fe34 	bl	8005308 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 ffef 	bl	8005688 <SDMMC_CmdSendSCR>
 80046aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80046ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d02a      	beq.n	8004708 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80046b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b4:	e083      	b.n	80047be <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6819      	ldr	r1, [r3, #0]
 80046c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	f107 0208 	add.w	r2, r7, #8
 80046d0:	18d4      	adds	r4, r2, r3
 80046d2:	4608      	mov	r0, r1
 80046d4:	f000 fd94 	bl	8005200 <SDMMC_ReadFIFO>
 80046d8:	4603      	mov	r3, r0
 80046da:	6023      	str	r3, [r4, #0]
      index++;
 80046dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046de:	3301      	adds	r3, #1
 80046e0:	637b      	str	r3, [r7, #52]	; 0x34
 80046e2:	e006      	b.n	80046f2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d012      	beq.n	8004718 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80046f2:	f7fc fd1d 	bl	8001130 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004700:	d102      	bne.n	8004708 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004702:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004706:	e05a      	b.n	80047be <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0cf      	beq.n	80046b6 <SD_FindSCR+0x96>
 8004716:	e000      	b.n	800471a <SD_FindSCR+0xfa>
      break;
 8004718:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2208      	movs	r2, #8
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004730:	2308      	movs	r3, #8
 8004732:	e044      	b.n	80047be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2202      	movs	r2, #2
 8004748:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800474a:	2302      	movs	r3, #2
 800474c:	e037      	b.n	80047be <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2220      	movs	r2, #32
 8004762:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004764:	2320      	movs	r3, #32
 8004766:	e02a      	b.n	80047be <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004770:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	061a      	lsls	r2, r3, #24
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800477e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004788:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	0e1b      	lsrs	r3, r3, #24
 800478e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	601a      	str	r2, [r3, #0]
    scr++;
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	3304      	adds	r3, #4
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	061a      	lsls	r2, r3, #24
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	021b      	lsls	r3, r3, #8
 80047a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80047a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	0e1b      	lsrs	r3, r3, #24
 80047b6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	373c      	adds	r7, #60	; 0x3c
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd90      	pop	{r4, r7, pc}

080047c6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d03f      	beq.n	8004860 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e033      	b.n	800484e <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fd08 	bl	8005200 <SDMMC_ReadFIFO>
 80047f0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	3b01      	subs	r3, #1
 8004804:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	0a1b      	lsrs	r3, r3, #8
 800480a:	b2da      	uxtb	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3b01      	subs	r3, #1
 800481a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	0c1b      	lsrs	r3, r3, #16
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3301      	adds	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	3b01      	subs	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	0e1b      	lsrs	r3, r3, #24
 8004836:	b2da      	uxtb	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	3301      	adds	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	3b01      	subs	r3, #1
 8004846:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	3301      	adds	r3, #1
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b07      	cmp	r3, #7
 8004852:	d9c8      	bls.n	80047e6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004860:	bf00      	nop
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d043      	beq.n	800490a <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e037      	b.n	80048f8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	3301      	adds	r3, #1
 8004892:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	3b01      	subs	r3, #1
 8004898:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	3301      	adds	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	041a      	lsls	r2, r3, #16
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3301      	adds	r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	061a      	lsls	r2, r3, #24
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3b01      	subs	r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f107 0208 	add.w	r2, r7, #8
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fc94 	bl	800521a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3301      	adds	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b07      	cmp	r3, #7
 80048fc:	d9c4      	bls.n	8004888 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800490a:	bf00      	nop
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e040      	b.n	80049a6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7fc fa79 	bl	8000e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2224      	movs	r2, #36	; 0x24
 800493e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0201 	bic.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f82d 	bl	80049b0 <UART_SetConfig>
 8004956:	4603      	mov	r3, r0
 8004958:	2b01      	cmp	r3, #1
 800495a:	d101      	bne.n	8004960 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e022      	b.n	80049a6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fa83 	bl	8004e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800497c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800498c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0201 	orr.w	r2, r2, #1
 800499c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fb0a 	bl	8004fb8 <UART_CheckIdleState>
 80049a4:	4603      	mov	r3, r0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4ba7      	ldr	r3, [pc, #668]	; (8004c78 <UART_SetConfig+0x2c8>)
 80049dc:	4013      	ands	r3, r2
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	6979      	ldr	r1, [r7, #20]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a95      	ldr	r2, [pc, #596]	; (8004c7c <UART_SetConfig+0x2cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d120      	bne.n	8004a6e <UART_SetConfig+0xbe>
 8004a2c:	4b94      	ldr	r3, [pc, #592]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d816      	bhi.n	8004a68 <UART_SetConfig+0xb8>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <UART_SetConfig+0x90>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a57 	.word	0x08004a57
 8004a4c:	08004a63 	.word	0x08004a63
 8004a50:	2301      	movs	r3, #1
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e14f      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004a56:	2302      	movs	r3, #2
 8004a58:	77fb      	strb	r3, [r7, #31]
 8004a5a:	e14c      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	77fb      	strb	r3, [r7, #31]
 8004a60:	e149      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004a62:	2308      	movs	r3, #8
 8004a64:	77fb      	strb	r3, [r7, #31]
 8004a66:	e146      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	77fb      	strb	r3, [r7, #31]
 8004a6c:	e143      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <UART_SetConfig+0x2d4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d132      	bne.n	8004ade <UART_SetConfig+0x12e>
 8004a78:	4b81      	ldr	r3, [pc, #516]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f003 030c 	and.w	r3, r3, #12
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d828      	bhi.n	8004ad8 <UART_SetConfig+0x128>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0xdc>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004ad9 	.word	0x08004ad9
 8004a94:	08004ad9 	.word	0x08004ad9
 8004a98:	08004ad9 	.word	0x08004ad9
 8004a9c:	08004acd 	.word	0x08004acd
 8004aa0:	08004ad9 	.word	0x08004ad9
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004ac7 	.word	0x08004ac7
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004ad9 	.word	0x08004ad9
 8004abc:	08004ad3 	.word	0x08004ad3
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	77fb      	strb	r3, [r7, #31]
 8004ac4:	e117      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e114      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004acc:	2304      	movs	r3, #4
 8004ace:	77fb      	strb	r3, [r7, #31]
 8004ad0:	e111      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ad2:	2308      	movs	r3, #8
 8004ad4:	77fb      	strb	r3, [r7, #31]
 8004ad6:	e10e      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ad8:	2310      	movs	r3, #16
 8004ada:	77fb      	strb	r3, [r7, #31]
 8004adc:	e10b      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <UART_SetConfig+0x2d8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d120      	bne.n	8004b2a <UART_SetConfig+0x17a>
 8004ae8:	4b65      	ldr	r3, [pc, #404]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004af2:	2b30      	cmp	r3, #48	; 0x30
 8004af4:	d013      	beq.n	8004b1e <UART_SetConfig+0x16e>
 8004af6:	2b30      	cmp	r3, #48	; 0x30
 8004af8:	d814      	bhi.n	8004b24 <UART_SetConfig+0x174>
 8004afa:	2b20      	cmp	r3, #32
 8004afc:	d009      	beq.n	8004b12 <UART_SetConfig+0x162>
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d810      	bhi.n	8004b24 <UART_SetConfig+0x174>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <UART_SetConfig+0x15c>
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d006      	beq.n	8004b18 <UART_SetConfig+0x168>
 8004b0a:	e00b      	b.n	8004b24 <UART_SetConfig+0x174>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e0f1      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b12:	2302      	movs	r3, #2
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e0ee      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b18:	2304      	movs	r3, #4
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e0eb      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b1e:	2308      	movs	r3, #8
 8004b20:	77fb      	strb	r3, [r7, #31]
 8004b22:	e0e8      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b24:	2310      	movs	r3, #16
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e0e5      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a57      	ldr	r2, [pc, #348]	; (8004c8c <UART_SetConfig+0x2dc>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d120      	bne.n	8004b76 <UART_SetConfig+0x1c6>
 8004b34:	4b52      	ldr	r3, [pc, #328]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b40:	d013      	beq.n	8004b6a <UART_SetConfig+0x1ba>
 8004b42:	2bc0      	cmp	r3, #192	; 0xc0
 8004b44:	d814      	bhi.n	8004b70 <UART_SetConfig+0x1c0>
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d009      	beq.n	8004b5e <UART_SetConfig+0x1ae>
 8004b4a:	2b80      	cmp	r3, #128	; 0x80
 8004b4c:	d810      	bhi.n	8004b70 <UART_SetConfig+0x1c0>
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <UART_SetConfig+0x1a8>
 8004b52:	2b40      	cmp	r3, #64	; 0x40
 8004b54:	d006      	beq.n	8004b64 <UART_SetConfig+0x1b4>
 8004b56:	e00b      	b.n	8004b70 <UART_SetConfig+0x1c0>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	77fb      	strb	r3, [r7, #31]
 8004b5c:	e0cb      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	77fb      	strb	r3, [r7, #31]
 8004b62:	e0c8      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b64:	2304      	movs	r3, #4
 8004b66:	77fb      	strb	r3, [r7, #31]
 8004b68:	e0c5      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	77fb      	strb	r3, [r7, #31]
 8004b6e:	e0c2      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b70:	2310      	movs	r3, #16
 8004b72:	77fb      	strb	r3, [r7, #31]
 8004b74:	e0bf      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <UART_SetConfig+0x2e0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d125      	bne.n	8004bcc <UART_SetConfig+0x21c>
 8004b80:	4b3f      	ldr	r3, [pc, #252]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b8e:	d017      	beq.n	8004bc0 <UART_SetConfig+0x210>
 8004b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b94:	d817      	bhi.n	8004bc6 <UART_SetConfig+0x216>
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d00b      	beq.n	8004bb4 <UART_SetConfig+0x204>
 8004b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ba0:	d811      	bhi.n	8004bc6 <UART_SetConfig+0x216>
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <UART_SetConfig+0x1fe>
 8004ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004baa:	d006      	beq.n	8004bba <UART_SetConfig+0x20a>
 8004bac:	e00b      	b.n	8004bc6 <UART_SetConfig+0x216>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	77fb      	strb	r3, [r7, #31]
 8004bb2:	e0a0      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e09d      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004bba:	2304      	movs	r3, #4
 8004bbc:	77fb      	strb	r3, [r7, #31]
 8004bbe:	e09a      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004bc0:	2308      	movs	r3, #8
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e097      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004bc6:	2310      	movs	r3, #16
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e094      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a30      	ldr	r2, [pc, #192]	; (8004c94 <UART_SetConfig+0x2e4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d125      	bne.n	8004c22 <UART_SetConfig+0x272>
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004be0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004be4:	d017      	beq.n	8004c16 <UART_SetConfig+0x266>
 8004be6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004bea:	d817      	bhi.n	8004c1c <UART_SetConfig+0x26c>
 8004bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf0:	d00b      	beq.n	8004c0a <UART_SetConfig+0x25a>
 8004bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bf6:	d811      	bhi.n	8004c1c <UART_SetConfig+0x26c>
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <UART_SetConfig+0x254>
 8004bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c00:	d006      	beq.n	8004c10 <UART_SetConfig+0x260>
 8004c02:	e00b      	b.n	8004c1c <UART_SetConfig+0x26c>
 8004c04:	2301      	movs	r3, #1
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e075      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e072      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c10:	2304      	movs	r3, #4
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e06f      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c16:	2308      	movs	r3, #8
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e06c      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e069      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <UART_SetConfig+0x2e8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d137      	bne.n	8004c9c <UART_SetConfig+0x2ec>
 8004c2c:	4b14      	ldr	r3, [pc, #80]	; (8004c80 <UART_SetConfig+0x2d0>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c3a:	d017      	beq.n	8004c6c <UART_SetConfig+0x2bc>
 8004c3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c40:	d817      	bhi.n	8004c72 <UART_SetConfig+0x2c2>
 8004c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c46:	d00b      	beq.n	8004c60 <UART_SetConfig+0x2b0>
 8004c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c4c:	d811      	bhi.n	8004c72 <UART_SetConfig+0x2c2>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <UART_SetConfig+0x2aa>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c56:	d006      	beq.n	8004c66 <UART_SetConfig+0x2b6>
 8004c58:	e00b      	b.n	8004c72 <UART_SetConfig+0x2c2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	77fb      	strb	r3, [r7, #31]
 8004c5e:	e04a      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c60:	2302      	movs	r3, #2
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e047      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c66:	2304      	movs	r3, #4
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e044      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e041      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c72:	2310      	movs	r3, #16
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e03e      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004c78:	efff69f3 	.word	0xefff69f3
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40004400 	.word	0x40004400
 8004c88:	40004800 	.word	0x40004800
 8004c8c:	40004c00 	.word	0x40004c00
 8004c90:	40005000 	.word	0x40005000
 8004c94:	40011400 	.word	0x40011400
 8004c98:	40007800 	.word	0x40007800
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a71      	ldr	r2, [pc, #452]	; (8004e68 <UART_SetConfig+0x4b8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d125      	bne.n	8004cf2 <UART_SetConfig+0x342>
 8004ca6:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <UART_SetConfig+0x4bc>)
 8004ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cb4:	d017      	beq.n	8004ce6 <UART_SetConfig+0x336>
 8004cb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004cba:	d817      	bhi.n	8004cec <UART_SetConfig+0x33c>
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d00b      	beq.n	8004cda <UART_SetConfig+0x32a>
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d811      	bhi.n	8004cec <UART_SetConfig+0x33c>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <UART_SetConfig+0x324>
 8004ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cd0:	d006      	beq.n	8004ce0 <UART_SetConfig+0x330>
 8004cd2:	e00b      	b.n	8004cec <UART_SetConfig+0x33c>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e00d      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	77fb      	strb	r3, [r7, #31]
 8004cde:	e00a      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e007      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004ce6:	2308      	movs	r3, #8
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e004      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004cec:	2310      	movs	r3, #16
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e001      	b.n	8004cf6 <UART_SetConfig+0x346>
 8004cf2:	2310      	movs	r3, #16
 8004cf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cfe:	d15a      	bne.n	8004db6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	2b08      	cmp	r3, #8
 8004d04:	d827      	bhi.n	8004d56 <UART_SetConfig+0x3a6>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x35c>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	08004d57 	.word	0x08004d57
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d57 	.word	0x08004d57
 8004d28:	08004d57 	.word	0x08004d57
 8004d2c:	08004d4f 	.word	0x08004d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fd fe92 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8004d34:	61b8      	str	r0, [r7, #24]
        break;
 8004d36:	e013      	b.n	8004d60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d38:	f7fd fea2 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8004d3c:	61b8      	str	r0, [r7, #24]
        break;
 8004d3e:	e00f      	b.n	8004d60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d40:	4b4b      	ldr	r3, [pc, #300]	; (8004e70 <UART_SetConfig+0x4c0>)
 8004d42:	61bb      	str	r3, [r7, #24]
        break;
 8004d44:	e00c      	b.n	8004d60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d46:	f7fd fd99 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8004d4a:	61b8      	str	r0, [r7, #24]
        break;
 8004d4c:	e008      	b.n	8004d60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d52:	61bb      	str	r3, [r7, #24]
        break;
 8004d54:	e004      	b.n	8004d60 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d074      	beq.n	8004e50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	005a      	lsls	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	441a      	add	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d916      	bls.n	8004db0 <UART_SetConfig+0x400>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d88:	d212      	bcs.n	8004db0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f023 030f 	bic.w	r3, r3, #15
 8004d92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	085b      	lsrs	r3, r3, #1
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	89fb      	ldrh	r3, [r7, #14]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	89fa      	ldrh	r2, [r7, #14]
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e04f      	b.n	8004e50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	77bb      	strb	r3, [r7, #30]
 8004db4:	e04c      	b.n	8004e50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d828      	bhi.n	8004e0e <UART_SetConfig+0x45e>
 8004dbc:	a201      	add	r2, pc, #4	; (adr r2, 8004dc4 <UART_SetConfig+0x414>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fd fe36 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8004dec:	61b8      	str	r0, [r7, #24]
        break;
 8004dee:	e013      	b.n	8004e18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fd fe46 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8004df4:	61b8      	str	r0, [r7, #24]
        break;
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <UART_SetConfig+0x4c0>)
 8004dfa:	61bb      	str	r3, [r7, #24]
        break;
 8004dfc:	e00c      	b.n	8004e18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fd fd3d 	bl	800287c <HAL_RCC_GetSysClockFreq>
 8004e02:	61b8      	str	r0, [r7, #24]
        break;
 8004e04:	e008      	b.n	8004e18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0a:	61bb      	str	r3, [r7, #24]
        break;
 8004e0c:	e004      	b.n	8004e18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77bb      	strb	r3, [r7, #30]
        break;
 8004e16:	bf00      	nop
    }

    if (pclk != 0U)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d018      	beq.n	8004e50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085a      	lsrs	r2, r3, #1
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	441a      	add	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d909      	bls.n	8004e4c <UART_SetConfig+0x49c>
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3e:	d205      	bcs.n	8004e4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60da      	str	r2, [r3, #12]
 8004e4a:	e001      	b.n	8004e50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40007c00 	.word	0x40007c00
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	00f42400 	.word	0x00f42400

08004e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01a      	beq.n	8004f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f72:	d10a      	bne.n	8004f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	605a      	str	r2, [r3, #4]
  }
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fc8:	f7fc f8b2 	bl	8001130 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d10e      	bne.n	8004ffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f817 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e00d      	b.n	8005016 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b09c      	sub	sp, #112	; 0x70
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e0a5      	b.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	f000 80a1 	beq.w	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fc f879 	bl	8001130 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
 800504a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13e      	bne.n	80050ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005064:	667b      	str	r3, [r7, #100]	; 0x64
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800506e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005070:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800507c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	663b      	str	r3, [r7, #96]	; 0x60
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e067      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04f      	beq.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ea:	d147      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005148:	623a      	str	r2, [r7, #32]
 800514a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	69f9      	ldr	r1, [r7, #28]
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	61bb      	str	r3, [r7, #24]
   return(result);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e010      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	429a      	cmp	r2, r3
 8005198:	f43f af4a 	beq.w	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3770      	adds	r7, #112	; 0x70
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80051a8:	b084      	sub	sp, #16
 80051aa:	b480      	push	{r7}
 80051ac:	b085      	sub	sp, #20
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	f107 001c 	add.w	r0, r7, #28
 80051b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80051be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80051c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80051c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80051c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80051ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80051cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80051ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80051d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <SDMMC_Init+0x54>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	b004      	add	sp, #16
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	ffff8100 	.word	0xffff8100

08005200 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800520e:	4618      	mov	r0, r3
 8005210:	370c      	adds	r7, #12
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2203      	movs	r2, #3
 8005248:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0303 	and.w	r3, r3, #3
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005292:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005298:	431a      	orrs	r2, r3
                       Command->CPSM);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800529e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <SDMMC_SendCommand+0x50>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	fffff000 	.word	0xfffff000

080052c8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	b2db      	uxtb	r3, r3
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
 80052ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3314      	adds	r3, #20
 80052f0:	461a      	mov	r2, r3
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	4413      	add	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
}  
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800532e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005334:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800533a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005346:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005352:	2300      	movs	r3, #0

}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b088      	sub	sp, #32
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800536e:	2310      	movs	r3, #16
 8005370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005376:	2300      	movs	r3, #0
 8005378:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800537a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800537e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005380:	f107 0308 	add.w	r3, r7, #8
 8005384:	4619      	mov	r1, r3
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ff74 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800538c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005390:	2110      	movs	r1, #16
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fa1a 	bl	80057cc <SDMMC_GetCmdResp1>
 8005398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800539a:	69fb      	ldr	r3, [r7, #28]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3720      	adds	r7, #32
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80053b2:	2311      	movs	r3, #17
 80053b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053b6:	2340      	movs	r3, #64	; 0x40
 80053b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80053be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80053c4:	f107 0308 	add.w	r3, r7, #8
 80053c8:	4619      	mov	r1, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff52 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80053d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d4:	2111      	movs	r1, #17
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f9f8 	bl	80057cc <SDMMC_GetCmdResp1>
 80053dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053de:	69fb      	ldr	r3, [r7, #28]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3720      	adds	r7, #32
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b088      	sub	sp, #32
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80053f6:	2312      	movs	r3, #18
 80053f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005402:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005406:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005408:	f107 0308 	add.w	r3, r7, #8
 800540c:	4619      	mov	r1, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7ff ff30 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8005414:	f241 3288 	movw	r2, #5000	; 0x1388
 8005418:	2112      	movs	r1, #18
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f9d6 	bl	80057cc <SDMMC_GetCmdResp1>
 8005420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005422:	69fb      	ldr	r3, [r7, #28]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800543a:	2318      	movs	r3, #24
 800543c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800543e:	2340      	movs	r3, #64	; 0x40
 8005440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800544a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800544c:	f107 0308 	add.w	r3, r7, #8
 8005450:	4619      	mov	r1, r3
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7ff ff0e 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8005458:	f241 3288 	movw	r2, #5000	; 0x1388
 800545c:	2118      	movs	r1, #24
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f9b4 	bl	80057cc <SDMMC_GetCmdResp1>
 8005464:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005466:	69fb      	ldr	r3, [r7, #28]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3720      	adds	r7, #32
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800547e:	2319      	movs	r3, #25
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff feec 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	2119      	movs	r1, #25
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f992 	bl	80057cc <SDMMC_GetCmdResp1>
 80054a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80054c0:	230c      	movs	r3, #12
 80054c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80054c4:	2340      	movs	r3, #64	; 0x40
 80054c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80054cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80054d2:	f107 0308 	add.w	r3, r7, #8
 80054d6:	4619      	mov	r1, r3
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f7ff fecb 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80054de:	4a05      	ldr	r2, [pc, #20]	; (80054f4 <SDMMC_CmdStopTransfer+0x40>)
 80054e0:	210c      	movs	r1, #12
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f972 	bl	80057cc <SDMMC_GetCmdResp1>
 80054e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ea:	69fb      	ldr	r3, [r7, #28]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3720      	adds	r7, #32
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	05f5e100 	.word	0x05f5e100

080054f8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005508:	2307      	movs	r3, #7
 800550a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005510:	2300      	movs	r3, #0
 8005512:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005518:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800551a:	f107 0310 	add.w	r3, r7, #16
 800551e:	4619      	mov	r1, r3
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f7ff fea7 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8005526:	f241 3288 	movw	r2, #5000	; 0x1388
 800552a:	2107      	movs	r1, #7
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f94d 	bl	80057cc <SDMMC_GetCmdResp1>
 8005532:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005536:	4618      	mov	r0, r3
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800553e:	b580      	push	{r7, lr}
 8005540:	b088      	sub	sp, #32
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800554e:	2300      	movs	r3, #0
 8005550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fe86 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb67 	bl	8005c3c <SDMMC_GetCmdError>
 800556e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005570:	69fb      	ldr	r3, [r7, #28]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3720      	adds	r7, #32
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b088      	sub	sp, #32
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005582:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005586:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005588:	2308      	movs	r3, #8
 800558a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005598:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff fe67 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fafa 	bl	8005ba0 <SDMMC_GetCmdResp7>
 80055ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ae:	69fb      	ldr	r3, [r7, #28]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3720      	adds	r7, #32
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b088      	sub	sp, #32
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80055c6:	2337      	movs	r3, #55	; 0x37
 80055c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80055ca:	2340      	movs	r3, #64	; 0x40
 80055cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80055ce:	2300      	movs	r3, #0
 80055d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80055d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80055d8:	f107 0308 	add.w	r3, r7, #8
 80055dc:	4619      	mov	r1, r3
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fe48 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80055e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055e8:	2137      	movs	r1, #55	; 0x37
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f8ee 	bl	80057cc <SDMMC_GetCmdResp1>
 80055f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055f2:	69fb      	ldr	r3, [r7, #28]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3720      	adds	r7, #32
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <SDMMC_CmdAppOperCommand+0x44>)
 800560a:	4313      	orrs	r3, r2
 800560c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800560e:	2329      	movs	r3, #41	; 0x29
 8005610:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800561a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800561e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005620:	f107 0308 	add.w	r3, r7, #8
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fe24 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 fa03 	bl	8005a38 <SDMMC_GetCmdResp3>
 8005632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005634:	69fb      	ldr	r3, [r7, #28]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	80100000 	.word	0x80100000

08005644 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b088      	sub	sp, #32
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005652:	2306      	movs	r3, #6
 8005654:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005656:	2340      	movs	r3, #64	; 0x40
 8005658:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800565e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005662:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005664:	f107 0308 	add.w	r3, r7, #8
 8005668:	4619      	mov	r1, r3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f7ff fe02 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	2106      	movs	r1, #6
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8a8 	bl	80057cc <SDMMC_GetCmdResp1>
 800567c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800567e:	69fb      	ldr	r3, [r7, #28]
}
 8005680:	4618      	mov	r0, r3
 8005682:	3720      	adds	r7, #32
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005694:	2333      	movs	r3, #51	; 0x33
 8005696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	4619      	mov	r1, r3
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff fde1 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80056b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b6:	2133      	movs	r1, #51	; 0x33
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f887 	bl	80057cc <SDMMC_GetCmdResp1>
 80056be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056c0:	69fb      	ldr	r3, [r7, #28]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b088      	sub	sp, #32
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80056d6:	2302      	movs	r3, #2
 80056d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80056da:	23c0      	movs	r3, #192	; 0xc0
 80056dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80056e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80056e8:	f107 0308 	add.w	r3, r7, #8
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fdc0 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f957 	bl	80059a8 <SDMMC_GetCmdResp2>
 80056fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056fc:	69fb      	ldr	r3, [r7, #28]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3720      	adds	r7, #32
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b088      	sub	sp, #32
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005714:	2309      	movs	r3, #9
 8005716:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8005718:	23c0      	movs	r3, #192	; 0xc0
 800571a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8005720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	4619      	mov	r1, r3
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff fda1 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f938 	bl	80059a8 <SDMMC_GetCmdResp2>
 8005738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800573a:	69fb      	ldr	r3, [r7, #28]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005752:	2303      	movs	r3, #3
 8005754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800575a:	2300      	movs	r3, #0
 800575c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800575e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005762:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8005764:	f107 0308 	add.w	r3, r7, #8
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fd82 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	2103      	movs	r1, #3
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f99d 	bl	8005ab4 <SDMMC_GetCmdResp6>
 800577a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800577c:	69fb      	ldr	r3, [r7, #28]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b088      	sub	sp, #32
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005794:	230d      	movs	r3, #13
 8005796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8005798:	2340      	movs	r3, #64	; 0x40
 800579a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80057a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80057a6:	f107 0308 	add.w	r3, r7, #8
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff fd61 	bl	8005274 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	210d      	movs	r1, #13
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f807 	bl	80057cc <SDMMC_GetCmdResp1>
 80057be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057c0:	69fb      	ldr	r3, [r7, #28]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3720      	adds	r7, #32
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b088      	sub	sp, #32
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	460b      	mov	r3, r1
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80057da:	4b70      	ldr	r3, [pc, #448]	; (800599c <SDMMC_GetCmdResp1+0x1d0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a70      	ldr	r2, [pc, #448]	; (80059a0 <SDMMC_GetCmdResp1+0x1d4>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	0a5a      	lsrs	r2, r3, #9
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	61fa      	str	r2, [r7, #28]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057fc:	e0c9      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <SDMMC_GetCmdResp1+0x22>
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1ea      	bne.n	80057ee <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2204      	movs	r2, #4
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800582a:	2304      	movs	r3, #4
 800582c:	e0b1      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005840:	2301      	movs	r3, #1
 8005842:	e0a6      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	22c5      	movs	r2, #197	; 0xc5
 8005848:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff fd3c 	bl	80052c8 <SDMMC_GetCommandResponse>
 8005850:	4603      	mov	r3, r0
 8005852:	461a      	mov	r2, r3
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	4293      	cmp	r3, r2
 8005858:	d001      	beq.n	800585e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800585a:	2301      	movs	r3, #1
 800585c:	e099      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800585e:	2100      	movs	r1, #0
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fd3e 	bl	80052e2 <SDMMC_GetResponse>
 8005866:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4b4e      	ldr	r3, [pc, #312]	; (80059a4 <SDMMC_GetCmdResp1+0x1d8>)
 800586c:	4013      	ands	r3, r2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005872:	2300      	movs	r3, #0
 8005874:	e08d      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	2b00      	cmp	r3, #0
 800587a:	da02      	bge.n	8005882 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800587c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005880:	e087      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800588c:	2340      	movs	r3, #64	; 0x40
 800588e:	e080      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d001      	beq.n	800589e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	e079      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d002      	beq.n	80058ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80058a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058ac:	e071      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d002      	beq.n	80058be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80058b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058bc:	e069      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80058c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058cc:	e061      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80058d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058dc:	e059      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058ec:	e051      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d002      	beq.n	80058fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058fc:	e049      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d002      	beq.n	800590e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005908:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800590c:	e041      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591c:	e039      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005928:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800592c:	e031      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005938:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800593c:	e029      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005948:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800594c:	e021      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005958:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800595c:	e019      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d002      	beq.n	800596e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800596c:	e011      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800597c:	e009      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d002      	beq.n	800598e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005988:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800598c:	e001      	b.n	8005992 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800598e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000000 	.word	0x20000000
 80059a0:	10624dd3 	.word	0x10624dd3
 80059a4:	fdffe008 	.word	0xfdffe008

080059a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059b0:	4b1f      	ldr	r3, [pc, #124]	; (8005a30 <SDMMC_GetCmdResp2+0x88>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a1f      	ldr	r2, [pc, #124]	; (8005a34 <SDMMC_GetCmdResp2+0x8c>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0a5b      	lsrs	r3, r3, #9
 80059bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c0:	fb02 f303 	mul.w	r3, r2, r3
 80059c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	1e5a      	subs	r2, r3, #1
 80059ca:	60fa      	str	r2, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059d4:	e026      	b.n	8005a24 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ef      	beq.n	80059c6 <SDMMC_GetCmdResp2+0x1e>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ea      	bne.n	80059c6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2204      	movs	r2, #4
 8005a00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a02:	2304      	movs	r3, #4
 8005a04:	e00e      	b.n	8005a24 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d004      	beq.n	8005a1c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e003      	b.n	8005a24 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	22c5      	movs	r2, #197	; 0xc5
 8005a20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3714      	adds	r7, #20
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	20000000 	.word	0x20000000
 8005a34:	10624dd3 	.word	0x10624dd3

08005a38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a40:	4b1a      	ldr	r3, [pc, #104]	; (8005aac <SDMMC_GetCmdResp3+0x74>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <SDMMC_GetCmdResp3+0x78>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	0a5b      	lsrs	r3, r3, #9
 8005a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a50:	fb02 f303 	mul.w	r3, r2, r3
 8005a54:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	1e5a      	subs	r2, r3, #1
 8005a5a:	60fa      	str	r2, [r7, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d102      	bne.n	8005a66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005a60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a64:	e01b      	b.n	8005a9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d0ef      	beq.n	8005a56 <SDMMC_GetCmdResp3+0x1e>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1ea      	bne.n	8005a56 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005a92:	2304      	movs	r3, #4
 8005a94:	e003      	b.n	8005a9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	22c5      	movs	r2, #197	; 0xc5
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	20000000 	.word	0x20000000
 8005ab0:	10624dd3 	.word	0x10624dd3

08005ab4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	460b      	mov	r3, r1
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ac2:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <SDMMC_GetCmdResp6+0xe4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a35      	ldr	r2, [pc, #212]	; (8005b9c <SDMMC_GetCmdResp6+0xe8>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	0a5b      	lsrs	r3, r3, #9
 8005ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad2:	fb02 f303 	mul.w	r3, r2, r3
 8005ad6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	1e5a      	subs	r2, r3, #1
 8005adc:	61fa      	str	r2, [r7, #28]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d102      	bne.n	8005ae8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005ae2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ae6:	e052      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aec:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d0ef      	beq.n	8005ad8 <SDMMC_GetCmdResp6+0x24>
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1ea      	bne.n	8005ad8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2204      	movs	r2, #4
 8005b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b14:	2304      	movs	r3, #4
 8005b16:	e03a      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e02f      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff fbca 	bl	80052c8 <SDMMC_GetCommandResponse>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	7afb      	ldrb	r3, [r7, #11]
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d001      	beq.n	8005b42 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e025      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	22c5      	movs	r2, #197	; 0xc5
 8005b46:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8005b48:	2100      	movs	r1, #0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fbc9 	bl	80052e2 <SDMMC_GetResponse>
 8005b50:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	0c1b      	lsrs	r3, r3, #16
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e011      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005b74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b78:	e009      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b88:	e001      	b.n	8005b8e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005b8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000000 	.word	0x20000000
 8005b9c:	10624dd3 	.word	0x10624dd3

08005ba0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <SDMMC_GetCmdResp7+0x94>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <SDMMC_GetCmdResp7+0x98>)
 8005bae:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb2:	0a5b      	lsrs	r3, r3, #9
 8005bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb8:	fb02 f303 	mul.w	r3, r2, r3
 8005bbc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1e5a      	subs	r2, r3, #1
 8005bc2:	60fa      	str	r2, [r7, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bcc:	e02c      	b.n	8005c28 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0ef      	beq.n	8005bbe <SDMMC_GetCmdResp7+0x1e>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1ea      	bne.n	8005bbe <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	e014      	b.n	8005c28 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e009      	b.n	8005c28 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c26:	2300      	movs	r3, #0
  
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	20000000 	.word	0x20000000
 8005c38:	10624dd3 	.word	0x10624dd3

08005c3c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c44:	4b11      	ldr	r3, [pc, #68]	; (8005c8c <SDMMC_GetCmdError+0x50>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a11      	ldr	r2, [pc, #68]	; (8005c90 <SDMMC_GetCmdError+0x54>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0a5b      	lsrs	r3, r3, #9
 8005c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c54:	fb02 f303 	mul.w	r3, r2, r3
 8005c58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	1e5a      	subs	r2, r3, #1
 8005c5e:	60fa      	str	r2, [r7, #12]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c68:	e009      	b.n	8005c7e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f1      	beq.n	8005c5a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	22c5      	movs	r2, #197	; 0xc5
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20000000 	.word	0x20000000
 8005c90:	10624dd3 	.word	0x10624dd3

08005c94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c94:	b084      	sub	sp, #16
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
 8005c9e:	f107 001c 	add.w	r0, r7, #28
 8005ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d120      	bne.n	8005cee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <USB_CoreInit+0xac>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d105      	bne.n	8005ce2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa92 	bl	800620c <USB_CoreReset>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
 8005cec:	e010      	b.n	8005d10 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa86 	bl	800620c <USB_CoreReset>
 8005d00:	4603      	mov	r3, r0
 8005d02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10b      	bne.n	8005d2e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f043 0206 	orr.w	r2, r3, #6
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f043 0220 	orr.w	r2, r3, #32
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d3a:	b004      	add	sp, #16
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	ffbdffbf 	.word	0xffbdffbf

08005d44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 0201 	bic.w	r2, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d82:	78fb      	ldrb	r3, [r7, #3]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d115      	bne.n	8005db4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d94:	2001      	movs	r0, #1
 8005d96:	f7fb f9d7 	bl	8001148 <HAL_Delay>
      ms++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa25 	bl	80061f0 <USB_GetMode>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d01e      	beq.n	8005dea <USB_SetCurrentMode+0x84>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b31      	cmp	r3, #49	; 0x31
 8005db0:	d9f0      	bls.n	8005d94 <USB_SetCurrentMode+0x2e>
 8005db2:	e01a      	b.n	8005dea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d115      	bne.n	8005de6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dc6:	2001      	movs	r0, #1
 8005dc8:	f7fb f9be 	bl	8001148 <HAL_Delay>
      ms++;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa0c 	bl	80061f0 <USB_GetMode>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <USB_SetCurrentMode+0x84>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b31      	cmp	r3, #49	; 0x31
 8005de2:	d9f0      	bls.n	8005dc6 <USB_SetCurrentMode+0x60>
 8005de4:	e001      	b.n	8005dea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e005      	b.n	8005df6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b32      	cmp	r3, #50	; 0x32
 8005dee:	d101      	bne.n	8005df4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
	...

08005e00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e00:	b084      	sub	sp, #16
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e12:	2300      	movs	r3, #0
 8005e14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	e009      	b.n	8005e34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3340      	adds	r3, #64	; 0x40
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	2b0e      	cmp	r3, #14
 8005e38:	d9f2      	bls.n	8005e20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d11c      	bne.n	8005e7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e4e:	f043 0302 	orr.w	r3, r3, #2
 8005e52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e005      	b.n	8005e86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f961 	bl	800617c <USB_SetDevSpeed>
 8005eba:	e008      	b.n	8005ece <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f95c 	bl	800617c <USB_SetDevSpeed>
 8005ec4:	e003      	b.n	8005ece <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f957 	bl	800617c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ece:	2110      	movs	r1, #16
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8f3 	bl	80060bc <USB_FlushTxFifo>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f91d 	bl	8006120 <USB_FlushRxFifo>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e043      	b.n	8005fa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f30:	d118      	bne.n	8005f64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e013      	b.n	8005f76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e008      	b.n	8005f76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	461a      	mov	r2, r3
 8005f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3b7      	bcc.n	8005f1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e043      	b.n	8006038 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc6:	d118      	bne.n	8005ffa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e013      	b.n	800600c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e008      	b.n	800600c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	461a      	mov	r2, r3
 800602c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3b7      	bcc.n	8005fb0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 0210 	orr.w	r2, r3, #16
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <USB_DevInit+0x2b4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d105      	bne.n	80060a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <USB_DevInit+0x2b8>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b0:	b004      	add	sp, #16
 80060b2:	4770      	bx	lr
 80060b4:	803c3800 	.word	0x803c3800
 80060b8:	40000004 	.word	0x40000004

080060bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	4a12      	ldr	r2, [pc, #72]	; (800611c <USB_FlushTxFifo+0x60>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d901      	bls.n	80060da <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e01a      	b.n	8006110 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	daf3      	bge.n	80060ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	019b      	lsls	r3, r3, #6
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	3301      	adds	r3, #1
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	4a08      	ldr	r2, [pc, #32]	; (800611c <USB_FlushTxFifo+0x60>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d901      	bls.n	8006102 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	e006      	b.n	8006110 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d0f1      	beq.n	80060f2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	00030d40 	.word	0x00030d40

08006120 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	4a11      	ldr	r2, [pc, #68]	; (8006178 <USB_FlushRxFifo+0x58>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d901      	bls.n	800613c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e017      	b.n	800616c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	691b      	ldr	r3, [r3, #16]
 8006140:	2b00      	cmp	r3, #0
 8006142:	daf3      	bge.n	800612c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2210      	movs	r2, #16
 800614c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	4a08      	ldr	r2, [pc, #32]	; (8006178 <USB_FlushRxFifo+0x58>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e006      	b.n	800616c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b10      	cmp	r3, #16
 8006168:	d0f1      	beq.n	800614e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	00030d40 	.word	0x00030d40

0800617c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	68f9      	ldr	r1, [r7, #12]
 8006198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800619c:	4313      	orrs	r3, r2
 800619e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b085      	sub	sp, #20
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80061c8:	f023 0303 	bic.w	r3, r3, #3
 80061cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061dc:	f043 0302 	orr.w	r3, r3, #2
 80061e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0301 	and.w	r3, r3, #1
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	3301      	adds	r3, #1
 800621c:	60fb      	str	r3, [r7, #12]
 800621e:	4a13      	ldr	r2, [pc, #76]	; (800626c <USB_CoreReset+0x60>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d901      	bls.n	8006228 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006224:	2303      	movs	r3, #3
 8006226:	e01a      	b.n	800625e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	daf3      	bge.n	8006218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	f043 0201 	orr.w	r2, r3, #1
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	3301      	adds	r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	4a09      	ldr	r2, [pc, #36]	; (800626c <USB_CoreReset+0x60>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d901      	bls.n	8006250 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e006      	b.n	800625e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b01      	cmp	r3, #1
 800625a:	d0f1      	beq.n	8006240 <USB_CoreReset+0x34>

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	00030d40 	.word	0x00030d40

08006270 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006274:	4904      	ldr	r1, [pc, #16]	; (8006288 <MX_FATFS_Init+0x18>)
 8006276:	4805      	ldr	r0, [pc, #20]	; (800628c <MX_FATFS_Init+0x1c>)
 8006278:	f003 f9a2 	bl	80095c0 <FATFS_LinkDriver>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <MX_FATFS_Init+0x20>)
 8006282:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006284:	bf00      	nop
 8006286:	bd80      	pop	{r7, pc}
 8006288:	200006a8 	.word	0x200006a8
 800628c:	08009fb8 	.word	0x08009fb8
 8006290:	200006a4 	.word	0x200006a4

08006294 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006298:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800629a:	4618      	mov	r0, r3
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80062aa:	2300      	movs	r3, #0
 80062ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80062ae:	f000 f896 	bl	80063de <BSP_SD_IsDetected>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d001      	beq.n	80062bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e012      	b.n	80062e2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <BSP_SD_Init+0x48>)
 80062be:	f7fc ffff 	bl	80032c0 <HAL_SD_Init>
 80062c2:	4603      	mov	r3, r0
 80062c4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d109      	bne.n	80062e0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80062cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062d0:	4806      	ldr	r0, [pc, #24]	; (80062ec <BSP_SD_Init+0x48>)
 80062d2:	f7fd fdc5 	bl	8003e60 <HAL_SD_ConfigWideBusOperation>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80062e0:	79fb      	ldrb	r3, [r7, #7]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200000d4 	.word	0x200000d4

080062f0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	4806      	ldr	r0, [pc, #24]	; (8006320 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006308:	f7fd f892 	bl	8003430 <HAL_SD_ReadBlocks_DMA>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
}
 8006318:	4618      	mov	r0, r3
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	200000d4 	.word	0x200000d4

08006324 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b086      	sub	sp, #24
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006330:	2300      	movs	r3, #0
 8006332:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	4806      	ldr	r0, [pc, #24]	; (8006354 <BSP_SD_WriteBlocks_DMA+0x30>)
 800633c:	f7fd f95a 	bl	80035f4 <HAL_SD_WriteBlocks_DMA>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d001      	beq.n	800634a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200000d4 	.word	0x200000d4

08006358 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800635c:	4805      	ldr	r0, [pc, #20]	; (8006374 <BSP_SD_GetCardState+0x1c>)
 800635e:	f7fd fe19 	bl	8003f94 <HAL_SD_GetCardState>
 8006362:	4603      	mov	r3, r0
 8006364:	2b04      	cmp	r3, #4
 8006366:	bf14      	ite	ne
 8006368:	2301      	movne	r3, #1
 800636a:	2300      	moveq	r3, #0
 800636c:	b2db      	uxtb	r3, r3
}
 800636e:	4618      	mov	r0, r3
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200000d4 	.word	0x200000d4

08006378 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4803      	ldr	r0, [pc, #12]	; (8006390 <BSP_SD_GetCardInfo+0x18>)
 8006384:	f7fd fd40 	bl	8003e08 <HAL_SD_GetCardInfo>
}
 8006388:	bf00      	nop
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200000d4 	.word	0x200000d4

08006394 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800639c:	f000 f818 	bl	80063d0 <BSP_SD_AbortCallback>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80063b0:	f000 f98c 	bl	80066cc <BSP_SD_WriteCpltCallback>
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80063c4:	f000 f98e 	bl	80066e4 <BSP_SD_ReadCpltCallback>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0

}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80063e4:	2301      	movs	r3, #1
 80063e6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	b2db      	uxtb	r3, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006400:	f7fa fe96 	bl	8001130 <HAL_GetTick>
 8006404:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006406:	e006      	b.n	8006416 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006408:	f7ff ffa6 	bl	8006358 <BSP_SD_GetCardState>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d101      	bne.n	8006416 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006412:	2300      	movs	r3, #0
 8006414:	e009      	b.n	800642a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006416:	f7fa fe8b 	bl	8001130 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	429a      	cmp	r2, r3
 8006424:	d8f0      	bhi.n	8006408 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800643e:	4b0b      	ldr	r3, [pc, #44]	; (800646c <SD_CheckStatus+0x38>)
 8006440:	2201      	movs	r2, #1
 8006442:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006444:	f7ff ff88 	bl	8006358 <BSP_SD_GetCardState>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d107      	bne.n	800645e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <SD_CheckStatus+0x38>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	b2db      	uxtb	r3, r3
 8006454:	f023 0301 	bic.w	r3, r3, #1
 8006458:	b2da      	uxtb	r2, r3
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <SD_CheckStatus+0x38>)
 800645c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800645e:	4b03      	ldr	r3, [pc, #12]	; (800646c <SD_CheckStatus+0x38>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b2db      	uxtb	r3, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20000009 	.word	0x20000009

08006470 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800647a:	f7ff ff13 	bl	80062a4 <BSP_SD_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d107      	bne.n	8006494 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	4618      	mov	r0, r3
 8006488:	f7ff ffd4 	bl	8006434 <SD_CheckStatus>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <SD_initialize+0x34>)
 8006492:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006494:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <SD_initialize+0x34>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	b2db      	uxtb	r3, r3
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	20000009 	.word	0x20000009

080064a8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ffbd 	bl	8006434 <SD_CheckStatus>
 80064ba:	4603      	mov	r3, r0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
 80064ce:	603b      	str	r3, [r7, #0]
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80064d8:	f247 5030 	movw	r0, #30000	; 0x7530
 80064dc:	f7ff ff8c 	bl	80063f8 <SD_CheckStatusWithTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	da01      	bge.n	80064ea <SD_read+0x26>
  {
    return res;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	e03b      	b.n	8006562 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	6879      	ldr	r1, [r7, #4]
 80064ee:	68b8      	ldr	r0, [r7, #8]
 80064f0:	f7ff fefe 	bl	80062f0 <BSP_SD_ReadBlocks_DMA>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d132      	bne.n	8006560 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80064fa:	4b1c      	ldr	r3, [pc, #112]	; (800656c <SD_read+0xa8>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006500:	f7fa fe16 	bl	8001130 <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006506:	bf00      	nop
 8006508:	4b18      	ldr	r3, [pc, #96]	; (800656c <SD_read+0xa8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <SD_read+0x5e>
 8006510:	f7fa fe0e 	bl	8001130 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	f247 522f 	movw	r2, #29999	; 0x752f
 800651e:	4293      	cmp	r3, r2
 8006520:	d9f2      	bls.n	8006508 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <SD_read+0xa8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	75fb      	strb	r3, [r7, #23]
 800652e:	e017      	b.n	8006560 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <SD_read+0xa8>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006536:	f7fa fdfb 	bl	8001130 <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800653c:	e007      	b.n	800654e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800653e:	f7ff ff0b 	bl	8006358 <BSP_SD_GetCardState>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d102      	bne.n	800654e <SD_read+0x8a>
          {
            res = RES_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800654c:	e008      	b.n	8006560 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800654e:	f7fa fdef 	bl	8001130 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	f247 522f 	movw	r2, #29999	; 0x752f
 800655c:	4293      	cmp	r3, r2
 800655e:	d9ee      	bls.n	800653e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006560:	7dfb      	ldrb	r3, [r7, #23]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000094 	.word	0x20000094

08006570 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	60b9      	str	r1, [r7, #8]
 8006578:	607a      	str	r2, [r7, #4]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4603      	mov	r3, r0
 800657e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006584:	4b24      	ldr	r3, [pc, #144]	; (8006618 <SD_write+0xa8>)
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800658a:	f247 5030 	movw	r0, #30000	; 0x7530
 800658e:	f7ff ff33 	bl	80063f8 <SD_CheckStatusWithTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	da01      	bge.n	800659c <SD_write+0x2c>
  {
    return res;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
 800659a:	e038      	b.n	800660e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	68b8      	ldr	r0, [r7, #8]
 80065a2:	f7ff febf 	bl	8006324 <BSP_SD_WriteBlocks_DMA>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d12f      	bne.n	800660c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80065ac:	f7fa fdc0 	bl	8001130 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80065b2:	bf00      	nop
 80065b4:	4b18      	ldr	r3, [pc, #96]	; (8006618 <SD_write+0xa8>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d108      	bne.n	80065ce <SD_write+0x5e>
 80065bc:	f7fa fdb8 	bl	8001130 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f247 522f 	movw	r2, #29999	; 0x752f
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d9f2      	bls.n	80065b4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80065ce:	4b12      	ldr	r3, [pc, #72]	; (8006618 <SD_write+0xa8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d102      	bne.n	80065dc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	75fb      	strb	r3, [r7, #23]
 80065da:	e017      	b.n	800660c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80065dc:	4b0e      	ldr	r3, [pc, #56]	; (8006618 <SD_write+0xa8>)
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80065e2:	f7fa fda5 	bl	8001130 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065e8:	e007      	b.n	80065fa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80065ea:	f7ff feb5 	bl	8006358 <BSP_SD_GetCardState>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <SD_write+0x8a>
          {
            res = RES_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75fb      	strb	r3, [r7, #23]
            break;
 80065f8:	e008      	b.n	800660c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80065fa:	f7fa fd99 	bl	8001130 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f247 522f 	movw	r2, #29999	; 0x752f
 8006608:	4293      	cmp	r3, r2
 800660a:	d9ee      	bls.n	80065ea <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000090 	.word	0x20000090

0800661c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
 8006622:	4603      	mov	r3, r0
 8006624:	603a      	str	r2, [r7, #0]
 8006626:	71fb      	strb	r3, [r7, #7]
 8006628:	460b      	mov	r3, r1
 800662a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006632:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <SD_ioctl+0xac>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <SD_ioctl+0x28>
 8006640:	2303      	movs	r3, #3
 8006642:	e03c      	b.n	80066be <SD_ioctl+0xa2>

  switch (cmd)
 8006644:	79bb      	ldrb	r3, [r7, #6]
 8006646:	2b03      	cmp	r3, #3
 8006648:	d834      	bhi.n	80066b4 <SD_ioctl+0x98>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <SD_ioctl+0x34>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006661 	.word	0x08006661
 8006654:	08006669 	.word	0x08006669
 8006658:	08006681 	.word	0x08006681
 800665c:	0800669b 	.word	0x0800669b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006666:	e028      	b.n	80066ba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006668:	f107 030c 	add.w	r3, r7, #12
 800666c:	4618      	mov	r0, r3
 800666e:	f7ff fe83 	bl	8006378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006678:	2300      	movs	r3, #0
 800667a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800667e:	e01c      	b.n	80066ba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006680:	f107 030c 	add.w	r3, r7, #12
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff fe77 	bl	8006378 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	b29a      	uxth	r2, r3
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006698:	e00f      	b.n	80066ba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	4618      	mov	r0, r3
 80066a0:	f7ff fe6a 	bl	8006378 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	0a5a      	lsrs	r2, r3, #9
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80066b2:	e002      	b.n	80066ba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80066b4:	2304      	movs	r3, #4
 80066b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80066ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3730      	adds	r7, #48	; 0x30
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000009 	.word	0x20000009

080066cc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <BSP_SD_WriteCpltCallback+0x14>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000090 	.word	0x20000090

080066e4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <BSP_SD_ReadCpltCallback+0x14>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000094 	.word	0x20000094

080066fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	4603      	mov	r3, r0
 8006704:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	4a08      	ldr	r2, [pc, #32]	; (800672c <disk_status+0x30>)
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4413      	add	r3, r2
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	79fa      	ldrb	r2, [r7, #7]
 8006714:	4905      	ldr	r1, [pc, #20]	; (800672c <disk_status+0x30>)
 8006716:	440a      	add	r2, r1
 8006718:	7a12      	ldrb	r2, [r2, #8]
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200000c0 	.word	0x200000c0

08006730 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	4603      	mov	r3, r0
 8006738:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800673a:	2300      	movs	r3, #0
 800673c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	4a0d      	ldr	r2, [pc, #52]	; (8006778 <disk_initialize+0x48>)
 8006742:	5cd3      	ldrb	r3, [r2, r3]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d111      	bne.n	800676c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <disk_initialize+0x48>)
 800674c:	2101      	movs	r1, #1
 800674e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006750:	79fb      	ldrb	r3, [r7, #7]
 8006752:	4a09      	ldr	r2, [pc, #36]	; (8006778 <disk_initialize+0x48>)
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	79fa      	ldrb	r2, [r7, #7]
 800675e:	4906      	ldr	r1, [pc, #24]	; (8006778 <disk_initialize+0x48>)
 8006760:	440a      	add	r2, r1
 8006762:	7a12      	ldrb	r2, [r2, #8]
 8006764:	4610      	mov	r0, r2
 8006766:	4798      	blx	r3
 8006768:	4603      	mov	r3, r0
 800676a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800676c:	7bfb      	ldrb	r3, [r7, #15]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200000c0 	.word	0x200000c0

0800677c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800677c:	b590      	push	{r4, r7, lr}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60b9      	str	r1, [r7, #8]
 8006784:	607a      	str	r2, [r7, #4]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800678c:	7bfb      	ldrb	r3, [r7, #15]
 800678e:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <disk_read+0x3c>)
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	689c      	ldr	r4, [r3, #8]
 8006798:	7bfb      	ldrb	r3, [r7, #15]
 800679a:	4a07      	ldr	r2, [pc, #28]	; (80067b8 <disk_read+0x3c>)
 800679c:	4413      	add	r3, r2
 800679e:	7a18      	ldrb	r0, [r3, #8]
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	47a0      	blx	r4
 80067a8:	4603      	mov	r3, r0
 80067aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd90      	pop	{r4, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	200000c0 	.word	0x200000c0

080067bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
 80067c8:	4603      	mov	r3, r0
 80067ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	4a0a      	ldr	r2, [pc, #40]	; (80067f8 <disk_write+0x3c>)
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	68dc      	ldr	r4, [r3, #12]
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
 80067da:	4a07      	ldr	r2, [pc, #28]	; (80067f8 <disk_write+0x3c>)
 80067dc:	4413      	add	r3, r2
 80067de:	7a18      	ldrb	r0, [r3, #8]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	47a0      	blx	r4
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd90      	pop	{r4, r7, pc}
 80067f6:	bf00      	nop
 80067f8:	200000c0 	.word	0x200000c0

080067fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	603a      	str	r2, [r7, #0]
 8006806:	71fb      	strb	r3, [r7, #7]
 8006808:	460b      	mov	r3, r1
 800680a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <disk_ioctl+0x38>)
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	4413      	add	r3, r2
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	79fa      	ldrb	r2, [r7, #7]
 800681a:	4906      	ldr	r1, [pc, #24]	; (8006834 <disk_ioctl+0x38>)
 800681c:	440a      	add	r2, r1
 800681e:	7a10      	ldrb	r0, [r2, #8]
 8006820:	79b9      	ldrb	r1, [r7, #6]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4798      	blx	r3
 8006826:	4603      	mov	r3, r0
 8006828:	73fb      	strb	r3, [r7, #15]
  return res;
 800682a:	7bfb      	ldrb	r3, [r7, #15]
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200000c0 	.word	0x200000c0

08006838 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3301      	adds	r3, #1
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	b21a      	sxth	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	b21b      	sxth	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b21b      	sxth	r3, r3
 8006858:	81fb      	strh	r3, [r7, #14]
	return rv;
 800685a:	89fb      	ldrh	r3, [r7, #14]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3303      	adds	r3, #3
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	3202      	adds	r2, #2
 8006880:	7812      	ldrb	r2, [r2, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	3201      	adds	r2, #1
 800688e:	7812      	ldrb	r2, [r2, #0]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]
	return rv;
 80068a0:	68fb      	ldr	r3, [r7, #12]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	607a      	str	r2, [r7, #4]
 80068c0:	887a      	ldrh	r2, [r7, #2]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	887b      	ldrh	r3, [r7, #2]
 80068c8:	0a1b      	lsrs	r3, r3, #8
 80068ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	1c5a      	adds	r2, r3, #1
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	887a      	ldrh	r2, [r7, #2]
 80068d4:	b2d2      	uxtb	r2, r2
 80068d6:	701a      	strb	r2, [r3, #0]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	0a1b      	lsrs	r3, r3, #8
 80068fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	0a1b      	lsrs	r3, r3, #8
 8006910:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	b2d2      	uxtb	r2, r2
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	607a      	str	r2, [r7, #4]
 800692a:	683a      	ldr	r2, [r7, #0]
 800692c:	b2d2      	uxtb	r2, r2
 800692e:	701a      	strb	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00d      	beq.n	8006972 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	1c53      	adds	r3, r2, #1
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	1c59      	adds	r1, r3, #1
 8006960:	6179      	str	r1, [r7, #20]
 8006962:	7812      	ldrb	r2, [r2, #0]
 8006964:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	3b01      	subs	r3, #1
 800696a:	607b      	str	r3, [r7, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1f1      	bne.n	8006956 <mem_cpy+0x1a>
	}
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	617a      	str	r2, [r7, #20]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3b01      	subs	r3, #1
 800699e:	607b      	str	r3, [r7, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f3      	bne.n	800698e <mem_set+0x10>
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	61fa      	str	r2, [r7, #28]
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	4619      	mov	r1, r3
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	61ba      	str	r2, [r7, #24]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	1acb      	subs	r3, r1, r3
 80069e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <mem_cmp+0x40>
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0eb      	beq.n	80069cc <mem_cmp+0x18>

	return r;
 80069f4:	697b      	ldr	r3, [r7, #20]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3724      	adds	r7, #36	; 0x24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006a0c:	e002      	b.n	8006a14 <chk_chr+0x12>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3301      	adds	r3, #1
 8006a12:	607b      	str	r3, [r7, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d005      	beq.n	8006a28 <chk_chr+0x26>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d1f2      	bne.n	8006a0e <chk_chr+0xc>
	return *str;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a42:	2300      	movs	r3, #0
 8006a44:	60bb      	str	r3, [r7, #8]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	60fb      	str	r3, [r7, #12]
 8006a4a:	e029      	b.n	8006aa0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006a4c:	4a27      	ldr	r2, [pc, #156]	; (8006aec <chk_lock+0xb4>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	011b      	lsls	r3, r3, #4
 8006a52:	4413      	add	r3, r2
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01d      	beq.n	8006a96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a5a:	4a24      	ldr	r2, [pc, #144]	; (8006aec <chk_lock+0xb4>)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	011b      	lsls	r3, r3, #4
 8006a60:	4413      	add	r3, r2
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d116      	bne.n	8006a9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006a6c:	4a1f      	ldr	r2, [pc, #124]	; (8006aec <chk_lock+0xb4>)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	4413      	add	r3, r2
 8006a74:	3304      	adds	r3, #4
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d10c      	bne.n	8006a9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a80:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <chk_lock+0xb4>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	4413      	add	r3, r2
 8006a88:	3308      	adds	r3, #8
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d102      	bne.n	8006a9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a94:	e007      	b.n	8006aa6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006a96:	2301      	movs	r3, #1
 8006a98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d9d2      	bls.n	8006a4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d109      	bne.n	8006ac0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d102      	bne.n	8006ab8 <chk_lock+0x80>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d101      	bne.n	8006abc <chk_lock+0x84>
 8006ab8:	2300      	movs	r3, #0
 8006aba:	e010      	b.n	8006ade <chk_lock+0xa6>
 8006abc:	2312      	movs	r3, #18
 8006abe:	e00e      	b.n	8006ade <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d108      	bne.n	8006ad8 <chk_lock+0xa0>
 8006ac6:	4a09      	ldr	r2, [pc, #36]	; (8006aec <chk_lock+0xb4>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4413      	add	r3, r2
 8006ace:	330c      	adds	r3, #12
 8006ad0:	881b      	ldrh	r3, [r3, #0]
 8006ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ad6:	d101      	bne.n	8006adc <chk_lock+0xa4>
 8006ad8:	2310      	movs	r3, #16
 8006ada:	e000      	b.n	8006ade <chk_lock+0xa6>
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	200000a0 	.word	0x200000a0

08006af0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006af6:	2300      	movs	r3, #0
 8006af8:	607b      	str	r3, [r7, #4]
 8006afa:	e002      	b.n	8006b02 <enq_lock+0x12>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	3301      	adds	r3, #1
 8006b00:	607b      	str	r3, [r7, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d806      	bhi.n	8006b16 <enq_lock+0x26>
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <enq_lock+0x40>)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	4413      	add	r3, r2
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f2      	bne.n	8006afc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200000a0 	.word	0x200000a0

08006b34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e01f      	b.n	8006b84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006b44:	4a41      	ldr	r2, [pc, #260]	; (8006c4c <inc_lock+0x118>)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	4413      	add	r3, r2
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d113      	bne.n	8006b7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006b56:	4a3d      	ldr	r2, [pc, #244]	; (8006c4c <inc_lock+0x118>)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d109      	bne.n	8006b7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006b6a:	4a38      	ldr	r2, [pc, #224]	; (8006c4c <inc_lock+0x118>)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	011b      	lsls	r3, r3, #4
 8006b70:	4413      	add	r3, r2
 8006b72:	3308      	adds	r3, #8
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d006      	beq.n	8006b8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d9dc      	bls.n	8006b44 <inc_lock+0x10>
 8006b8a:	e000      	b.n	8006b8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006b8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d132      	bne.n	8006bfa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e002      	b.n	8006ba0 <inc_lock+0x6c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d806      	bhi.n	8006bb4 <inc_lock+0x80>
 8006ba6:	4a29      	ldr	r2, [pc, #164]	; (8006c4c <inc_lock+0x118>)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	4413      	add	r3, r2
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1f2      	bne.n	8006b9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d101      	bne.n	8006bbe <inc_lock+0x8a>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e040      	b.n	8006c40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	4922      	ldr	r1, [pc, #136]	; (8006c4c <inc_lock+0x118>)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	440b      	add	r3, r1
 8006bca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	491e      	ldr	r1, [pc, #120]	; (8006c4c <inc_lock+0x118>)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	440b      	add	r3, r1
 8006bd8:	3304      	adds	r3, #4
 8006bda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695a      	ldr	r2, [r3, #20]
 8006be0:	491a      	ldr	r1, [pc, #104]	; (8006c4c <inc_lock+0x118>)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	440b      	add	r3, r1
 8006be8:	3308      	adds	r3, #8
 8006bea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006bec:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <inc_lock+0x118>)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	011b      	lsls	r3, r3, #4
 8006bf2:	4413      	add	r3, r2
 8006bf4:	330c      	adds	r3, #12
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d009      	beq.n	8006c14 <inc_lock+0xe0>
 8006c00:	4a12      	ldr	r2, [pc, #72]	; (8006c4c <inc_lock+0x118>)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	011b      	lsls	r3, r3, #4
 8006c06:	4413      	add	r3, r2
 8006c08:	330c      	adds	r3, #12
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <inc_lock+0xe0>
 8006c10:	2300      	movs	r3, #0
 8006c12:	e015      	b.n	8006c40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d108      	bne.n	8006c2c <inc_lock+0xf8>
 8006c1a:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <inc_lock+0x118>)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	4413      	add	r3, r2
 8006c22:	330c      	adds	r3, #12
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	e001      	b.n	8006c30 <inc_lock+0xfc>
 8006c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c30:	4906      	ldr	r1, [pc, #24]	; (8006c4c <inc_lock+0x118>)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	011b      	lsls	r3, r3, #4
 8006c36:	440b      	add	r3, r1
 8006c38:	330c      	adds	r3, #12
 8006c3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	3301      	adds	r3, #1
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	200000a0 	.word	0x200000a0

08006c50 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c58:	2300      	movs	r3, #0
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e010      	b.n	8006c80 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c5e:	4a0d      	ldr	r2, [pc, #52]	; (8006c94 <clear_lock+0x44>)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	011b      	lsls	r3, r3, #4
 8006c64:	4413      	add	r3, r2
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d105      	bne.n	8006c7a <clear_lock+0x2a>
 8006c6e:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <clear_lock+0x44>)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	011b      	lsls	r3, r3, #4
 8006c74:	4413      	add	r3, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	60fb      	str	r3, [r7, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d9eb      	bls.n	8006c5e <clear_lock+0xe>
	}
}
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	200000a0 	.word	0x200000a0

08006c98 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d034      	beq.n	8006d16 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7858      	ldrb	r0, [r3, #1]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	f7ff fd7c 	bl	80067bc <disk_write>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	73fb      	strb	r3, [r7, #15]
 8006cce:	e022      	b.n	8006d16 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	1ad2      	subs	r2, r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d217      	bcs.n	8006d16 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	789b      	ldrb	r3, [r3, #2]
 8006cea:	613b      	str	r3, [r7, #16]
 8006cec:	e010      	b.n	8006d10 <sync_window+0x78>
					wsect += fs->fsize;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7858      	ldrb	r0, [r3, #1]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d02:	2301      	movs	r3, #1
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	f7ff fd59 	bl	80067bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d8eb      	bhi.n	8006cee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d01b      	beq.n	8006d70 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff ffad 	bl	8006c98 <sync_window>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d113      	bne.n	8006d70 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	7858      	ldrb	r0, [r3, #1]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006d52:	2301      	movs	r3, #1
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	f7ff fd11 	bl	800677c <disk_read>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295
 8006d64:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8006d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7ff ff87 	bl	8006c98 <sync_window>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d158      	bne.n	8006e46 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d148      	bne.n	8006e2e <sync_fs+0xb2>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	791b      	ldrb	r3, [r3, #4]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d144      	bne.n	8006e2e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3330      	adds	r3, #48	; 0x30
 8006da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7ff fde5 	bl	800697e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	3330      	adds	r3, #48	; 0x30
 8006db8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006dbc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7ff fd74 	bl	80068ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	3330      	adds	r3, #48	; 0x30
 8006dca:	4921      	ldr	r1, [pc, #132]	; (8006e50 <sync_fs+0xd4>)
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fd89 	bl	80068e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3330      	adds	r3, #48	; 0x30
 8006dd6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006dda:	491e      	ldr	r1, [pc, #120]	; (8006e54 <sync_fs+0xd8>)
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f7ff fd81 	bl	80068e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3330      	adds	r3, #48	; 0x30
 8006de6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691b      	ldr	r3, [r3, #16]
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7ff fd77 	bl	80068e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3330      	adds	r3, #48	; 0x30
 8006dfa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7ff fd6d 	bl	80068e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	7858      	ldrb	r0, [r3, #1]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e22:	2301      	movs	r3, #1
 8006e24:	f7ff fcca 	bl	80067bc <disk_write>
			fs->fsi_flag = 0;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fce0 	bl	80067fc <disk_ioctl>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <sync_fs+0xca>
 8006e42:	2301      	movs	r3, #1
 8006e44:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	41615252 	.word	0x41615252
 8006e54:	61417272 	.word	0x61417272

08006e58 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	3b02      	subs	r3, #2
 8006e66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	695b      	ldr	r3, [r3, #20]
 8006e6c:	3b02      	subs	r3, #2
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d301      	bcc.n	8006e78 <clust2sect+0x20>
 8006e74:	2300      	movs	r3, #0
 8006e76:	e008      	b.n	8006e8a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	895b      	ldrh	r3, [r3, #10]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	fb03 f202 	mul.w	r2, r3, r2
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	4413      	add	r3, r2
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr

08006e96 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006e96:	b580      	push	{r7, lr}
 8006e98:	b086      	sub	sp, #24
 8006e9a:	af00      	add	r7, sp, #0
 8006e9c:	6078      	str	r0, [r7, #4]
 8006e9e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d904      	bls.n	8006eb6 <get_fat+0x20>
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <get_fat+0x26>
		val = 1;	/* Internal error */
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	e08f      	b.n	8006fdc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d062      	beq.n	8006f90 <get_fat+0xfa>
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	dc7c      	bgt.n	8006fc8 <get_fat+0x132>
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <get_fat+0x42>
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d042      	beq.n	8006f5c <get_fat+0xc6>
 8006ed6:	e077      	b.n	8006fc8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	085b      	lsrs	r3, r3, #1
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	6a1a      	ldr	r2, [r3, #32]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	0a5b      	lsrs	r3, r3, #9
 8006eee:	4413      	add	r3, r2
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6938      	ldr	r0, [r7, #16]
 8006ef4:	f7ff ff14 	bl	8006d20 <move_window>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d167      	bne.n	8006fce <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	60fa      	str	r2, [r7, #12]
 8006f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f10:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	6a1a      	ldr	r2, [r3, #32]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	0a5b      	lsrs	r3, r3, #9
 8006f1a:	4413      	add	r3, r2
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6938      	ldr	r0, [r7, #16]
 8006f20:	f7ff fefe 	bl	8006d20 <move_window>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d153      	bne.n	8006fd2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4413      	add	r3, r2
 8006f34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f38:	021b      	lsls	r3, r3, #8
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <get_fat+0xbc>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	091b      	lsrs	r3, r3, #4
 8006f50:	e002      	b.n	8006f58 <get_fat+0xc2>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f58:	617b      	str	r3, [r7, #20]
			break;
 8006f5a:	e03f      	b.n	8006fdc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	6a1a      	ldr	r2, [r3, #32]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	0a1b      	lsrs	r3, r3, #8
 8006f64:	4413      	add	r3, r2
 8006f66:	4619      	mov	r1, r3
 8006f68:	6938      	ldr	r0, [r7, #16]
 8006f6a:	f7ff fed9 	bl	8006d20 <move_window>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d130      	bne.n	8006fd6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006f82:	4413      	add	r3, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fc57 	bl	8006838 <ld_word>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	617b      	str	r3, [r7, #20]
			break;
 8006f8e:	e025      	b.n	8006fdc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	6a1a      	ldr	r2, [r3, #32]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	09db      	lsrs	r3, r3, #7
 8006f98:	4413      	add	r3, r2
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6938      	ldr	r0, [r7, #16]
 8006f9e:	f7ff febf 	bl	8006d20 <move_window>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d118      	bne.n	8006fda <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006fb6:	4413      	add	r3, r2
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fc55 	bl	8006868 <ld_dword>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fc4:	617b      	str	r3, [r7, #20]
			break;
 8006fc6:	e009      	b.n	8006fdc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006fc8:	2301      	movs	r3, #1
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e006      	b.n	8006fdc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fce:	bf00      	nop
 8006fd0:	e004      	b.n	8006fdc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006fd2:	bf00      	nop
 8006fd4:	e002      	b.n	8006fdc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006fd6:	bf00      	nop
 8006fd8:	e000      	b.n	8006fdc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006fda:	bf00      	nop
		}
	}

	return val;
 8006fdc:	697b      	ldr	r3, [r7, #20]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006fe6:	b590      	push	{r4, r7, lr}
 8006fe8:	b089      	sub	sp, #36	; 0x24
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	f240 80d2 	bls.w	80071a2 <put_fat+0x1bc>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	429a      	cmp	r2, r3
 8007006:	f080 80cc 	bcs.w	80071a2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b03      	cmp	r3, #3
 8007010:	f000 8096 	beq.w	8007140 <put_fat+0x15a>
 8007014:	2b03      	cmp	r3, #3
 8007016:	f300 80cd 	bgt.w	80071b4 <put_fat+0x1ce>
 800701a:	2b01      	cmp	r3, #1
 800701c:	d002      	beq.n	8007024 <put_fat+0x3e>
 800701e:	2b02      	cmp	r3, #2
 8007020:	d06e      	beq.n	8007100 <put_fat+0x11a>
 8007022:	e0c7      	b.n	80071b4 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	61bb      	str	r3, [r7, #24]
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	085b      	lsrs	r3, r3, #1
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4413      	add	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6a1a      	ldr	r2, [r3, #32]
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	0a5b      	lsrs	r3, r3, #9
 800703a:	4413      	add	r3, r2
 800703c:	4619      	mov	r1, r3
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f7ff fe6e 	bl	8006d20 <move_window>
 8007044:	4603      	mov	r3, r0
 8007046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007048:	7ffb      	ldrb	r3, [r7, #31]
 800704a:	2b00      	cmp	r3, #0
 800704c:	f040 80ab 	bne.w	80071a6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	1c59      	adds	r1, r3, #1
 800705a:	61b9      	str	r1, [r7, #24]
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	4413      	add	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <put_fat+0xa4>
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	b25a      	sxtb	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	011b      	lsls	r3, r3, #4
 8007080:	b25b      	sxtb	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b25b      	sxtb	r3, r3
 8007086:	b2db      	uxtb	r3, r3
 8007088:	e001      	b.n	800708e <put_fat+0xa8>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2201      	movs	r2, #1
 8007096:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	0a5b      	lsrs	r3, r3, #9
 80070a0:	4413      	add	r3, r2
 80070a2:	4619      	mov	r1, r3
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f7ff fe3b 	bl	8006d20 <move_window>
 80070aa:	4603      	mov	r3, r0
 80070ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80070ae:	7ffb      	ldrb	r3, [r7, #31]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d17a      	bne.n	80071aa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c0:	4413      	add	r3, r2
 80070c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <put_fat+0xf0>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	091b      	lsrs	r3, r3, #4
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	e00e      	b.n	80070f4 <put_fat+0x10e>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	f023 030f 	bic.w	r3, r3, #15
 80070e0:	b25a      	sxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b25b      	sxtb	r3, r3
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	b25b      	sxtb	r3, r3
 80070ee:	4313      	orrs	r3, r2
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	70da      	strb	r2, [r3, #3]
			break;
 80070fe:	e059      	b.n	80071b4 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	0a1b      	lsrs	r3, r3, #8
 8007108:	4413      	add	r3, r2
 800710a:	4619      	mov	r1, r3
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f7ff fe07 	bl	8006d20 <move_window>
 8007112:	4603      	mov	r3, r0
 8007114:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007116:	7ffb      	ldrb	r3, [r7, #31]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d148      	bne.n	80071ae <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	005b      	lsls	r3, r3, #1
 8007126:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800712a:	4413      	add	r3, r2
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	b292      	uxth	r2, r2
 8007130:	4611      	mov	r1, r2
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fbbb 	bl	80068ae <st_word>
			fs->wflag = 1;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	70da      	strb	r2, [r3, #3]
			break;
 800713e:	e039      	b.n	80071b4 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1a      	ldr	r2, [r3, #32]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	09db      	lsrs	r3, r3, #7
 8007148:	4413      	add	r3, r2
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fde7 	bl	8006d20 <move_window>
 8007152:	4603      	mov	r3, r0
 8007154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007156:	7ffb      	ldrb	r3, [r7, #31]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d12a      	bne.n	80071b2 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007170:	4413      	add	r3, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fb78 	bl	8006868 <ld_dword>
 8007178:	4603      	mov	r3, r0
 800717a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800717e:	4323      	orrs	r3, r4
 8007180:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007190:	4413      	add	r3, r2
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fba5 	bl	80068e4 <st_dword>
			fs->wflag = 1;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	70da      	strb	r2, [r3, #3]
			break;
 80071a0:	e008      	b.n	80071b4 <put_fat+0x1ce>
		}
	}
 80071a2:	bf00      	nop
 80071a4:	e006      	b.n	80071b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80071a6:	bf00      	nop
 80071a8:	e004      	b.n	80071b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80071aa:	bf00      	nop
 80071ac:	e002      	b.n	80071b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80071ae:	bf00      	nop
 80071b0:	e000      	b.n	80071b4 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80071b2:	bf00      	nop
	return res;
 80071b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3724      	adds	r7, #36	; 0x24
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}

080071be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b088      	sub	sp, #32
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	60f8      	str	r0, [r7, #12]
 80071c6:	60b9      	str	r1, [r7, #8]
 80071c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d904      	bls.n	80071e4 <remove_chain+0x26>
 80071da:	69bb      	ldr	r3, [r7, #24]
 80071dc:	695b      	ldr	r3, [r3, #20]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d301      	bcc.n	80071e8 <remove_chain+0x2a>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e04b      	b.n	8007280 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	6879      	ldr	r1, [r7, #4]
 80071f4:	69b8      	ldr	r0, [r7, #24]
 80071f6:	f7ff fef6 	bl	8006fe6 <put_fat>
 80071fa:	4603      	mov	r3, r0
 80071fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80071fe:	7ffb      	ldrb	r3, [r7, #31]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <remove_chain+0x4a>
 8007204:	7ffb      	ldrb	r3, [r7, #31]
 8007206:	e03b      	b.n	8007280 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007208:	68b9      	ldr	r1, [r7, #8]
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f7ff fe43 	bl	8006e96 <get_fat>
 8007210:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d031      	beq.n	800727c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <remove_chain+0x64>
 800721e:	2302      	movs	r3, #2
 8007220:	e02e      	b.n	8007280 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d101      	bne.n	800722e <remove_chain+0x70>
 800722a:	2301      	movs	r3, #1
 800722c:	e028      	b.n	8007280 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800722e:	2200      	movs	r2, #0
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	69b8      	ldr	r0, [r7, #24]
 8007234:	f7ff fed7 	bl	8006fe6 <put_fat>
 8007238:	4603      	mov	r3, r0
 800723a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800723c:	7ffb      	ldrb	r3, [r7, #31]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <remove_chain+0x88>
 8007242:	7ffb      	ldrb	r3, [r7, #31]
 8007244:	e01c      	b.n	8007280 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	3b02      	subs	r3, #2
 8007250:	429a      	cmp	r2, r3
 8007252:	d20b      	bcs.n	800726c <remove_chain+0xae>
			fs->free_clst++;
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	f043 0301 	orr.w	r3, r3, #1
 8007266:	b2da      	uxtb	r2, r3
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	429a      	cmp	r2, r3
 8007278:	d3c6      	bcc.n	8007208 <remove_chain+0x4a>
 800727a:	e000      	b.n	800727e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800727c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800727e:	2300      	movs	r3, #0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3720      	adds	r7, #32
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <create_chain+0x2c>
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d31b      	bcc.n	80072ec <create_chain+0x64>
 80072b4:	2301      	movs	r3, #1
 80072b6:	61bb      	str	r3, [r7, #24]
 80072b8:	e018      	b.n	80072ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff fdea 	bl	8006e96 <get_fat>
 80072c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d801      	bhi.n	80072ce <create_chain+0x46>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e070      	b.n	80073b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d4:	d101      	bne.n	80072da <create_chain+0x52>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	e06a      	b.n	80073b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d201      	bcs.n	80072e8 <create_chain+0x60>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	e063      	b.n	80073b0 <create_chain+0x128>
		scl = clst;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	3301      	adds	r3, #1
 80072f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	695b      	ldr	r3, [r3, #20]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d307      	bcc.n	8007310 <create_chain+0x88>
				ncl = 2;
 8007300:	2302      	movs	r3, #2
 8007302:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	429a      	cmp	r2, r3
 800730a:	d901      	bls.n	8007310 <create_chain+0x88>
 800730c:	2300      	movs	r3, #0
 800730e:	e04f      	b.n	80073b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007310:	69f9      	ldr	r1, [r7, #28]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7ff fdbf 	bl	8006e96 <get_fat>
 8007318:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d00e      	beq.n	800733e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d003      	beq.n	800732e <create_chain+0xa6>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d101      	bne.n	8007332 <create_chain+0xaa>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	e03e      	b.n	80073b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007332:	69fa      	ldr	r2, [r7, #28]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	429a      	cmp	r2, r3
 8007338:	d1da      	bne.n	80072f0 <create_chain+0x68>
 800733a:	2300      	movs	r3, #0
 800733c:	e038      	b.n	80073b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800733e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007340:	f04f 32ff 	mov.w	r2, #4294967295
 8007344:	69f9      	ldr	r1, [r7, #28]
 8007346:	6938      	ldr	r0, [r7, #16]
 8007348:	f7ff fe4d 	bl	8006fe6 <put_fat>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007350:	7dfb      	ldrb	r3, [r7, #23]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d109      	bne.n	800736a <create_chain+0xe2>
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d006      	beq.n	800736a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6938      	ldr	r0, [r7, #16]
 8007362:	f7ff fe40 	bl	8006fe6 <put_fat>
 8007366:	4603      	mov	r3, r0
 8007368:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d116      	bne.n	800739e <create_chain+0x116>
		fs->last_clst = ncl;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	691a      	ldr	r2, [r3, #16]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	3b02      	subs	r3, #2
 8007380:	429a      	cmp	r2, r3
 8007382:	d804      	bhi.n	800738e <create_chain+0x106>
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	1e5a      	subs	r2, r3, #1
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	791b      	ldrb	r3, [r3, #4]
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	b2da      	uxtb	r2, r3
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	711a      	strb	r2, [r3, #4]
 800739c:	e007      	b.n	80073ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d102      	bne.n	80073aa <create_chain+0x122>
 80073a4:	f04f 33ff 	mov.w	r3, #4294967295
 80073a8:	e000      	b.n	80073ac <create_chain+0x124>
 80073aa:	2301      	movs	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80073ae:	69fb      	ldr	r3, [r7, #28]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b087      	sub	sp, #28
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073cc:	3304      	adds	r3, #4
 80073ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	0a5b      	lsrs	r3, r3, #9
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	8952      	ldrh	r2, [r2, #10]
 80073d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	1d1a      	adds	r2, r3, #4
 80073e2:	613a      	str	r2, [r7, #16]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <clmt_clust+0x3a>
 80073ee:	2300      	movs	r3, #0
 80073f0:	e010      	b.n	8007414 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d307      	bcc.n	800740a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	617b      	str	r3, [r7, #20]
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3304      	adds	r3, #4
 8007406:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007408:	e7e9      	b.n	80073de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800740a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	4413      	add	r3, r2
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007436:	d204      	bcs.n	8007442 <dir_sdi+0x22>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f003 031f 	and.w	r3, r3, #31
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007442:	2302      	movs	r3, #2
 8007444:	e063      	b.n	800750e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <dir_sdi+0x46>
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b02      	cmp	r3, #2
 800745e:	d902      	bls.n	8007466 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d10c      	bne.n	8007486 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	8912      	ldrh	r2, [r2, #8]
 8007474:	4293      	cmp	r3, r2
 8007476:	d301      	bcc.n	800747c <dir_sdi+0x5c>
 8007478:	2302      	movs	r3, #2
 800747a:	e048      	b.n	800750e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	61da      	str	r2, [r3, #28]
 8007484:	e029      	b.n	80074da <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	895b      	ldrh	r3, [r3, #10]
 800748a:	025b      	lsls	r3, r3, #9
 800748c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800748e:	e019      	b.n	80074c4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6979      	ldr	r1, [r7, #20]
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff fcfe 	bl	8006e96 <get_fat>
 800749a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d101      	bne.n	80074a8 <dir_sdi+0x88>
 80074a4:	2301      	movs	r3, #1
 80074a6:	e032      	b.n	800750e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d904      	bls.n	80074b8 <dir_sdi+0x98>
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d301      	bcc.n	80074bc <dir_sdi+0x9c>
 80074b8:	2302      	movs	r3, #2
 80074ba:	e028      	b.n	800750e <dir_sdi+0xee>
			ofs -= csz;
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d2e1      	bcs.n	8007490 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80074cc:	6979      	ldr	r1, [r7, #20]
 80074ce:	6938      	ldr	r0, [r7, #16]
 80074d0:	f7ff fcc2 	bl	8006e58 <clust2sect>
 80074d4:	4602      	mov	r2, r0
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	697a      	ldr	r2, [r7, #20]
 80074de:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <dir_sdi+0xcc>
 80074e8:	2302      	movs	r3, #2
 80074ea:	e010      	b.n	800750e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	0a5b      	lsrs	r3, r3, #9
 80074f4:	441a      	add	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007506:	441a      	add	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b086      	sub	sp, #24
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	3320      	adds	r3, #32
 800752c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <dir_next+0x28>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800753c:	d301      	bcc.n	8007542 <dir_next+0x2c>
 800753e:	2304      	movs	r3, #4
 8007540:	e0aa      	b.n	8007698 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	2b00      	cmp	r3, #0
 800754a:	f040 8098 	bne.w	800767e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	69db      	ldr	r3, [r3, #28]
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10b      	bne.n	8007578 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	8912      	ldrh	r2, [r2, #8]
 8007568:	4293      	cmp	r3, r2
 800756a:	f0c0 8088 	bcc.w	800767e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	61da      	str	r2, [r3, #28]
 8007574:	2304      	movs	r3, #4
 8007576:	e08f      	b.n	8007698 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	0a5b      	lsrs	r3, r3, #9
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	8952      	ldrh	r2, [r2, #10]
 8007580:	3a01      	subs	r2, #1
 8007582:	4013      	ands	r3, r2
 8007584:	2b00      	cmp	r3, #0
 8007586:	d17a      	bne.n	800767e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	4619      	mov	r1, r3
 8007590:	4610      	mov	r0, r2
 8007592:	f7ff fc80 	bl	8006e96 <get_fat>
 8007596:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d801      	bhi.n	80075a2 <dir_next+0x8c>
 800759e:	2302      	movs	r3, #2
 80075a0:	e07a      	b.n	8007698 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d101      	bne.n	80075ae <dir_next+0x98>
 80075aa:	2301      	movs	r3, #1
 80075ac:	e074      	b.n	8007698 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d358      	bcc.n	800766a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	61da      	str	r2, [r3, #28]
 80075c4:	2304      	movs	r3, #4
 80075c6:	e067      	b.n	8007698 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7ff fe59 	bl	8007288 <create_chain>
 80075d6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d101      	bne.n	80075e2 <dir_next+0xcc>
 80075de:	2307      	movs	r3, #7
 80075e0:	e05a      	b.n	8007698 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d101      	bne.n	80075ec <dir_next+0xd6>
 80075e8:	2302      	movs	r3, #2
 80075ea:	e055      	b.n	8007698 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f2:	d101      	bne.n	80075f8 <dir_next+0xe2>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e04f      	b.n	8007698 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f7ff fb4d 	bl	8006c98 <sync_window>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d001      	beq.n	8007608 <dir_next+0xf2>
 8007604:	2301      	movs	r3, #1
 8007606:	e047      	b.n	8007698 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3330      	adds	r3, #48	; 0x30
 800760c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff f9b3 	bl	800697e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007618:	2300      	movs	r3, #0
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	6979      	ldr	r1, [r7, #20]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f7ff fc1a 	bl	8006e58 <clust2sect>
 8007624:	4602      	mov	r2, r0
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c
 800762a:	e012      	b.n	8007652 <dir_next+0x13c>
						fs->wflag = 1;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f7ff fb30 	bl	8006c98 <sync_window>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <dir_next+0x12c>
 800763e:	2301      	movs	r3, #1
 8007640:	e02a      	b.n	8007698 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	62da      	str	r2, [r3, #44]	; 0x2c
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	895b      	ldrh	r3, [r3, #10]
 8007656:	461a      	mov	r2, r3
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	4293      	cmp	r3, r2
 800765c:	d3e6      	bcc.n	800762c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad2      	subs	r2, r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	697a      	ldr	r2, [r7, #20]
 800766e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff fbf0 	bl	8006e58 <clust2sect>
 8007678:	4602      	mov	r2, r0
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007690:	441a      	add	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80076b0:	2100      	movs	r1, #0
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff feb4 	bl	8007420 <dir_sdi>
 80076b8:	4603      	mov	r3, r0
 80076ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076bc:	7dfb      	ldrb	r3, [r7, #23]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d12b      	bne.n	800771a <dir_alloc+0x7a>
		n = 0;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7ff fb27 	bl	8006d20 <move_window>
 80076d2:	4603      	mov	r3, r0
 80076d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11d      	bne.n	8007718 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2be5      	cmp	r3, #229	; 0xe5
 80076e4:	d004      	beq.n	80076f0 <dir_alloc+0x50>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d107      	bne.n	8007700 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3301      	adds	r3, #1
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d102      	bne.n	8007704 <dir_alloc+0x64>
 80076fe:	e00c      	b.n	800771a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007700:	2300      	movs	r3, #0
 8007702:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007704:	2101      	movs	r1, #1
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff ff05 	bl	8007516 <dir_next>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d0d7      	beq.n	80076c6 <dir_alloc+0x26>
 8007716:	e000      	b.n	800771a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007718:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800771a:	7dfb      	ldrb	r3, [r7, #23]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d101      	bne.n	8007724 <dir_alloc+0x84>
 8007720:	2307      	movs	r3, #7
 8007722:	75fb      	strb	r3, [r7, #23]
	return res;
 8007724:	7dfb      	ldrb	r3, [r7, #23]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b084      	sub	sp, #16
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	331a      	adds	r3, #26
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff f87b 	bl	8006838 <ld_word>
 8007742:	4603      	mov	r3, r0
 8007744:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b03      	cmp	r3, #3
 800774c:	d109      	bne.n	8007762 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	3314      	adds	r3, #20
 8007752:	4618      	mov	r0, r3
 8007754:	f7ff f870 	bl	8006838 <ld_word>
 8007758:	4603      	mov	r3, r0
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	4313      	orrs	r3, r2
 8007760:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007762:	68fb      	ldr	r3, [r7, #12]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	331a      	adds	r3, #26
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	b292      	uxth	r2, r2
 8007780:	4611      	mov	r1, r2
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff f893 	bl	80068ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d109      	bne.n	80077a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f103 0214 	add.w	r2, r3, #20
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0c1b      	lsrs	r3, r3, #16
 800779a:	b29b      	uxth	r3, r3
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f7ff f885 	bl	80068ae <st_word>
	}
}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b086      	sub	sp, #24
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077ba:	2100      	movs	r1, #0
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fe2f 	bl	8007420 <dir_sdi>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <dir_find+0x24>
 80077cc:	7dfb      	ldrb	r3, [r7, #23]
 80077ce:	e03e      	b.n	800784e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	4619      	mov	r1, r3
 80077d6:	6938      	ldr	r0, [r7, #16]
 80077d8:	f7ff faa2 	bl	8006d20 <move_window>
 80077dc:	4603      	mov	r3, r0
 80077de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80077e0:	7dfb      	ldrb	r3, [r7, #23]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d12f      	bne.n	8007846 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <dir_find+0x4e>
 80077f4:	2304      	movs	r3, #4
 80077f6:	75fb      	strb	r3, [r7, #23]
 80077f8:	e028      	b.n	800784c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	330b      	adds	r3, #11
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007806:	b2da      	uxtb	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	330b      	adds	r3, #11
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <dir_find+0x86>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a18      	ldr	r0, [r3, #32]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	3324      	adds	r3, #36	; 0x24
 8007824:	220b      	movs	r2, #11
 8007826:	4619      	mov	r1, r3
 8007828:	f7ff f8c4 	bl	80069b4 <mem_cmp>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00b      	beq.n	800784a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007832:	2100      	movs	r1, #0
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f7ff fe6e 	bl	8007516 <dir_next>
 800783a:	4603      	mov	r3, r0
 800783c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800783e:	7dfb      	ldrb	r3, [r7, #23]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d0c5      	beq.n	80077d0 <dir_find+0x24>
 8007844:	e002      	b.n	800784c <dir_find+0xa0>
		if (res != FR_OK) break;
 8007846:	bf00      	nop
 8007848:	e000      	b.n	800784c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800784a:	bf00      	nop

	return res;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007864:	2101      	movs	r1, #1
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7ff ff1a 	bl	80076a0 <dir_alloc>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d11c      	bne.n	80078b0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	4619      	mov	r1, r3
 800787c:	68b8      	ldr	r0, [r7, #8]
 800787e:	f7ff fa4f 	bl	8006d20 <move_window>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007886:	7bfb      	ldrb	r3, [r7, #15]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d111      	bne.n	80078b0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	2220      	movs	r2, #32
 8007892:	2100      	movs	r1, #0
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff f872 	bl	800697e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a18      	ldr	r0, [r3, #32]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3324      	adds	r3, #36	; 0x24
 80078a2:	220b      	movs	r2, #11
 80078a4:	4619      	mov	r1, r3
 80078a6:	f7ff f849 	bl	800693c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2201      	movs	r2, #1
 80078ae:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
	...

080078bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	3324      	adds	r3, #36	; 0x24
 80078d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80078d2:	220b      	movs	r2, #11
 80078d4:	2120      	movs	r1, #32
 80078d6:	68b8      	ldr	r0, [r7, #8]
 80078d8:	f7ff f851 	bl	800697e <mem_set>
	si = i = 0; ni = 8;
 80078dc:	2300      	movs	r3, #0
 80078de:	613b      	str	r3, [r7, #16]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	2308      	movs	r3, #8
 80078e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	61fa      	str	r2, [r7, #28]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80078f6:	7efb      	ldrb	r3, [r7, #27]
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d94e      	bls.n	800799a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80078fc:	7efb      	ldrb	r3, [r7, #27]
 80078fe:	2b2f      	cmp	r3, #47	; 0x2f
 8007900:	d006      	beq.n	8007910 <create_name+0x54>
 8007902:	7efb      	ldrb	r3, [r7, #27]
 8007904:	2b5c      	cmp	r3, #92	; 0x5c
 8007906:	d110      	bne.n	800792a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007908:	e002      	b.n	8007910 <create_name+0x54>
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	3301      	adds	r3, #1
 800790e:	61fb      	str	r3, [r7, #28]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	4413      	add	r3, r2
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	2b2f      	cmp	r3, #47	; 0x2f
 800791a:	d0f6      	beq.n	800790a <create_name+0x4e>
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	4413      	add	r3, r2
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b5c      	cmp	r3, #92	; 0x5c
 8007926:	d0f0      	beq.n	800790a <create_name+0x4e>
			break;
 8007928:	e038      	b.n	800799c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800792a:	7efb      	ldrb	r3, [r7, #27]
 800792c:	2b2e      	cmp	r3, #46	; 0x2e
 800792e:	d003      	beq.n	8007938 <create_name+0x7c>
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	d30c      	bcc.n	8007952 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b0b      	cmp	r3, #11
 800793c:	d002      	beq.n	8007944 <create_name+0x88>
 800793e:	7efb      	ldrb	r3, [r7, #27]
 8007940:	2b2e      	cmp	r3, #46	; 0x2e
 8007942:	d001      	beq.n	8007948 <create_name+0x8c>
 8007944:	2306      	movs	r3, #6
 8007946:	e044      	b.n	80079d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007948:	2308      	movs	r3, #8
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	230b      	movs	r3, #11
 800794e:	617b      	str	r3, [r7, #20]
			continue;
 8007950:	e022      	b.n	8007998 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007952:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007956:	2b00      	cmp	r3, #0
 8007958:	da04      	bge.n	8007964 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800795a:	7efb      	ldrb	r3, [r7, #27]
 800795c:	3b80      	subs	r3, #128	; 0x80
 800795e:	4a1f      	ldr	r2, [pc, #124]	; (80079dc <create_name+0x120>)
 8007960:	5cd3      	ldrb	r3, [r2, r3]
 8007962:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007964:	7efb      	ldrb	r3, [r7, #27]
 8007966:	4619      	mov	r1, r3
 8007968:	481d      	ldr	r0, [pc, #116]	; (80079e0 <create_name+0x124>)
 800796a:	f7ff f84a 	bl	8006a02 <chk_chr>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d001      	beq.n	8007978 <create_name+0xbc>
 8007974:	2306      	movs	r3, #6
 8007976:	e02c      	b.n	80079d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007978:	7efb      	ldrb	r3, [r7, #27]
 800797a:	2b60      	cmp	r3, #96	; 0x60
 800797c:	d905      	bls.n	800798a <create_name+0xce>
 800797e:	7efb      	ldrb	r3, [r7, #27]
 8007980:	2b7a      	cmp	r3, #122	; 0x7a
 8007982:	d802      	bhi.n	800798a <create_name+0xce>
 8007984:	7efb      	ldrb	r3, [r7, #27]
 8007986:	3b20      	subs	r3, #32
 8007988:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	613a      	str	r2, [r7, #16]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	4413      	add	r3, r2
 8007994:	7efa      	ldrb	r2, [r7, #27]
 8007996:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007998:	e7a6      	b.n	80078e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800799a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	69fb      	ldr	r3, [r7, #28]
 80079a0:	441a      	add	r2, r3
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <create_name+0xf4>
 80079ac:	2306      	movs	r3, #6
 80079ae:	e010      	b.n	80079d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2be5      	cmp	r3, #229	; 0xe5
 80079b6:	d102      	bne.n	80079be <create_name+0x102>
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	2205      	movs	r2, #5
 80079bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079be:	7efb      	ldrb	r3, [r7, #27]
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d801      	bhi.n	80079c8 <create_name+0x10c>
 80079c4:	2204      	movs	r2, #4
 80079c6:	e000      	b.n	80079ca <create_name+0x10e>
 80079c8:	2200      	movs	r2, #0
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	330b      	adds	r3, #11
 80079ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80079d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3720      	adds	r7, #32
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	08009fcc 	.word	0x08009fcc
 80079e0:	08009f54 	.word	0x08009f54

080079e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80079f8:	e002      	b.n	8007a00 <follow_path+0x1c>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	3301      	adds	r3, #1
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b2f      	cmp	r3, #47	; 0x2f
 8007a06:	d0f8      	beq.n	80079fa <follow_path+0x16>
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a0e:	d0f4      	beq.n	80079fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	2200      	movs	r2, #0
 8007a14:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	2b1f      	cmp	r3, #31
 8007a1c:	d80a      	bhi.n	8007a34 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2280      	movs	r2, #128	; 0x80
 8007a22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007a26:	2100      	movs	r1, #0
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff fcf9 	bl	8007420 <dir_sdi>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75fb      	strb	r3, [r7, #23]
 8007a32:	e043      	b.n	8007abc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007a34:	463b      	mov	r3, r7
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f7ff ff3f 	bl	80078bc <create_name>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007a42:	7dfb      	ldrb	r3, [r7, #23]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d134      	bne.n	8007ab2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff feaf 	bl	80077ac <dir_find>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007a58:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	2b04      	cmp	r3, #4
 8007a64:	d127      	bne.n	8007ab6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007a66:	7afb      	ldrb	r3, [r7, #11]
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d122      	bne.n	8007ab6 <follow_path+0xd2>
 8007a70:	2305      	movs	r3, #5
 8007a72:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007a74:	e01f      	b.n	8007ab6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007a76:	7afb      	ldrb	r3, [r7, #11]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11c      	bne.n	8007aba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	799b      	ldrb	r3, [r3, #6]
 8007a84:	f003 0310 	and.w	r3, r3, #16
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007a8c:	2305      	movs	r3, #5
 8007a8e:	75fb      	strb	r3, [r7, #23]
 8007a90:	e014      	b.n	8007abc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	4413      	add	r3, r2
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fe42 	bl	800772e <ld_clust>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ab0:	e7c0      	b.n	8007a34 <follow_path+0x50>
			if (res != FR_OK) break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <follow_path+0xd8>
				break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007aba:	bf00      	nop
			}
		}
	}

	return res;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b087      	sub	sp, #28
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d031      	beq.n	8007b40 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	617b      	str	r3, [r7, #20]
 8007ae2:	e002      	b.n	8007aea <get_ldnumber+0x24>
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	617b      	str	r3, [r7, #20]
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d903      	bls.n	8007afa <get_ldnumber+0x34>
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b3a      	cmp	r3, #58	; 0x3a
 8007af8:	d1f4      	bne.n	8007ae4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	2b3a      	cmp	r3, #58	; 0x3a
 8007b00:	d11c      	bne.n	8007b3c <get_ldnumber+0x76>
			tp = *path;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	60fa      	str	r2, [r7, #12]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	3b30      	subs	r3, #48	; 0x30
 8007b12:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b09      	cmp	r3, #9
 8007b18:	d80e      	bhi.n	8007b38 <get_ldnumber+0x72>
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d10a      	bne.n	8007b38 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d107      	bne.n	8007b38 <get_ldnumber+0x72>
					vol = (int)i;
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	697a      	ldr	r2, [r7, #20]
 8007b36:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	e002      	b.n	8007b42 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007b40:	693b      	ldr	r3, [r7, #16]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	371c      	adds	r7, #28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	70da      	strb	r2, [r3, #3]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7ff f8d8 	bl	8006d20 <move_window>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <check_fs+0x2a>
 8007b76:	2304      	movs	r3, #4
 8007b78:	e038      	b.n	8007bec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3330      	adds	r3, #48	; 0x30
 8007b7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe fe58 	bl	8006838 <ld_word>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d001      	beq.n	8007b98 <check_fs+0x48>
 8007b94:	2303      	movs	r3, #3
 8007b96:	e029      	b.n	8007bec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b9e:	2be9      	cmp	r3, #233	; 0xe9
 8007ba0:	d009      	beq.n	8007bb6 <check_fs+0x66>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ba8:	2beb      	cmp	r3, #235	; 0xeb
 8007baa:	d11e      	bne.n	8007bea <check_fs+0x9a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007bb2:	2b90      	cmp	r3, #144	; 0x90
 8007bb4:	d119      	bne.n	8007bea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3330      	adds	r3, #48	; 0x30
 8007bba:	3336      	adds	r3, #54	; 0x36
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe fe53 	bl	8006868 <ld_dword>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007bc8:	4a0a      	ldr	r2, [pc, #40]	; (8007bf4 <check_fs+0xa4>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d101      	bne.n	8007bd2 <check_fs+0x82>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e00c      	b.n	8007bec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	3330      	adds	r3, #48	; 0x30
 8007bd6:	3352      	adds	r3, #82	; 0x52
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fe45 	bl	8006868 <ld_dword>
 8007bde:	4603      	mov	r3, r0
 8007be0:	4a05      	ldr	r2, [pc, #20]	; (8007bf8 <check_fs+0xa8>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d101      	bne.n	8007bea <check_fs+0x9a>
 8007be6:	2300      	movs	r3, #0
 8007be8:	e000      	b.n	8007bec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007bea:	2302      	movs	r3, #2
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	00544146 	.word	0x00544146
 8007bf8:	33544146 	.word	0x33544146

08007bfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b096      	sub	sp, #88	; 0x58
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	4613      	mov	r3, r2
 8007c08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ff58 	bl	8007ac6 <get_ldnumber>
 8007c16:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	da01      	bge.n	8007c22 <find_volume+0x26>
 8007c1e:	230b      	movs	r3, #11
 8007c20:	e22e      	b.n	8008080 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007c22:	4aa8      	ldr	r2, [pc, #672]	; (8007ec4 <find_volume+0x2c8>)
 8007c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <find_volume+0x3a>
 8007c32:	230c      	movs	r3, #12
 8007c34:	e224      	b.n	8008080 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c3a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007c3c:	79fb      	ldrb	r3, [r7, #7]
 8007c3e:	f023 0301 	bic.w	r3, r3, #1
 8007c42:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe fd53 	bl	80066fc <disk_status>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10c      	bne.n	8007c82 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d007      	beq.n	8007c7e <find_volume+0x82>
 8007c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007c7a:	230a      	movs	r3, #10
 8007c7c:	e200      	b.n	8008080 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007c7e:	2300      	movs	r3, #0
 8007c80:	e1fe      	b.n	8008080 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	2200      	movs	r2, #0
 8007c86:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	785b      	ldrb	r3, [r3, #1]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fd4b 	bl	8006730 <disk_initialize>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ca0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007cac:	2303      	movs	r3, #3
 8007cae:	e1e7      	b.n	8008080 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d007      	beq.n	8007cc6 <find_volume+0xca>
 8007cb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007cba:	f003 0304 	and.w	r3, r3, #4
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007cc2:	230a      	movs	r3, #10
 8007cc4:	e1dc      	b.n	8008080 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007cca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ccc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cce:	f7ff ff3f 	bl	8007b50 <check_fs>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d14b      	bne.n	8007d78 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce4:	e01f      	b.n	8007d26 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007cf4:	4413      	add	r3, r2
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d006      	beq.n	8007d10 <find_volume+0x114>
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	3308      	adds	r3, #8
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fdae 	bl	8006868 <ld_dword>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	e000      	b.n	8007d12 <find_volume+0x116>
 8007d10:	2200      	movs	r2, #0
 8007d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d22:	3301      	adds	r3, #1
 8007d24:	643b      	str	r3, [r7, #64]	; 0x40
 8007d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d9dc      	bls.n	8007ce6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d002      	beq.n	8007d3c <find_volume+0x140>
 8007d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007d44:	4413      	add	r3, r2
 8007d46:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007d4a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d005      	beq.n	8007d5e <find_volume+0x162>
 8007d52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d56:	f7ff fefb 	bl	8007b50 <check_fs>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	e000      	b.n	8007d60 <find_volume+0x164>
 8007d5e:	2303      	movs	r3, #3
 8007d60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007d64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d905      	bls.n	8007d78 <find_volume+0x17c>
 8007d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d6e:	3301      	adds	r3, #1
 8007d70:	643b      	str	r3, [r7, #64]	; 0x40
 8007d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d9e1      	bls.n	8007d3c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d101      	bne.n	8007d84 <find_volume+0x188>
 8007d80:	2301      	movs	r3, #1
 8007d82:	e17d      	b.n	8008080 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d901      	bls.n	8007d90 <find_volume+0x194>
 8007d8c:	230d      	movs	r3, #13
 8007d8e:	e177      	b.n	8008080 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d92:	3330      	adds	r3, #48	; 0x30
 8007d94:	330b      	adds	r3, #11
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7fe fd4e 	bl	8006838 <ld_word>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007da2:	d001      	beq.n	8007da8 <find_volume+0x1ac>
 8007da4:	230d      	movs	r3, #13
 8007da6:	e16b      	b.n	8008080 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	3330      	adds	r3, #48	; 0x30
 8007dac:	3316      	adds	r3, #22
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fe fd42 	bl	8006838 <ld_word>
 8007db4:	4603      	mov	r3, r0
 8007db6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <find_volume+0x1d0>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	3330      	adds	r3, #48	; 0x30
 8007dc2:	3324      	adds	r3, #36	; 0x24
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe fd4f 	bl	8006868 <ld_dword>
 8007dca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dd0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dda:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	789b      	ldrb	r3, [r3, #2]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d005      	beq.n	8007df0 <find_volume+0x1f4>
 8007de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de6:	789b      	ldrb	r3, [r3, #2]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d001      	beq.n	8007df0 <find_volume+0x1f4>
 8007dec:	230d      	movs	r3, #13
 8007dee:	e147      	b.n	8008080 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	789b      	ldrb	r3, [r3, #2]
 8007df4:	461a      	mov	r2, r3
 8007df6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e08:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0c:	895b      	ldrh	r3, [r3, #10]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <find_volume+0x228>
 8007e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e14:	895b      	ldrh	r3, [r3, #10]
 8007e16:	461a      	mov	r2, r3
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	895b      	ldrh	r3, [r3, #10]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <find_volume+0x22c>
 8007e24:	230d      	movs	r3, #13
 8007e26:	e12b      	b.n	8008080 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e2a:	3330      	adds	r3, #48	; 0x30
 8007e2c:	3311      	adds	r3, #17
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7fe fd02 	bl	8006838 <ld_word>
 8007e34:	4603      	mov	r3, r0
 8007e36:	461a      	mov	r2, r3
 8007e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e3e:	891b      	ldrh	r3, [r3, #8]
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <find_volume+0x252>
 8007e4a:	230d      	movs	r3, #13
 8007e4c:	e118      	b.n	8008080 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	3330      	adds	r3, #48	; 0x30
 8007e52:	3313      	adds	r3, #19
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7fe fcef 	bl	8006838 <ld_word>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d106      	bne.n	8007e72 <find_volume+0x276>
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	3330      	adds	r3, #48	; 0x30
 8007e68:	3320      	adds	r3, #32
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fcfc 	bl	8006868 <ld_dword>
 8007e70:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e74:	3330      	adds	r3, #48	; 0x30
 8007e76:	330e      	adds	r3, #14
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fcdd 	bl	8006838 <ld_word>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007e82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <find_volume+0x290>
 8007e88:	230d      	movs	r3, #13
 8007e8a:	e0f9      	b.n	8008080 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007e8c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e90:	4413      	add	r3, r2
 8007e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e94:	8912      	ldrh	r2, [r2, #8]
 8007e96:	0912      	lsrs	r2, r2, #4
 8007e98:	b292      	uxth	r2, r2
 8007e9a:	4413      	add	r3, r2
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d201      	bcs.n	8007eaa <find_volume+0x2ae>
 8007ea6:	230d      	movs	r3, #13
 8007ea8:	e0ea      	b.n	8008080 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eb2:	8952      	ldrh	r2, [r2, #10]
 8007eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <find_volume+0x2cc>
 8007ec0:	230d      	movs	r3, #13
 8007ec2:	e0dd      	b.n	8008080 <find_volume+0x484>
 8007ec4:	20000098 	.word	0x20000098
		fmt = FS_FAT32;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d802      	bhi.n	8007ede <find_volume+0x2e2>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d802      	bhi.n	8007eee <find_volume+0x2f2>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	1c9a      	adds	r2, r3, #2
 8007ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef4:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007efa:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007efc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f00:	441a      	add	r2, r3
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8007f06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	441a      	add	r2, r3
 8007f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d11e      	bne.n	8007f56 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	3330      	adds	r3, #48	; 0x30
 8007f1c:	332a      	adds	r3, #42	; 0x2a
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fc8a 	bl	8006838 <ld_word>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <find_volume+0x332>
 8007f2a:	230d      	movs	r3, #13
 8007f2c:	e0a8      	b.n	8008080 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f30:	891b      	ldrh	r3, [r3, #8]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <find_volume+0x33e>
 8007f36:	230d      	movs	r3, #13
 8007f38:	e0a2      	b.n	8008080 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	3330      	adds	r3, #48	; 0x30
 8007f3e:	332c      	adds	r3, #44	; 0x2c
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fe fc91 	bl	8006868 <ld_dword>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	647b      	str	r3, [r7, #68]	; 0x44
 8007f54:	e01f      	b.n	8007f96 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	891b      	ldrh	r3, [r3, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <find_volume+0x366>
 8007f5e:	230d      	movs	r3, #13
 8007f60:	e08e      	b.n	8008080 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	6a1a      	ldr	r2, [r3, #32]
 8007f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f68:	441a      	add	r2, r3
 8007f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d103      	bne.n	8007f7e <find_volume+0x382>
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	005b      	lsls	r3, r3, #1
 8007f7c:	e00a      	b.n	8007f94 <find_volume+0x398>
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	695a      	ldr	r2, [r3, #20]
 8007f82:	4613      	mov	r3, r2
 8007f84:	005b      	lsls	r3, r3, #1
 8007f86:	4413      	add	r3, r2
 8007f88:	085a      	lsrs	r2, r3, #1
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007f94:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d201      	bcs.n	8007faa <find_volume+0x3ae>
 8007fa6:	230d      	movs	r3, #13
 8007fa8:	e06a      	b.n	8008080 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	611a      	str	r2, [r3, #16]
 8007fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	2280      	movs	r2, #128	; 0x80
 8007fbe:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fc4:	2b03      	cmp	r3, #3
 8007fc6:	d149      	bne.n	800805c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	3330      	adds	r3, #48	; 0x30
 8007fcc:	3330      	adds	r3, #48	; 0x30
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7fe fc32 	bl	8006838 <ld_word>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d140      	bne.n	800805c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fdc:	3301      	adds	r3, #1
 8007fde:	4619      	mov	r1, r3
 8007fe0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fe2:	f7fe fe9d 	bl	8006d20 <move_window>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d137      	bne.n	800805c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2200      	movs	r2, #0
 8007ff0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	3330      	adds	r3, #48	; 0x30
 8007ff6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fc1c 	bl	8006838 <ld_word>
 8008000:	4603      	mov	r3, r0
 8008002:	461a      	mov	r2, r3
 8008004:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008008:	429a      	cmp	r2, r3
 800800a:	d127      	bne.n	800805c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800800c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800e:	3330      	adds	r3, #48	; 0x30
 8008010:	4618      	mov	r0, r3
 8008012:	f7fe fc29 	bl	8006868 <ld_dword>
 8008016:	4603      	mov	r3, r0
 8008018:	4a1b      	ldr	r2, [pc, #108]	; (8008088 <find_volume+0x48c>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d11e      	bne.n	800805c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	3330      	adds	r3, #48	; 0x30
 8008022:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fc1e 	bl	8006868 <ld_dword>
 800802c:	4603      	mov	r3, r0
 800802e:	4a17      	ldr	r2, [pc, #92]	; (800808c <find_volume+0x490>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d113      	bne.n	800805c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008036:	3330      	adds	r3, #48	; 0x30
 8008038:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800803c:	4618      	mov	r0, r3
 800803e:	f7fe fc13 	bl	8006868 <ld_dword>
 8008042:	4602      	mov	r2, r0
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	3330      	adds	r3, #48	; 0x30
 800804c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008050:	4618      	mov	r0, r3
 8008052:	f7fe fc09 	bl	8006868 <ld_dword>
 8008056:	4602      	mov	r2, r0
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008062:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008064:	4b0a      	ldr	r3, [pc, #40]	; (8008090 <find_volume+0x494>)
 8008066:	881b      	ldrh	r3, [r3, #0]
 8008068:	3301      	adds	r3, #1
 800806a:	b29a      	uxth	r2, r3
 800806c:	4b08      	ldr	r3, [pc, #32]	; (8008090 <find_volume+0x494>)
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <find_volume+0x494>)
 8008072:	881a      	ldrh	r2, [r3, #0]
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800807a:	f7fe fde9 	bl	8006c50 <clear_lock>
#endif
	return FR_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3758      	adds	r7, #88	; 0x58
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	41615252 	.word	0x41615252
 800808c:	61417272 	.word	0x61417272
 8008090:	2000009c 	.word	0x2000009c

08008094 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800809e:	2309      	movs	r3, #9
 80080a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d01c      	beq.n	80080e2 <validate+0x4e>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d018      	beq.n	80080e2 <validate+0x4e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <validate+0x4e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	889a      	ldrh	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	88db      	ldrh	r3, [r3, #6]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d10c      	bne.n	80080e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f7fe fb14 	bl	80066fc <disk_status>
 80080d4:	4603      	mov	r3, r0
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <validate+0x4e>
			res = FR_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d102      	bne.n	80080ee <validate+0x5a>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	e000      	b.n	80080f0 <validate+0x5c>
 80080ee:	2300      	movs	r3, #0
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	6013      	str	r3, [r2, #0]
	return res;
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b088      	sub	sp, #32
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4613      	mov	r3, r2
 800810c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008112:	f107 0310 	add.w	r3, r7, #16
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff fcd5 	bl	8007ac6 <get_ldnumber>
 800811c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da01      	bge.n	8008128 <f_mount+0x28>
 8008124:	230b      	movs	r3, #11
 8008126:	e02b      	b.n	8008180 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008128:	4a17      	ldr	r2, [pc, #92]	; (8008188 <f_mount+0x88>)
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008130:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d005      	beq.n	8008144 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008138:	69b8      	ldr	r0, [r7, #24]
 800813a:	f7fe fd89 	bl	8006c50 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	2200      	movs	r2, #0
 8008142:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	490d      	ldr	r1, [pc, #52]	; (8008188 <f_mount+0x88>)
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <f_mount+0x66>
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b01      	cmp	r3, #1
 8008164:	d001      	beq.n	800816a <f_mount+0x6a>
 8008166:	2300      	movs	r3, #0
 8008168:	e00a      	b.n	8008180 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800816a:	f107 010c 	add.w	r1, r7, #12
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	2200      	movs	r2, #0
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fd41 	bl	8007bfc <find_volume>
 800817a:	4603      	mov	r3, r0
 800817c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800817e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3720      	adds	r7, #32
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	20000098 	.word	0x20000098

0800818c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b098      	sub	sp, #96	; 0x60
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <f_open+0x18>
 80081a0:	2309      	movs	r3, #9
 80081a2:	e1ad      	b.n	8008500 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081aa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80081ac:	79fa      	ldrb	r2, [r7, #7]
 80081ae:	f107 0110 	add.w	r1, r7, #16
 80081b2:	f107 0308 	add.w	r3, r7, #8
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff fd20 	bl	8007bfc <find_volume>
 80081bc:	4603      	mov	r3, r0
 80081be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80081c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 8191 	bne.w	80084ee <f_open+0x362>
		dj.obj.fs = fs;
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	f107 0314 	add.w	r3, r7, #20
 80081d6:	4611      	mov	r1, r2
 80081d8:	4618      	mov	r0, r3
 80081da:	f7ff fc03 	bl	80079e4 <follow_path>
 80081de:	4603      	mov	r3, r0
 80081e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80081e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d11a      	bne.n	8008222 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80081ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081f0:	b25b      	sxtb	r3, r3
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	da03      	bge.n	80081fe <f_open+0x72>
				res = FR_INVALID_NAME;
 80081f6:	2306      	movs	r3, #6
 80081f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80081fc:	e011      	b.n	8008222 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80081fe:	79fb      	ldrb	r3, [r7, #7]
 8008200:	f023 0301 	bic.w	r3, r3, #1
 8008204:	2b00      	cmp	r3, #0
 8008206:	bf14      	ite	ne
 8008208:	2301      	movne	r3, #1
 800820a:	2300      	moveq	r3, #0
 800820c:	b2db      	uxtb	r3, r3
 800820e:	461a      	mov	r2, r3
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fe fc0e 	bl	8006a38 <chk_lock>
 800821c:	4603      	mov	r3, r0
 800821e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008222:	79fb      	ldrb	r3, [r7, #7]
 8008224:	f003 031c 	and.w	r3, r3, #28
 8008228:	2b00      	cmp	r3, #0
 800822a:	d07f      	beq.n	800832c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800822c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008230:	2b00      	cmp	r3, #0
 8008232:	d017      	beq.n	8008264 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008238:	2b04      	cmp	r3, #4
 800823a:	d10e      	bne.n	800825a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800823c:	f7fe fc58 	bl	8006af0 <enq_lock>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d006      	beq.n	8008254 <f_open+0xc8>
 8008246:	f107 0314 	add.w	r3, r7, #20
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fb03 	bl	8007856 <dir_register>
 8008250:	4603      	mov	r3, r0
 8008252:	e000      	b.n	8008256 <f_open+0xca>
 8008254:	2312      	movs	r3, #18
 8008256:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800825a:	79fb      	ldrb	r3, [r7, #7]
 800825c:	f043 0308 	orr.w	r3, r3, #8
 8008260:	71fb      	strb	r3, [r7, #7]
 8008262:	e010      	b.n	8008286 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008264:	7ebb      	ldrb	r3, [r7, #26]
 8008266:	f003 0311 	and.w	r3, r3, #17
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <f_open+0xea>
					res = FR_DENIED;
 800826e:	2307      	movs	r3, #7
 8008270:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008274:	e007      	b.n	8008286 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <f_open+0xfa>
 8008280:	2308      	movs	r3, #8
 8008282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008286:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800828a:	2b00      	cmp	r3, #0
 800828c:	d168      	bne.n	8008360 <f_open+0x1d4>
 800828e:	79fb      	ldrb	r3, [r7, #7]
 8008290:	f003 0308 	and.w	r3, r3, #8
 8008294:	2b00      	cmp	r3, #0
 8008296:	d063      	beq.n	8008360 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008298:	f7fd fffc 	bl	8006294 <get_fattime>
 800829c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800829e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a0:	330e      	adds	r3, #14
 80082a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fb1d 	bl	80068e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80082aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ac:	3316      	adds	r3, #22
 80082ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe fb17 	bl	80068e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80082b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b8:	330b      	adds	r3, #11
 80082ba:	2220      	movs	r2, #32
 80082bc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff fa32 	bl	800772e <ld_clust>
 80082ca:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80082d0:	2200      	movs	r2, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f7ff fa4a 	bl	800776c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	331c      	adds	r3, #28
 80082dc:	2100      	movs	r1, #0
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fb00 	bl	80068e4 <st_dword>
					fs->wflag = 1;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2201      	movs	r2, #1
 80082e8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80082ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d037      	beq.n	8008360 <f_open+0x1d4>
						dw = fs->winsect;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80082f6:	f107 0314 	add.w	r3, r7, #20
 80082fa:	2200      	movs	r2, #0
 80082fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe ff5d 	bl	80071be <remove_chain>
 8008304:	4603      	mov	r3, r0
 8008306:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800830a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800830e:	2b00      	cmp	r3, #0
 8008310:	d126      	bne.n	8008360 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008316:	4618      	mov	r0, r3
 8008318:	f7fe fd02 	bl	8006d20 <move_window>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008326:	3a01      	subs	r2, #1
 8008328:	60da      	str	r2, [r3, #12]
 800832a:	e019      	b.n	8008360 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800832c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008330:	2b00      	cmp	r3, #0
 8008332:	d115      	bne.n	8008360 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008334:	7ebb      	ldrb	r3, [r7, #26]
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	2b00      	cmp	r3, #0
 800833c:	d003      	beq.n	8008346 <f_open+0x1ba>
					res = FR_NO_FILE;
 800833e:	2304      	movs	r3, #4
 8008340:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008344:	e00c      	b.n	8008360 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	f003 0302 	and.w	r3, r3, #2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <f_open+0x1d4>
 8008350:	7ebb      	ldrb	r3, [r7, #26]
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <f_open+0x1d4>
						res = FR_DENIED;
 800835a:	2307      	movs	r3, #7
 800835c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008360:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008364:	2b00      	cmp	r3, #0
 8008366:	d128      	bne.n	80083ba <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008372:	79fb      	ldrb	r3, [r7, #7]
 8008374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008378:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	f023 0301 	bic.w	r3, r3, #1
 800838e:	2b00      	cmp	r3, #0
 8008390:	bf14      	ite	ne
 8008392:	2301      	movne	r3, #1
 8008394:	2300      	moveq	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	f107 0314 	add.w	r3, r7, #20
 800839e:	4611      	mov	r1, r2
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fbc7 	bl	8006b34 <inc_lock>
 80083a6:	4602      	mov	r2, r0
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <f_open+0x22e>
 80083b4:	2302      	movs	r3, #2
 80083b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80083ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f040 8095 	bne.w	80084ee <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083c8:	4611      	mov	r1, r2
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff f9af 	bl	800772e <ld_clust>
 80083d0:	4602      	mov	r2, r0
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80083d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d8:	331c      	adds	r3, #28
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fa44 	bl	8006868 <ld_dword>
 80083e0:	4602      	mov	r2, r0
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	88da      	ldrh	r2, [r3, #6]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	79fa      	ldrb	r2, [r7, #7]
 80083fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3330      	adds	r3, #48	; 0x30
 8008416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800841a:	2100      	movs	r1, #0
 800841c:	4618      	mov	r0, r3
 800841e:	f7fe faae 	bl	800697e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008422:	79fb      	ldrb	r3, [r7, #7]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b00      	cmp	r3, #0
 800842a:	d060      	beq.n	80084ee <f_open+0x362>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d05c      	beq.n	80084ee <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68da      	ldr	r2, [r3, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	895b      	ldrh	r3, [r3, #10]
 8008440:	025b      	lsls	r3, r3, #9
 8008442:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	657b      	str	r3, [r7, #84]	; 0x54
 8008450:	e016      	b.n	8008480 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fd1d 	bl	8006e96 <get_fat>
 800845c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800845e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008460:	2b01      	cmp	r3, #1
 8008462:	d802      	bhi.n	800846a <f_open+0x2de>
 8008464:	2302      	movs	r3, #2
 8008466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800846a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008470:	d102      	bne.n	8008478 <f_open+0x2ec>
 8008472:	2301      	movs	r3, #1
 8008474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008478:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800847a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	657b      	str	r3, [r7, #84]	; 0x54
 8008480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <f_open+0x304>
 8008488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800848a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800848c:	429a      	cmp	r2, r3
 800848e:	d8e0      	bhi.n	8008452 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008494:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008496:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800849a:	2b00      	cmp	r3, #0
 800849c:	d127      	bne.n	80084ee <f_open+0x362>
 800849e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d022      	beq.n	80084ee <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7fe fcd3 	bl	8006e58 <clust2sect>
 80084b2:	6478      	str	r0, [r7, #68]	; 0x44
 80084b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <f_open+0x336>
						res = FR_INT_ERR;
 80084ba:	2302      	movs	r3, #2
 80084bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80084c0:	e015      	b.n	80084ee <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80084c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c4:	0a5a      	lsrs	r2, r3, #9
 80084c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c8:	441a      	add	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	7858      	ldrb	r0, [r3, #1]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1a      	ldr	r2, [r3, #32]
 80084dc:	2301      	movs	r3, #1
 80084de:	f7fe f94d 	bl	800677c <disk_read>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d002      	beq.n	80084ee <f_open+0x362>
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80084ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d002      	beq.n	80084fc <f_open+0x370>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2200      	movs	r2, #0
 80084fa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80084fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008500:	4618      	mov	r0, r3
 8008502:	3760      	adds	r7, #96	; 0x60
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08e      	sub	sp, #56	; 0x38
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f107 0214 	add.w	r2, r7, #20
 8008526:	4611      	mov	r1, r2
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff fdb3 	bl	8008094 <validate>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <f_read+0x44>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	7d5b      	ldrb	r3, [r3, #21]
 8008540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <f_read+0x4a>
 800854c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008550:	e115      	b.n	800877e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	7d1b      	ldrb	r3, [r3, #20]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <f_read+0x5a>
 800855e:	2307      	movs	r3, #7
 8008560:	e10d      	b.n	800877e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6a3b      	ldr	r3, [r7, #32]
 8008572:	429a      	cmp	r2, r3
 8008574:	f240 80fe 	bls.w	8008774 <f_read+0x26c>
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800857c:	e0fa      	b.n	8008774 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008586:	2b00      	cmp	r3, #0
 8008588:	f040 80c6 	bne.w	8008718 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	0a5b      	lsrs	r3, r3, #9
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	8952      	ldrh	r2, [r2, #10]
 8008596:	3a01      	subs	r2, #1
 8008598:	4013      	ands	r3, r2
 800859a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d12f      	bne.n	8008602 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	633b      	str	r3, [r7, #48]	; 0x30
 80085b0:	e013      	b.n	80085da <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	4619      	mov	r1, r3
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7fe fef9 	bl	80073b8 <clmt_clust>
 80085c6:	6338      	str	r0, [r7, #48]	; 0x30
 80085c8:	e007      	b.n	80085da <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	4619      	mov	r1, r3
 80085d2:	4610      	mov	r0, r2
 80085d4:	f7fe fc5f 	bl	8006e96 <get_fat>
 80085d8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80085da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d804      	bhi.n	80085ea <f_read+0xe2>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2202      	movs	r2, #2
 80085e4:	755a      	strb	r2, [r3, #21]
 80085e6:	2302      	movs	r3, #2
 80085e8:	e0c9      	b.n	800877e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80085ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f0:	d104      	bne.n	80085fc <f_read+0xf4>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	755a      	strb	r2, [r3, #21]
 80085f8:	2301      	movs	r3, #1
 80085fa:	e0c0      	b.n	800877e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008600:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	4619      	mov	r1, r3
 800860a:	4610      	mov	r0, r2
 800860c:	f7fe fc24 	bl	8006e58 <clust2sect>
 8008610:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <f_read+0x11a>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2202      	movs	r2, #2
 800861c:	755a      	strb	r2, [r3, #21]
 800861e:	2302      	movs	r3, #2
 8008620:	e0ad      	b.n	800877e <f_read+0x276>
			sect += csect;
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	4413      	add	r3, r2
 8008628:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	0a5b      	lsrs	r3, r3, #9
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d039      	beq.n	80086aa <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008636:	69fa      	ldr	r2, [r7, #28]
 8008638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863a:	4413      	add	r3, r2
 800863c:	697a      	ldr	r2, [r7, #20]
 800863e:	8952      	ldrh	r2, [r2, #10]
 8008640:	4293      	cmp	r3, r2
 8008642:	d905      	bls.n	8008650 <f_read+0x148>
					cc = fs->csize - csect;
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	895b      	ldrh	r3, [r3, #10]
 8008648:	461a      	mov	r2, r3
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	7858      	ldrb	r0, [r3, #1]
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	f7fe f88f 	bl	800677c <disk_read>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d004      	beq.n	800866e <f_read+0x166>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	755a      	strb	r2, [r3, #21]
 800866a:	2301      	movs	r3, #1
 800866c:	e087      	b.n	800877e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	7d1b      	ldrb	r3, [r3, #20]
 8008672:	b25b      	sxtb	r3, r3
 8008674:	2b00      	cmp	r3, #0
 8008676:	da14      	bge.n	80086a2 <f_read+0x19a>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	69bb      	ldr	r3, [r7, #24]
 800867e:	1ad3      	subs	r3, r2, r3
 8008680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008682:	429a      	cmp	r2, r3
 8008684:	d90d      	bls.n	80086a2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6a1a      	ldr	r2, [r3, #32]
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	025b      	lsls	r3, r3, #9
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	18d0      	adds	r0, r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3330      	adds	r3, #48	; 0x30
 8008698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869c:	4619      	mov	r1, r3
 800869e:	f7fe f94d 	bl	800693c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	025b      	lsls	r3, r3, #9
 80086a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80086a8:	e050      	b.n	800874c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d02e      	beq.n	8008712 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	7d1b      	ldrb	r3, [r3, #20]
 80086b8:	b25b      	sxtb	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	da18      	bge.n	80086f0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	7858      	ldrb	r0, [r3, #1]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6a1a      	ldr	r2, [r3, #32]
 80086cc:	2301      	movs	r3, #1
 80086ce:	f7fe f875 	bl	80067bc <disk_write>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <f_read+0x1da>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	755a      	strb	r2, [r3, #21]
 80086de:	2301      	movs	r3, #1
 80086e0:	e04d      	b.n	800877e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	7d1b      	ldrb	r3, [r3, #20]
 80086e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ea:	b2da      	uxtb	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	7858      	ldrb	r0, [r3, #1]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086fa:	2301      	movs	r3, #1
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	f7fe f83d 	bl	800677c <disk_read>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <f_read+0x20a>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	755a      	strb	r2, [r3, #21]
 800870e:	2301      	movs	r3, #1
 8008710:	e035      	b.n	800877e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008720:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d901      	bls.n	8008732 <f_read+0x22a>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	4413      	add	r3, r2
 8008742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008744:	4619      	mov	r1, r3
 8008746:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008748:	f7fe f8f8 	bl	800693c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800874c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008750:	4413      	add	r3, r2
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	699a      	ldr	r2, [r3, #24]
 8008758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875a:	441a      	add	r2, r3
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	619a      	str	r2, [r3, #24]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	441a      	add	r2, r3
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	601a      	str	r2, [r3, #0]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	f47f af01 	bne.w	800857e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	3738      	adds	r7, #56	; 0x38
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b08c      	sub	sp, #48	; 0x30
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
 800878e:	60b9      	str	r1, [r7, #8]
 8008790:	607a      	str	r2, [r7, #4]
 8008792:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f107 0210 	add.w	r2, r7, #16
 80087a4:	4611      	mov	r1, r2
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff fc74 	bl	8008094 <validate>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d107      	bne.n	80087ca <f_write+0x44>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	7d5b      	ldrb	r3, [r3, #21]
 80087be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80087c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <f_write+0x4a>
 80087ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ce:	e14b      	b.n	8008a68 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	7d1b      	ldrb	r3, [r3, #20]
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <f_write+0x5a>
 80087dc:	2307      	movs	r3, #7
 80087de:	e143      	b.n	8008a68 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699a      	ldr	r2, [r3, #24]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	f080 812d 	bcs.w	8008a4c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	43db      	mvns	r3, r3
 80087f8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80087fa:	e127      	b.n	8008a4c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008804:	2b00      	cmp	r3, #0
 8008806:	f040 80e3 	bne.w	80089d0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	0a5b      	lsrs	r3, r3, #9
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	8952      	ldrh	r2, [r2, #10]
 8008814:	3a01      	subs	r2, #1
 8008816:	4013      	ands	r3, r2
 8008818:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800881a:	69bb      	ldr	r3, [r7, #24]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d143      	bne.n	80088a8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d10c      	bne.n	8008842 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800882e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11a      	bne.n	800886a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2100      	movs	r1, #0
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fd25 	bl	8007288 <create_chain>
 800883e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008840:	e013      	b.n	800886a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	2b00      	cmp	r3, #0
 8008848:	d007      	beq.n	800885a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	699b      	ldr	r3, [r3, #24]
 800884e:	4619      	mov	r1, r3
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7fe fdb1 	bl	80073b8 <clmt_clust>
 8008856:	62b8      	str	r0, [r7, #40]	; 0x28
 8008858:	e007      	b.n	800886a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	4619      	mov	r1, r3
 8008862:	4610      	mov	r0, r2
 8008864:	f7fe fd10 	bl	8007288 <create_chain>
 8008868:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80f2 	beq.w	8008a56 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	2b01      	cmp	r3, #1
 8008876:	d104      	bne.n	8008882 <f_write+0xfc>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2202      	movs	r2, #2
 800887c:	755a      	strb	r2, [r3, #21]
 800887e:	2302      	movs	r3, #2
 8008880:	e0f2      	b.n	8008a68 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d104      	bne.n	8008894 <f_write+0x10e>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2201      	movs	r2, #1
 800888e:	755a      	strb	r2, [r3, #21]
 8008890:	2301      	movs	r3, #1
 8008892:	e0e9      	b.n	8008a68 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008898:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	689b      	ldr	r3, [r3, #8]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d102      	bne.n	80088a8 <f_write+0x122>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	7d1b      	ldrb	r3, [r3, #20]
 80088ac:	b25b      	sxtb	r3, r3
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	da18      	bge.n	80088e4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	7858      	ldrb	r0, [r3, #1]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a1a      	ldr	r2, [r3, #32]
 80088c0:	2301      	movs	r3, #1
 80088c2:	f7fd ff7b 	bl	80067bc <disk_write>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d004      	beq.n	80088d6 <f_write+0x150>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2201      	movs	r2, #1
 80088d0:	755a      	strb	r2, [r3, #21]
 80088d2:	2301      	movs	r3, #1
 80088d4:	e0c8      	b.n	8008a68 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	7d1b      	ldrb	r3, [r3, #20]
 80088da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe fab3 	bl	8006e58 <clust2sect>
 80088f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d104      	bne.n	8008904 <f_write+0x17e>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2202      	movs	r2, #2
 80088fe:	755a      	strb	r2, [r3, #21]
 8008900:	2302      	movs	r3, #2
 8008902:	e0b1      	b.n	8008a68 <f_write+0x2e2>
			sect += csect;
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	4413      	add	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	0a5b      	lsrs	r3, r3, #9
 8008910:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d03c      	beq.n	8008992 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	4413      	add	r3, r2
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	8952      	ldrh	r2, [r2, #10]
 8008922:	4293      	cmp	r3, r2
 8008924:	d905      	bls.n	8008932 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	895b      	ldrh	r3, [r3, #10]
 800892a:	461a      	mov	r2, r3
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	7858      	ldrb	r0, [r3, #1]
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	69f9      	ldr	r1, [r7, #28]
 800893c:	f7fd ff3e 	bl	80067bc <disk_write>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <f_write+0x1ca>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2201      	movs	r2, #1
 800894a:	755a      	strb	r2, [r3, #21]
 800894c:	2301      	movs	r3, #1
 800894e:	e08b      	b.n	8008a68 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6a1a      	ldr	r2, [r3, #32]
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	6a3a      	ldr	r2, [r7, #32]
 800895a:	429a      	cmp	r2, r3
 800895c:	d915      	bls.n	800898a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a1a      	ldr	r2, [r3, #32]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	025b      	lsls	r3, r3, #9
 800896e:	69fa      	ldr	r2, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008976:	4619      	mov	r1, r3
 8008978:	f7fd ffe0 	bl	800693c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	7d1b      	ldrb	r3, [r3, #20]
 8008980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008984:	b2da      	uxtb	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	025b      	lsls	r3, r3, #9
 800898e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008990:	e03f      	b.n	8008a12 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	429a      	cmp	r2, r3
 800899a:	d016      	beq.n	80089ca <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	699a      	ldr	r2, [r3, #24]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d210      	bcs.n	80089ca <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	7858      	ldrb	r0, [r3, #1]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089b2:	2301      	movs	r3, #1
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	f7fd fee1 	bl	800677c <disk_read>
 80089ba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d004      	beq.n	80089ca <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2201      	movs	r2, #1
 80089c4:	755a      	strb	r2, [r3, #21]
 80089c6:	2301      	movs	r3, #1
 80089c8:	e04e      	b.n	8008a68 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80089de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d901      	bls.n	80089ea <f_write+0x264>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f8:	4413      	add	r3, r2
 80089fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd ff9c 	bl	800693c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	7d1b      	ldrb	r3, [r3, #20]
 8008a08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a0c:	b2da      	uxtb	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	4413      	add	r3, r2
 8008a18:	61fb      	str	r3, [r7, #28]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	699a      	ldr	r2, [r3, #24]
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	619a      	str	r2, [r3, #24]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	68da      	ldr	r2, [r3, #12]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	699b      	ldr	r3, [r3, #24]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	bf38      	it	cc
 8008a32:	461a      	movcc	r2, r3
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	60da      	str	r2, [r3, #12]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	441a      	add	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f aed4 	bne.w	80087fc <f_write+0x76>
 8008a54:	e000      	b.n	8008a58 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a56:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7d1b      	ldrb	r3, [r3, #20]
 8008a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3730      	adds	r7, #48	; 0x30
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f107 0208 	add.w	r2, r7, #8
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff fb07 	bl	8008094 <validate>
 8008a86:	4603      	mov	r3, r0
 8008a88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d168      	bne.n	8008b62 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7d1b      	ldrb	r3, [r3, #20]
 8008a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d062      	beq.n	8008b62 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	7d1b      	ldrb	r3, [r3, #20]
 8008aa0:	b25b      	sxtb	r3, r3
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	da15      	bge.n	8008ad2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	7858      	ldrb	r0, [r3, #1]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a1a      	ldr	r2, [r3, #32]
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f7fd fe81 	bl	80067bc <disk_write>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <f_sync+0x54>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e04f      	b.n	8008b64 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	7d1b      	ldrb	r3, [r3, #20]
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ad2:	f7fd fbdf 	bl	8006294 <get_fattime>
 8008ad6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	f7fe f91d 	bl	8006d20 <move_window>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008aea:	7dfb      	ldrb	r3, [r7, #23]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d138      	bne.n	8008b62 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	330b      	adds	r3, #11
 8008afa:	781a      	ldrb	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	330b      	adds	r3, #11
 8008b00:	f042 0220 	orr.w	r2, r2, #32
 8008b04:	b2d2      	uxtb	r2, r2
 8008b06:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	461a      	mov	r2, r3
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	f7fe fe2a 	bl	800776c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f103 021c 	add.w	r2, r3, #28
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7fd fedd 	bl	80068e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3316      	adds	r3, #22
 8008b2e:	6939      	ldr	r1, [r7, #16]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f7fd fed7 	bl	80068e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3312      	adds	r3, #18
 8008b3a:	2100      	movs	r1, #0
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fd feb6 	bl	80068ae <st_word>
					fs->wflag = 1;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	2201      	movs	r2, #1
 8008b46:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe f916 	bl	8006d7c <sync_fs>
 8008b50:	4603      	mov	r3, r0
 8008b52:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7d1b      	ldrb	r3, [r3, #20]
 8008b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b090      	sub	sp, #64	; 0x40
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f107 0208 	add.w	r2, r7, #8
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff fa88 	bl	8008094 <validate>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008b8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <f_lseek+0x2e>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7d5b      	ldrb	r3, [r3, #21]
 8008b96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008b9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <f_lseek+0x3c>
 8008ba2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008ba6:	e1e6      	b.n	8008f76 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f000 80d1 	beq.w	8008d54 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb8:	d15a      	bne.n	8008c70 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bbe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	2302      	movs	r3, #2
 8008bcc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d03a      	beq.n	8008c50 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	2300      	movs	r3, #0
 8008be0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be4:	3302      	adds	r3, #2
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8008be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	3301      	adds	r3, #1
 8008bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe f94d 	bl	8006e96 <get_fat>
 8008bfc:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d804      	bhi.n	8008c0e <f_lseek+0xa2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2202      	movs	r2, #2
 8008c08:	755a      	strb	r2, [r3, #21]
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	e1b3      	b.n	8008f76 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d104      	bne.n	8008c20 <f_lseek+0xb4>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	755a      	strb	r2, [r3, #21]
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e1aa      	b.n	8008f76 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	3301      	adds	r3, #1
 8008c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d0de      	beq.n	8008be8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d809      	bhi.n	8008c46 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c34:	1d1a      	adds	r2, r3, #4
 8008c36:	627a      	str	r2, [r7, #36]	; 0x24
 8008c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	627a      	str	r2, [r7, #36]	; 0x24
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d3c4      	bcc.n	8008bda <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c56:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d803      	bhi.n	8008c68 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	e184      	b.n	8008f72 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8008c68:	2311      	movs	r3, #17
 8008c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008c6e:	e180      	b.n	8008f72 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d902      	bls.n	8008c80 <f_lseek+0x114>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 8172 	beq.w	8008f72 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7fe fb8f 	bl	80073b8 <clmt_clust>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4610      	mov	r0, r2
 8008caa:	f7fe f8d5 	bl	8006e58 <clust2sect>
 8008cae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <f_lseek+0x154>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	755a      	strb	r2, [r3, #21]
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e15a      	b.n	8008f76 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	3b01      	subs	r3, #1
 8008cc4:	0a5b      	lsrs	r3, r3, #9
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	8952      	ldrh	r2, [r2, #10]
 8008cca:	3a01      	subs	r2, #1
 8008ccc:	4013      	ands	r3, r2
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	699b      	ldr	r3, [r3, #24]
 8008cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 8148 	beq.w	8008f72 <f_lseek+0x406>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	f000 8142 	beq.w	8008f72 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	7d1b      	ldrb	r3, [r3, #20]
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da18      	bge.n	8008d2a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	7858      	ldrb	r0, [r3, #1]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	2301      	movs	r3, #1
 8008d08:	f7fd fd58 	bl	80067bc <disk_write>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <f_lseek+0x1b0>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	755a      	strb	r2, [r3, #21]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e12c      	b.n	8008f76 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	7d1b      	ldrb	r3, [r3, #20]
 8008d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d24:	b2da      	uxtb	r2, r3
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	7858      	ldrb	r0, [r3, #1]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d34:	2301      	movs	r3, #1
 8008d36:	69ba      	ldr	r2, [r7, #24]
 8008d38:	f7fd fd20 	bl	800677c <disk_read>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d004      	beq.n	8008d4c <f_lseek+0x1e0>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	755a      	strb	r2, [r3, #21]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e114      	b.n	8008f76 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	621a      	str	r2, [r3, #32]
 8008d52:	e10e      	b.n	8008f72 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d908      	bls.n	8008d70 <f_lseek+0x204>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	7d1b      	ldrb	r3, [r3, #20]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8008d76:	2300      	movs	r3, #0
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d7e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a7 	beq.w	8008ed6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	895b      	ldrh	r3, [r3, #10]
 8008d8c:	025b      	lsls	r3, r3, #9
 8008d8e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d01b      	beq.n	8008dce <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	1e5a      	subs	r2, r3, #1
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	1e59      	subs	r1, r3, #1
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d30f      	bcc.n	8008dce <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8008dae:	6a3b      	ldr	r3, [r7, #32]
 8008db0:	1e5a      	subs	r2, r3, #1
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	425b      	negs	r3, r3
 8008db6:	401a      	ands	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	683a      	ldr	r2, [r7, #0]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dcc:	e022      	b.n	8008e14 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d119      	bne.n	8008e0e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2100      	movs	r1, #0
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fe fa52 	bl	8007288 <create_chain>
 8008de4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d104      	bne.n	8008df6 <f_lseek+0x28a>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	755a      	strb	r2, [r3, #21]
 8008df2:	2302      	movs	r3, #2
 8008df4:	e0bf      	b.n	8008f76 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfc:	d104      	bne.n	8008e08 <f_lseek+0x29c>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2201      	movs	r2, #1
 8008e02:	755a      	strb	r2, [r3, #21]
 8008e04:	2301      	movs	r3, #1
 8008e06:	e0b6      	b.n	8008f76 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e0c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e12:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d05d      	beq.n	8008ed6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8008e1a:	e03a      	b.n	8008e92 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	603b      	str	r3, [r7, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699a      	ldr	r2, [r3, #24]
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	441a      	add	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	7d1b      	ldrb	r3, [r3, #20]
 8008e34:	f003 0302 	and.w	r3, r3, #2
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00b      	beq.n	8008e54 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7fe fa21 	bl	8007288 <create_chain>
 8008e46:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8008e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d108      	bne.n	8008e60 <f_lseek+0x2f4>
							ofs = 0; break;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	603b      	str	r3, [r7, #0]
 8008e52:	e022      	b.n	8008e9a <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fe f81c 	bl	8006e96 <get_fat>
 8008e5e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e66:	d104      	bne.n	8008e72 <f_lseek+0x306>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	755a      	strb	r2, [r3, #21]
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e081      	b.n	8008f76 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8008e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d904      	bls.n	8008e82 <f_lseek+0x316>
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d304      	bcc.n	8008e8c <f_lseek+0x320>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2202      	movs	r2, #2
 8008e86:	755a      	strb	r2, [r3, #21]
 8008e88:	2302      	movs	r3, #2
 8008e8a:	e074      	b.n	8008f76 <f_lseek+0x40a>
					fp->clust = clst;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e90:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d8c0      	bhi.n	8008e1c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	699a      	ldr	r2, [r3, #24]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	441a      	add	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d012      	beq.n	8008ed6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fd ffcf 	bl	8006e58 <clust2sect>
 8008eba:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d104      	bne.n	8008ecc <f_lseek+0x360>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	755a      	strb	r2, [r3, #21]
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e054      	b.n	8008f76 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	0a5b      	lsrs	r3, r3, #9
 8008ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ed2:	4413      	add	r3, r2
 8008ed4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699a      	ldr	r2, [r3, #24]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d90a      	bls.n	8008ef8 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699a      	ldr	r2, [r3, #24]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7d1b      	ldrb	r3, [r3, #20]
 8008eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d036      	beq.n	8008f72 <f_lseek+0x406>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d031      	beq.n	8008f72 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	7d1b      	ldrb	r3, [r3, #20]
 8008f12:	b25b      	sxtb	r3, r3
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	da18      	bge.n	8008f4a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	7858      	ldrb	r0, [r3, #1]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a1a      	ldr	r2, [r3, #32]
 8008f26:	2301      	movs	r3, #1
 8008f28:	f7fd fc48 	bl	80067bc <disk_write>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d004      	beq.n	8008f3c <f_lseek+0x3d0>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2201      	movs	r2, #1
 8008f36:	755a      	strb	r2, [r3, #21]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e01c      	b.n	8008f76 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7d1b      	ldrb	r3, [r3, #20]
 8008f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	7858      	ldrb	r0, [r3, #1]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f54:	2301      	movs	r3, #1
 8008f56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f58:	f7fd fc10 	bl	800677c <disk_read>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d004      	beq.n	8008f6c <f_lseek+0x400>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	755a      	strb	r2, [r3, #21]
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e004      	b.n	8008f76 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f70:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8008f72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3740      	adds	r7, #64	; 0x40
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}

08008f7e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8008f7e:	b580      	push	{r7, lr}
 8008f80:	b088      	sub	sp, #32
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
	int n = 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008f92:	e01b      	b.n	8008fcc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8008f94:	f107 0310 	add.w	r3, r7, #16
 8008f98:	f107 0114 	add.w	r1, r7, #20
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff fab2 	bl	8008508 <f_read>
		if (rc != 1) break;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d116      	bne.n	8008fd8 <f_gets+0x5a>
		c = s[0];
 8008faa:	7d3b      	ldrb	r3, [r7, #20]
 8008fac:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8008fae:	7dfb      	ldrb	r3, [r7, #23]
 8008fb0:	2b0d      	cmp	r3, #13
 8008fb2:	d100      	bne.n	8008fb6 <f_gets+0x38>
 8008fb4:	e00a      	b.n	8008fcc <f_gets+0x4e>
		*p++ = c;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	1c5a      	adds	r2, r3, #1
 8008fba:	61ba      	str	r2, [r7, #24]
 8008fbc:	7dfa      	ldrb	r2, [r7, #23]
 8008fbe:	701a      	strb	r2, [r3, #0]
		n++;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8008fc6:	7dfb      	ldrb	r3, [r7, #23]
 8008fc8:	2b0a      	cmp	r3, #10
 8008fca:	d007      	beq.n	8008fdc <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	69fa      	ldr	r2, [r7, #28]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	dbde      	blt.n	8008f94 <f_gets+0x16>
 8008fd6:	e002      	b.n	8008fde <f_gets+0x60>
		if (rc != 1) break;
 8008fd8:	bf00      	nop
 8008fda:	e000      	b.n	8008fde <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8008fdc:	bf00      	nop
	}
	*p = 0;
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <f_gets+0x70>
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	e000      	b.n	8008ff0 <f_gets+0x72>
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8009004:	78fb      	ldrb	r3, [r7, #3]
 8009006:	2b0a      	cmp	r3, #10
 8009008:	d103      	bne.n	8009012 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800900a:	210d      	movs	r1, #13
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fff3 	bl	8008ff8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b00      	cmp	r3, #0
 800901c:	db25      	blt.n	800906a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	60fa      	str	r2, [r7, #12]
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	4413      	add	r3, r2
 8009028:	78fa      	ldrb	r2, [r7, #3]
 800902a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2b3c      	cmp	r3, #60	; 0x3c
 8009030:	dd12      	ble.n	8009058 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f103 010c 	add.w	r1, r3, #12
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	f107 0308 	add.w	r3, r7, #8
 8009042:	f7ff fba0 	bl	8008786 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009046:	68ba      	ldr	r2, [r7, #8]
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	429a      	cmp	r2, r3
 800904c:	d101      	bne.n	8009052 <putc_bfd+0x5a>
 800904e:	2300      	movs	r3, #0
 8009050:	e001      	b.n	8009056 <putc_bfd+0x5e>
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e000      	b.n	800906c <putc_bfd+0x74>
	if (i < 0) return;
 800906a:	bf00      	nop
}
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	db16      	blt.n	80090b0 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6818      	ldr	r0, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f103 010c 	add.w	r1, r3, #12
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	461a      	mov	r2, r3
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	f7ff fb76 	bl	8008786 <f_write>
 800909a:	4603      	mov	r3, r0
 800909c:	2b00      	cmp	r3, #0
 800909e:	d107      	bne.n	80090b0 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d102      	bne.n	80090b0 <putc_flush+0x3e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	e001      	b.n	80090b4 <putc_flush+0x42>
	return EOF;
 80090b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	609a      	str	r2, [r3, #8]
}
 80090da:	bf00      	nop
 80090dc:	370c      	adds	r7, #12
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
	...

080090e8 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b0a7      	sub	sp, #156	; 0x9c
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 80090f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80090f6:	6879      	ldr	r1, [r7, #4]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff ffdf 	bl	80090bc <putc_init>

	va_start(arp, fmt);
 80090fe:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009102:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8009104:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8009114:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 81f4 	beq.w	8009506 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800911e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009122:	2b25      	cmp	r3, #37	; 0x25
 8009124:	d008      	beq.n	8009138 <f_printf+0x50>
			putc_bfd(&pb, c);
 8009126:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800912a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800912e:	4611      	mov	r1, r2
 8009130:	4618      	mov	r0, r3
 8009132:	f7ff ff61 	bl	8008ff8 <putc_bfd>
			continue;
 8009136:	e1e5      	b.n	8009504 <f_printf+0x41c>
		}
		w = f = 0;
 8009138:	2300      	movs	r3, #0
 800913a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800913e:	2300      	movs	r3, #0
 8009140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8009144:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009148:	1c5a      	adds	r2, r3, #1
 800914a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 8009154:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009158:	2b30      	cmp	r3, #48	; 0x30
 800915a:	d10b      	bne.n	8009174 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800915c:	2301      	movs	r3, #1
 800915e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009166:	1c5a      	adds	r2, r3, #1
 8009168:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8009172:	e024      	b.n	80091be <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8009174:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009178:	2b2d      	cmp	r3, #45	; 0x2d
 800917a:	d120      	bne.n	80091be <f_printf+0xd6>
				f = 2; c = *fmt++;
 800917c:	2302      	movs	r3, #2
 800917e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009182:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009186:	1c5a      	adds	r2, r3, #1
 8009188:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 8009192:	e014      	b.n	80091be <f_printf+0xd6>
			w = w * 10 + c - '0';
 8009194:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009198:	4613      	mov	r3, r2
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	005b      	lsls	r3, r3, #1
 80091a0:	461a      	mov	r2, r3
 80091a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091a6:	4413      	add	r3, r2
 80091a8:	3b30      	subs	r3, #48	; 0x30
 80091aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80091ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091b2:	1c5a      	adds	r2, r3, #1
 80091b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 80091be:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091c2:	2b2f      	cmp	r3, #47	; 0x2f
 80091c4:	d903      	bls.n	80091ce <f_printf+0xe6>
 80091c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091ca:	2b39      	cmp	r3, #57	; 0x39
 80091cc:	d9e2      	bls.n	8009194 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 80091ce:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091d2:	2b6c      	cmp	r3, #108	; 0x6c
 80091d4:	d003      	beq.n	80091de <f_printf+0xf6>
 80091d6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091da:	2b4c      	cmp	r3, #76	; 0x4c
 80091dc:	d10d      	bne.n	80091fa <f_printf+0x112>
			f |= 4; c = *fmt++;
 80091de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80091e2:	f043 0304 	orr.w	r3, r3, #4
 80091e6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80091ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 80091fa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 8183 	beq.w	800950a <f_printf+0x422>
		d = c;
 8009204:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009208:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800920c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009210:	2b60      	cmp	r3, #96	; 0x60
 8009212:	d908      	bls.n	8009226 <f_printf+0x13e>
 8009214:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009218:	2b7a      	cmp	r3, #122	; 0x7a
 800921a:	d804      	bhi.n	8009226 <f_printf+0x13e>
 800921c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009220:	3b20      	subs	r3, #32
 8009222:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8009226:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800922a:	3b42      	subs	r3, #66	; 0x42
 800922c:	2b16      	cmp	r3, #22
 800922e:	f200 8098 	bhi.w	8009362 <f_printf+0x27a>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <f_printf+0x150>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	08009343 	.word	0x08009343
 800923c:	0800932b 	.word	0x0800932b
 8009240:	08009353 	.word	0x08009353
 8009244:	08009363 	.word	0x08009363
 8009248:	08009363 	.word	0x08009363
 800924c:	08009363 	.word	0x08009363
 8009250:	08009363 	.word	0x08009363
 8009254:	08009363 	.word	0x08009363
 8009258:	08009363 	.word	0x08009363
 800925c:	08009363 	.word	0x08009363
 8009260:	08009363 	.word	0x08009363
 8009264:	08009363 	.word	0x08009363
 8009268:	08009363 	.word	0x08009363
 800926c:	0800934b 	.word	0x0800934b
 8009270:	08009363 	.word	0x08009363
 8009274:	08009363 	.word	0x08009363
 8009278:	08009363 	.word	0x08009363
 800927c:	08009295 	.word	0x08009295
 8009280:	08009363 	.word	0x08009363
 8009284:	08009353 	.word	0x08009353
 8009288:	08009363 	.word	0x08009363
 800928c:	08009363 	.word	0x08009363
 8009290:	0800935b 	.word	0x0800935b
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 8009294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009296:	1d1a      	adds	r2, r3, #4
 8009298:	67ba      	str	r2, [r7, #120]	; 0x78
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800929e:	2300      	movs	r3, #0
 80092a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092a4:	e004      	b.n	80092b0 <f_printf+0x1c8>
 80092a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092aa:	3301      	adds	r3, #1
 80092ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80092b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80092b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b6:	4413      	add	r3, r2
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f3      	bne.n	80092a6 <f_printf+0x1be>
			if (!(f & 2)) {
 80092be:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d11a      	bne.n	8009300 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 80092ca:	e005      	b.n	80092d8 <f_printf+0x1f0>
 80092cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092d0:	2120      	movs	r1, #32
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fe90 	bl	8008ff8 <putc_bfd>
 80092d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80092e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d8f0      	bhi.n	80092cc <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 80092ea:	e009      	b.n	8009300 <f_printf+0x218>
 80092ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092ee:	1c5a      	adds	r2, r3, #1
 80092f0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80092f2:	781a      	ldrb	r2, [r3, #0]
 80092f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80092f8:	4611      	mov	r1, r2
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7ff fe7c 	bl	8008ff8 <putc_bfd>
 8009300:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009302:	781b      	ldrb	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f1      	bne.n	80092ec <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8009308:	e005      	b.n	8009316 <f_printf+0x22e>
 800930a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800930e:	2120      	movs	r1, #32
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fe71 	bl	8008ff8 <putc_bfd>
 8009316:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009320:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009324:	429a      	cmp	r2, r3
 8009326:	d8f0      	bhi.n	800930a <f_printf+0x222>
			continue;
 8009328:	e0ec      	b.n	8009504 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800932a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800932c:	1d1a      	adds	r2, r3, #4
 800932e:	67ba      	str	r2, [r7, #120]	; 0x78
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	b2da      	uxtb	r2, r3
 8009334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009338:	4611      	mov	r1, r2
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff fe5c 	bl	8008ff8 <putc_bfd>
 8009340:	e0e0      	b.n	8009504 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 8009342:	2302      	movs	r3, #2
 8009344:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009348:	e014      	b.n	8009374 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800934a:	2308      	movs	r3, #8
 800934c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009350:	e010      	b.n	8009374 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8009352:	230a      	movs	r3, #10
 8009354:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009358:	e00c      	b.n	8009374 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800935a:	2310      	movs	r3, #16
 800935c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8009360:	e008      	b.n	8009374 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 8009362:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8009366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800936a:	4611      	mov	r1, r2
 800936c:	4618      	mov	r0, r3
 800936e:	f7ff fe43 	bl	8008ff8 <putc_bfd>
 8009372:	e0c7      	b.n	8009504 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 8009374:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d004      	beq.n	800938a <f_printf+0x2a2>
 8009380:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009382:	1d1a      	adds	r2, r3, #4
 8009384:	67ba      	str	r2, [r7, #120]	; 0x78
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	e00c      	b.n	80093a4 <f_printf+0x2bc>
 800938a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800938e:	2b44      	cmp	r3, #68	; 0x44
 8009390:	d104      	bne.n	800939c <f_printf+0x2b4>
 8009392:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009394:	1d1a      	adds	r2, r3, #4
 8009396:	67ba      	str	r2, [r7, #120]	; 0x78
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	e003      	b.n	80093a4 <f_printf+0x2bc>
 800939c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800939e:	1d1a      	adds	r2, r3, #4
 80093a0:	67ba      	str	r2, [r7, #120]	; 0x78
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80093a8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80093ac:	2b44      	cmp	r3, #68	; 0x44
 80093ae:	d10e      	bne.n	80093ce <f_printf+0x2e6>
 80093b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	da0a      	bge.n	80093ce <f_printf+0x2e6>
			v = 0 - v;
 80093b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093bc:	425b      	negs	r3, r3
 80093be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 80093c2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80093c6:	f043 0308 	orr.w	r3, r3, #8
 80093ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 80093d4:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 80093d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80093dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80093e0:	fb02 f201 	mul.w	r2, r2, r1
 80093e4:	1a9b      	subs	r3, r3, r2
 80093e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80093ea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80093ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 80093fa:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80093fe:	2b09      	cmp	r3, #9
 8009400:	d90b      	bls.n	800941a <f_printf+0x332>
 8009402:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8009406:	2b78      	cmp	r3, #120	; 0x78
 8009408:	d101      	bne.n	800940e <f_printf+0x326>
 800940a:	2227      	movs	r2, #39	; 0x27
 800940c:	e000      	b.n	8009410 <f_printf+0x328>
 800940e:	2207      	movs	r2, #7
 8009410:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8009414:	4413      	add	r3, r2
 8009416:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800941a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009424:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8009428:	3230      	adds	r2, #48	; 0x30
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8009430:	440b      	add	r3, r1
 8009432:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8009436:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <f_printf+0x35e>
 800943e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009442:	2b1f      	cmp	r3, #31
 8009444:	d9c6      	bls.n	80093d4 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8009446:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800944a:	f003 0308 	and.w	r3, r3, #8
 800944e:	2b00      	cmp	r3, #0
 8009450:	d00a      	beq.n	8009468 <f_printf+0x380>
 8009452:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800945c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8009460:	4413      	add	r3, r2
 8009462:	222d      	movs	r2, #45	; 0x2d
 8009464:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 8009468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800946c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009470:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009474:	f003 0301 	and.w	r3, r3, #1
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <f_printf+0x398>
 800947c:	2330      	movs	r3, #48	; 0x30
 800947e:	e000      	b.n	8009482 <f_printf+0x39a>
 8009480:	2320      	movs	r3, #32
 8009482:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 8009486:	e007      	b.n	8009498 <f_printf+0x3b0>
 8009488:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800948c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009490:	4611      	mov	r1, r2
 8009492:	4618      	mov	r0, r3
 8009494:	f7ff fdb0 	bl	8008ff8 <putc_bfd>
 8009498:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d108      	bne.n	80094b6 <f_printf+0x3ce>
 80094a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d8e8      	bhi.n	8009488 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 80094b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094ba:	3b01      	subs	r3, #1
 80094bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094c0:	f107 020c 	add.w	r2, r7, #12
 80094c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094c8:	4413      	add	r3, r2
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094d0:	4611      	mov	r1, r2
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7ff fd90 	bl	8008ff8 <putc_bfd>
		} while (i);
 80094d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1ea      	bne.n	80094b6 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 80094e0:	e007      	b.n	80094f2 <f_printf+0x40a>
 80094e2:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80094e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80094ea:	4611      	mov	r1, r2
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7ff fd83 	bl	8008ff8 <putc_bfd>
 80094f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009500:	429a      	cmp	r2, r3
 8009502:	d8ee      	bhi.n	80094e2 <f_printf+0x3fa>
		c = *fmt++;
 8009504:	e5fe      	b.n	8009104 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 8009506:	bf00      	nop
 8009508:	e000      	b.n	800950c <f_printf+0x424>
		if (!c) break;
 800950a:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800950c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff fdae 	bl	8009072 <putc_flush>
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	379c      	adds	r7, #156	; 0x9c
 800951c:	46bd      	mov	sp, r7
 800951e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009522:	b003      	add	sp, #12
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop

08009528 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	4613      	mov	r3, r2
 8009534:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009536:	2301      	movs	r3, #1
 8009538:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800953e:	4b1f      	ldr	r3, [pc, #124]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009540:	7a5b      	ldrb	r3, [r3, #9]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	2b00      	cmp	r3, #0
 8009546:	d131      	bne.n	80095ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009548:	4b1c      	ldr	r3, [pc, #112]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 800954a:	7a5b      	ldrb	r3, [r3, #9]
 800954c:	b2db      	uxtb	r3, r3
 800954e:	461a      	mov	r2, r3
 8009550:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009552:	2100      	movs	r1, #0
 8009554:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009556:	4b19      	ldr	r3, [pc, #100]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009558:	7a5b      	ldrb	r3, [r3, #9]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	4a17      	ldr	r2, [pc, #92]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009566:	4b15      	ldr	r3, [pc, #84]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009568:	7a5b      	ldrb	r3, [r3, #9]
 800956a:	b2db      	uxtb	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	4b13      	ldr	r3, [pc, #76]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009570:	4413      	add	r3, r2
 8009572:	79fa      	ldrb	r2, [r7, #7]
 8009574:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009576:	4b11      	ldr	r3, [pc, #68]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009578:	7a5b      	ldrb	r3, [r3, #9]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	1c5a      	adds	r2, r3, #1
 800957e:	b2d1      	uxtb	r1, r2
 8009580:	4a0e      	ldr	r2, [pc, #56]	; (80095bc <FATFS_LinkDriverEx+0x94>)
 8009582:	7251      	strb	r1, [r2, #9]
 8009584:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009586:	7dbb      	ldrb	r3, [r7, #22]
 8009588:	3330      	adds	r3, #48	; 0x30
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	3301      	adds	r3, #1
 8009594:	223a      	movs	r2, #58	; 0x3a
 8009596:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	3302      	adds	r3, #2
 800959c:	222f      	movs	r2, #47	; 0x2f
 800959e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	3303      	adds	r3, #3
 80095a4:	2200      	movs	r2, #0
 80095a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095a8:	2300      	movs	r3, #0
 80095aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	200000c0 	.word	0x200000c0

080095c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095ca:	2200      	movs	r2, #0
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff ffaa 	bl	8009528 <FATFS_LinkDriverEx>
 80095d4:	4603      	mov	r3, r0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
	...

080095e0 <__errno>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	; (80095e8 <__errno+0x8>)
 80095e2:	6818      	ldr	r0, [r3, #0]
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	2000000c 	.word	0x2000000c

080095ec <__libc_init_array>:
 80095ec:	b570      	push	{r4, r5, r6, lr}
 80095ee:	4d0d      	ldr	r5, [pc, #52]	; (8009624 <__libc_init_array+0x38>)
 80095f0:	4c0d      	ldr	r4, [pc, #52]	; (8009628 <__libc_init_array+0x3c>)
 80095f2:	1b64      	subs	r4, r4, r5
 80095f4:	10a4      	asrs	r4, r4, #2
 80095f6:	2600      	movs	r6, #0
 80095f8:	42a6      	cmp	r6, r4
 80095fa:	d109      	bne.n	8009610 <__libc_init_array+0x24>
 80095fc:	4d0b      	ldr	r5, [pc, #44]	; (800962c <__libc_init_array+0x40>)
 80095fe:	4c0c      	ldr	r4, [pc, #48]	; (8009630 <__libc_init_array+0x44>)
 8009600:	f000 fc62 	bl	8009ec8 <_init>
 8009604:	1b64      	subs	r4, r4, r5
 8009606:	10a4      	asrs	r4, r4, #2
 8009608:	2600      	movs	r6, #0
 800960a:	42a6      	cmp	r6, r4
 800960c:	d105      	bne.n	800961a <__libc_init_array+0x2e>
 800960e:	bd70      	pop	{r4, r5, r6, pc}
 8009610:	f855 3b04 	ldr.w	r3, [r5], #4
 8009614:	4798      	blx	r3
 8009616:	3601      	adds	r6, #1
 8009618:	e7ee      	b.n	80095f8 <__libc_init_array+0xc>
 800961a:	f855 3b04 	ldr.w	r3, [r5], #4
 800961e:	4798      	blx	r3
 8009620:	3601      	adds	r6, #1
 8009622:	e7f2      	b.n	800960a <__libc_init_array+0x1e>
 8009624:	0800a088 	.word	0x0800a088
 8009628:	0800a088 	.word	0x0800a088
 800962c:	0800a088 	.word	0x0800a088
 8009630:	0800a08c 	.word	0x0800a08c

08009634 <memset>:
 8009634:	4402      	add	r2, r0
 8009636:	4603      	mov	r3, r0
 8009638:	4293      	cmp	r3, r2
 800963a:	d100      	bne.n	800963e <memset+0xa>
 800963c:	4770      	bx	lr
 800963e:	f803 1b01 	strb.w	r1, [r3], #1
 8009642:	e7f9      	b.n	8009638 <memset+0x4>

08009644 <sniprintf>:
 8009644:	b40c      	push	{r2, r3}
 8009646:	b530      	push	{r4, r5, lr}
 8009648:	4b17      	ldr	r3, [pc, #92]	; (80096a8 <sniprintf+0x64>)
 800964a:	1e0c      	subs	r4, r1, #0
 800964c:	681d      	ldr	r5, [r3, #0]
 800964e:	b09d      	sub	sp, #116	; 0x74
 8009650:	da08      	bge.n	8009664 <sniprintf+0x20>
 8009652:	238b      	movs	r3, #139	; 0x8b
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	b01d      	add	sp, #116	; 0x74
 800965c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009660:	b002      	add	sp, #8
 8009662:	4770      	bx	lr
 8009664:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009668:	f8ad 3014 	strh.w	r3, [sp, #20]
 800966c:	bf14      	ite	ne
 800966e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009672:	4623      	moveq	r3, r4
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	9307      	str	r3, [sp, #28]
 8009678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800967c:	9002      	str	r0, [sp, #8]
 800967e:	9006      	str	r0, [sp, #24]
 8009680:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009684:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009686:	ab21      	add	r3, sp, #132	; 0x84
 8009688:	a902      	add	r1, sp, #8
 800968a:	4628      	mov	r0, r5
 800968c:	9301      	str	r3, [sp, #4]
 800968e:	f000 f869 	bl	8009764 <_svfiprintf_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	bfbc      	itt	lt
 8009696:	238b      	movlt	r3, #139	; 0x8b
 8009698:	602b      	strlt	r3, [r5, #0]
 800969a:	2c00      	cmp	r4, #0
 800969c:	d0dd      	beq.n	800965a <sniprintf+0x16>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	2200      	movs	r2, #0
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	e7d9      	b.n	800965a <sniprintf+0x16>
 80096a6:	bf00      	nop
 80096a8:	2000000c 	.word	0x2000000c

080096ac <__ssputs_r>:
 80096ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	688e      	ldr	r6, [r1, #8]
 80096b2:	429e      	cmp	r6, r3
 80096b4:	4682      	mov	sl, r0
 80096b6:	460c      	mov	r4, r1
 80096b8:	4690      	mov	r8, r2
 80096ba:	461f      	mov	r7, r3
 80096bc:	d838      	bhi.n	8009730 <__ssputs_r+0x84>
 80096be:	898a      	ldrh	r2, [r1, #12]
 80096c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096c4:	d032      	beq.n	800972c <__ssputs_r+0x80>
 80096c6:	6825      	ldr	r5, [r4, #0]
 80096c8:	6909      	ldr	r1, [r1, #16]
 80096ca:	eba5 0901 	sub.w	r9, r5, r1
 80096ce:	6965      	ldr	r5, [r4, #20]
 80096d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096d8:	3301      	adds	r3, #1
 80096da:	444b      	add	r3, r9
 80096dc:	106d      	asrs	r5, r5, #1
 80096de:	429d      	cmp	r5, r3
 80096e0:	bf38      	it	cc
 80096e2:	461d      	movcc	r5, r3
 80096e4:	0553      	lsls	r3, r2, #21
 80096e6:	d531      	bpl.n	800974c <__ssputs_r+0xa0>
 80096e8:	4629      	mov	r1, r5
 80096ea:	f000 fb47 	bl	8009d7c <_malloc_r>
 80096ee:	4606      	mov	r6, r0
 80096f0:	b950      	cbnz	r0, 8009708 <__ssputs_r+0x5c>
 80096f2:	230c      	movs	r3, #12
 80096f4:	f8ca 3000 	str.w	r3, [sl]
 80096f8:	89a3      	ldrh	r3, [r4, #12]
 80096fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fe:	81a3      	strh	r3, [r4, #12]
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009708:	6921      	ldr	r1, [r4, #16]
 800970a:	464a      	mov	r2, r9
 800970c:	f000 fabe 	bl	8009c8c <memcpy>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800971a:	81a3      	strh	r3, [r4, #12]
 800971c:	6126      	str	r6, [r4, #16]
 800971e:	6165      	str	r5, [r4, #20]
 8009720:	444e      	add	r6, r9
 8009722:	eba5 0509 	sub.w	r5, r5, r9
 8009726:	6026      	str	r6, [r4, #0]
 8009728:	60a5      	str	r5, [r4, #8]
 800972a:	463e      	mov	r6, r7
 800972c:	42be      	cmp	r6, r7
 800972e:	d900      	bls.n	8009732 <__ssputs_r+0x86>
 8009730:	463e      	mov	r6, r7
 8009732:	4632      	mov	r2, r6
 8009734:	6820      	ldr	r0, [r4, #0]
 8009736:	4641      	mov	r1, r8
 8009738:	f000 fab6 	bl	8009ca8 <memmove>
 800973c:	68a3      	ldr	r3, [r4, #8]
 800973e:	6822      	ldr	r2, [r4, #0]
 8009740:	1b9b      	subs	r3, r3, r6
 8009742:	4432      	add	r2, r6
 8009744:	60a3      	str	r3, [r4, #8]
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	2000      	movs	r0, #0
 800974a:	e7db      	b.n	8009704 <__ssputs_r+0x58>
 800974c:	462a      	mov	r2, r5
 800974e:	f000 fb6f 	bl	8009e30 <_realloc_r>
 8009752:	4606      	mov	r6, r0
 8009754:	2800      	cmp	r0, #0
 8009756:	d1e1      	bne.n	800971c <__ssputs_r+0x70>
 8009758:	6921      	ldr	r1, [r4, #16]
 800975a:	4650      	mov	r0, sl
 800975c:	f000 fabe 	bl	8009cdc <_free_r>
 8009760:	e7c7      	b.n	80096f2 <__ssputs_r+0x46>
	...

08009764 <_svfiprintf_r>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	4698      	mov	r8, r3
 800976a:	898b      	ldrh	r3, [r1, #12]
 800976c:	061b      	lsls	r3, r3, #24
 800976e:	b09d      	sub	sp, #116	; 0x74
 8009770:	4607      	mov	r7, r0
 8009772:	460d      	mov	r5, r1
 8009774:	4614      	mov	r4, r2
 8009776:	d50e      	bpl.n	8009796 <_svfiprintf_r+0x32>
 8009778:	690b      	ldr	r3, [r1, #16]
 800977a:	b963      	cbnz	r3, 8009796 <_svfiprintf_r+0x32>
 800977c:	2140      	movs	r1, #64	; 0x40
 800977e:	f000 fafd 	bl	8009d7c <_malloc_r>
 8009782:	6028      	str	r0, [r5, #0]
 8009784:	6128      	str	r0, [r5, #16]
 8009786:	b920      	cbnz	r0, 8009792 <_svfiprintf_r+0x2e>
 8009788:	230c      	movs	r3, #12
 800978a:	603b      	str	r3, [r7, #0]
 800978c:	f04f 30ff 	mov.w	r0, #4294967295
 8009790:	e0d1      	b.n	8009936 <_svfiprintf_r+0x1d2>
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	616b      	str	r3, [r5, #20]
 8009796:	2300      	movs	r3, #0
 8009798:	9309      	str	r3, [sp, #36]	; 0x24
 800979a:	2320      	movs	r3, #32
 800979c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80097a4:	2330      	movs	r3, #48	; 0x30
 80097a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009950 <_svfiprintf_r+0x1ec>
 80097aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097ae:	f04f 0901 	mov.w	r9, #1
 80097b2:	4623      	mov	r3, r4
 80097b4:	469a      	mov	sl, r3
 80097b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ba:	b10a      	cbz	r2, 80097c0 <_svfiprintf_r+0x5c>
 80097bc:	2a25      	cmp	r2, #37	; 0x25
 80097be:	d1f9      	bne.n	80097b4 <_svfiprintf_r+0x50>
 80097c0:	ebba 0b04 	subs.w	fp, sl, r4
 80097c4:	d00b      	beq.n	80097de <_svfiprintf_r+0x7a>
 80097c6:	465b      	mov	r3, fp
 80097c8:	4622      	mov	r2, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	4638      	mov	r0, r7
 80097ce:	f7ff ff6d 	bl	80096ac <__ssputs_r>
 80097d2:	3001      	adds	r0, #1
 80097d4:	f000 80aa 	beq.w	800992c <_svfiprintf_r+0x1c8>
 80097d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097da:	445a      	add	r2, fp
 80097dc:	9209      	str	r2, [sp, #36]	; 0x24
 80097de:	f89a 3000 	ldrb.w	r3, [sl]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f000 80a2 	beq.w	800992c <_svfiprintf_r+0x1c8>
 80097e8:	2300      	movs	r3, #0
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097f2:	f10a 0a01 	add.w	sl, sl, #1
 80097f6:	9304      	str	r3, [sp, #16]
 80097f8:	9307      	str	r3, [sp, #28]
 80097fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009800:	4654      	mov	r4, sl
 8009802:	2205      	movs	r2, #5
 8009804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009808:	4851      	ldr	r0, [pc, #324]	; (8009950 <_svfiprintf_r+0x1ec>)
 800980a:	f7f6 fd01 	bl	8000210 <memchr>
 800980e:	9a04      	ldr	r2, [sp, #16]
 8009810:	b9d8      	cbnz	r0, 800984a <_svfiprintf_r+0xe6>
 8009812:	06d0      	lsls	r0, r2, #27
 8009814:	bf44      	itt	mi
 8009816:	2320      	movmi	r3, #32
 8009818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800981c:	0711      	lsls	r1, r2, #28
 800981e:	bf44      	itt	mi
 8009820:	232b      	movmi	r3, #43	; 0x2b
 8009822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009826:	f89a 3000 	ldrb.w	r3, [sl]
 800982a:	2b2a      	cmp	r3, #42	; 0x2a
 800982c:	d015      	beq.n	800985a <_svfiprintf_r+0xf6>
 800982e:	9a07      	ldr	r2, [sp, #28]
 8009830:	4654      	mov	r4, sl
 8009832:	2000      	movs	r0, #0
 8009834:	f04f 0c0a 	mov.w	ip, #10
 8009838:	4621      	mov	r1, r4
 800983a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800983e:	3b30      	subs	r3, #48	; 0x30
 8009840:	2b09      	cmp	r3, #9
 8009842:	d94e      	bls.n	80098e2 <_svfiprintf_r+0x17e>
 8009844:	b1b0      	cbz	r0, 8009874 <_svfiprintf_r+0x110>
 8009846:	9207      	str	r2, [sp, #28]
 8009848:	e014      	b.n	8009874 <_svfiprintf_r+0x110>
 800984a:	eba0 0308 	sub.w	r3, r0, r8
 800984e:	fa09 f303 	lsl.w	r3, r9, r3
 8009852:	4313      	orrs	r3, r2
 8009854:	9304      	str	r3, [sp, #16]
 8009856:	46a2      	mov	sl, r4
 8009858:	e7d2      	b.n	8009800 <_svfiprintf_r+0x9c>
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	1d19      	adds	r1, r3, #4
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	9103      	str	r1, [sp, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	bfbb      	ittet	lt
 8009866:	425b      	neglt	r3, r3
 8009868:	f042 0202 	orrlt.w	r2, r2, #2
 800986c:	9307      	strge	r3, [sp, #28]
 800986e:	9307      	strlt	r3, [sp, #28]
 8009870:	bfb8      	it	lt
 8009872:	9204      	strlt	r2, [sp, #16]
 8009874:	7823      	ldrb	r3, [r4, #0]
 8009876:	2b2e      	cmp	r3, #46	; 0x2e
 8009878:	d10c      	bne.n	8009894 <_svfiprintf_r+0x130>
 800987a:	7863      	ldrb	r3, [r4, #1]
 800987c:	2b2a      	cmp	r3, #42	; 0x2a
 800987e:	d135      	bne.n	80098ec <_svfiprintf_r+0x188>
 8009880:	9b03      	ldr	r3, [sp, #12]
 8009882:	1d1a      	adds	r2, r3, #4
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	9203      	str	r2, [sp, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	bfb8      	it	lt
 800988c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009890:	3402      	adds	r4, #2
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009960 <_svfiprintf_r+0x1fc>
 8009898:	7821      	ldrb	r1, [r4, #0]
 800989a:	2203      	movs	r2, #3
 800989c:	4650      	mov	r0, sl
 800989e:	f7f6 fcb7 	bl	8000210 <memchr>
 80098a2:	b140      	cbz	r0, 80098b6 <_svfiprintf_r+0x152>
 80098a4:	2340      	movs	r3, #64	; 0x40
 80098a6:	eba0 000a 	sub.w	r0, r0, sl
 80098aa:	fa03 f000 	lsl.w	r0, r3, r0
 80098ae:	9b04      	ldr	r3, [sp, #16]
 80098b0:	4303      	orrs	r3, r0
 80098b2:	3401      	adds	r4, #1
 80098b4:	9304      	str	r3, [sp, #16]
 80098b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ba:	4826      	ldr	r0, [pc, #152]	; (8009954 <_svfiprintf_r+0x1f0>)
 80098bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098c0:	2206      	movs	r2, #6
 80098c2:	f7f6 fca5 	bl	8000210 <memchr>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	d038      	beq.n	800993c <_svfiprintf_r+0x1d8>
 80098ca:	4b23      	ldr	r3, [pc, #140]	; (8009958 <_svfiprintf_r+0x1f4>)
 80098cc:	bb1b      	cbnz	r3, 8009916 <_svfiprintf_r+0x1b2>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	3307      	adds	r3, #7
 80098d2:	f023 0307 	bic.w	r3, r3, #7
 80098d6:	3308      	adds	r3, #8
 80098d8:	9303      	str	r3, [sp, #12]
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	4433      	add	r3, r6
 80098de:	9309      	str	r3, [sp, #36]	; 0x24
 80098e0:	e767      	b.n	80097b2 <_svfiprintf_r+0x4e>
 80098e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80098e6:	460c      	mov	r4, r1
 80098e8:	2001      	movs	r0, #1
 80098ea:	e7a5      	b.n	8009838 <_svfiprintf_r+0xd4>
 80098ec:	2300      	movs	r3, #0
 80098ee:	3401      	adds	r4, #1
 80098f0:	9305      	str	r3, [sp, #20]
 80098f2:	4619      	mov	r1, r3
 80098f4:	f04f 0c0a 	mov.w	ip, #10
 80098f8:	4620      	mov	r0, r4
 80098fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098fe:	3a30      	subs	r2, #48	; 0x30
 8009900:	2a09      	cmp	r2, #9
 8009902:	d903      	bls.n	800990c <_svfiprintf_r+0x1a8>
 8009904:	2b00      	cmp	r3, #0
 8009906:	d0c5      	beq.n	8009894 <_svfiprintf_r+0x130>
 8009908:	9105      	str	r1, [sp, #20]
 800990a:	e7c3      	b.n	8009894 <_svfiprintf_r+0x130>
 800990c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009910:	4604      	mov	r4, r0
 8009912:	2301      	movs	r3, #1
 8009914:	e7f0      	b.n	80098f8 <_svfiprintf_r+0x194>
 8009916:	ab03      	add	r3, sp, #12
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	462a      	mov	r2, r5
 800991c:	4b0f      	ldr	r3, [pc, #60]	; (800995c <_svfiprintf_r+0x1f8>)
 800991e:	a904      	add	r1, sp, #16
 8009920:	4638      	mov	r0, r7
 8009922:	f3af 8000 	nop.w
 8009926:	1c42      	adds	r2, r0, #1
 8009928:	4606      	mov	r6, r0
 800992a:	d1d6      	bne.n	80098da <_svfiprintf_r+0x176>
 800992c:	89ab      	ldrh	r3, [r5, #12]
 800992e:	065b      	lsls	r3, r3, #25
 8009930:	f53f af2c 	bmi.w	800978c <_svfiprintf_r+0x28>
 8009934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009936:	b01d      	add	sp, #116	; 0x74
 8009938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	462a      	mov	r2, r5
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <_svfiprintf_r+0x1f8>)
 8009944:	a904      	add	r1, sp, #16
 8009946:	4638      	mov	r0, r7
 8009948:	f000 f87a 	bl	8009a40 <_printf_i>
 800994c:	e7eb      	b.n	8009926 <_svfiprintf_r+0x1c2>
 800994e:	bf00      	nop
 8009950:	0800a04c 	.word	0x0800a04c
 8009954:	0800a056 	.word	0x0800a056
 8009958:	00000000 	.word	0x00000000
 800995c:	080096ad 	.word	0x080096ad
 8009960:	0800a052 	.word	0x0800a052

08009964 <_printf_common>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4616      	mov	r6, r2
 800996a:	4699      	mov	r9, r3
 800996c:	688a      	ldr	r2, [r1, #8]
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	bfb8      	it	lt
 8009978:	4613      	movlt	r3, r2
 800997a:	6033      	str	r3, [r6, #0]
 800997c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009980:	4607      	mov	r7, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b10a      	cbz	r2, 800998a <_printf_common+0x26>
 8009986:	3301      	adds	r3, #1
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	0699      	lsls	r1, r3, #26
 800998e:	bf42      	ittt	mi
 8009990:	6833      	ldrmi	r3, [r6, #0]
 8009992:	3302      	addmi	r3, #2
 8009994:	6033      	strmi	r3, [r6, #0]
 8009996:	6825      	ldr	r5, [r4, #0]
 8009998:	f015 0506 	ands.w	r5, r5, #6
 800999c:	d106      	bne.n	80099ac <_printf_common+0x48>
 800999e:	f104 0a19 	add.w	sl, r4, #25
 80099a2:	68e3      	ldr	r3, [r4, #12]
 80099a4:	6832      	ldr	r2, [r6, #0]
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	dc26      	bgt.n	80099fa <_printf_common+0x96>
 80099ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b0:	1e13      	subs	r3, r2, #0
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	bf18      	it	ne
 80099b6:	2301      	movne	r3, #1
 80099b8:	0692      	lsls	r2, r2, #26
 80099ba:	d42b      	bmi.n	8009a14 <_printf_common+0xb0>
 80099bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c0:	4649      	mov	r1, r9
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c0      	blx	r8
 80099c6:	3001      	adds	r0, #1
 80099c8:	d01e      	beq.n	8009a08 <_printf_common+0xa4>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	68e5      	ldr	r5, [r4, #12]
 80099ce:	6832      	ldr	r2, [r6, #0]
 80099d0:	f003 0306 	and.w	r3, r3, #6
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	bf08      	it	eq
 80099d8:	1aad      	subeq	r5, r5, r2
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	6922      	ldr	r2, [r4, #16]
 80099de:	bf0c      	ite	eq
 80099e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e4:	2500      	movne	r5, #0
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bfc4      	itt	gt
 80099ea:	1a9b      	subgt	r3, r3, r2
 80099ec:	18ed      	addgt	r5, r5, r3
 80099ee:	2600      	movs	r6, #0
 80099f0:	341a      	adds	r4, #26
 80099f2:	42b5      	cmp	r5, r6
 80099f4:	d11a      	bne.n	8009a2c <_printf_common+0xc8>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e008      	b.n	8009a0c <_printf_common+0xa8>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4652      	mov	r2, sl
 80099fe:	4649      	mov	r1, r9
 8009a00:	4638      	mov	r0, r7
 8009a02:	47c0      	blx	r8
 8009a04:	3001      	adds	r0, #1
 8009a06:	d103      	bne.n	8009a10 <_printf_common+0xac>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	3501      	adds	r5, #1
 8009a12:	e7c6      	b.n	80099a2 <_printf_common+0x3e>
 8009a14:	18e1      	adds	r1, r4, r3
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	2030      	movs	r0, #48	; 0x30
 8009a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a1e:	4422      	add	r2, r4
 8009a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a28:	3302      	adds	r3, #2
 8009a2a:	e7c7      	b.n	80099bc <_printf_common+0x58>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4649      	mov	r1, r9
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	3001      	adds	r0, #1
 8009a38:	d0e6      	beq.n	8009a08 <_printf_common+0xa4>
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7d9      	b.n	80099f2 <_printf_common+0x8e>
	...

08009a40 <_printf_i>:
 8009a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	4691      	mov	r9, r2
 8009a48:	7e27      	ldrb	r7, [r4, #24]
 8009a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a4c:	2f78      	cmp	r7, #120	; 0x78
 8009a4e:	4680      	mov	r8, r0
 8009a50:	469a      	mov	sl, r3
 8009a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a56:	d807      	bhi.n	8009a68 <_printf_i+0x28>
 8009a58:	2f62      	cmp	r7, #98	; 0x62
 8009a5a:	d80a      	bhi.n	8009a72 <_printf_i+0x32>
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	f000 80d8 	beq.w	8009c12 <_printf_i+0x1d2>
 8009a62:	2f58      	cmp	r7, #88	; 0x58
 8009a64:	f000 80a3 	beq.w	8009bae <_printf_i+0x16e>
 8009a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a70:	e03a      	b.n	8009ae8 <_printf_i+0xa8>
 8009a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a76:	2b15      	cmp	r3, #21
 8009a78:	d8f6      	bhi.n	8009a68 <_printf_i+0x28>
 8009a7a:	a001      	add	r0, pc, #4	; (adr r0, 8009a80 <_printf_i+0x40>)
 8009a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a80:	08009ad9 	.word	0x08009ad9
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009a69 	.word	0x08009a69
 8009a8c:	08009a69 	.word	0x08009a69
 8009a90:	08009a69 	.word	0x08009a69
 8009a94:	08009a69 	.word	0x08009a69
 8009a98:	08009aed 	.word	0x08009aed
 8009a9c:	08009a69 	.word	0x08009a69
 8009aa0:	08009a69 	.word	0x08009a69
 8009aa4:	08009a69 	.word	0x08009a69
 8009aa8:	08009a69 	.word	0x08009a69
 8009aac:	08009bf9 	.word	0x08009bf9
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009bdb 	.word	0x08009bdb
 8009ab8:	08009a69 	.word	0x08009a69
 8009abc:	08009a69 	.word	0x08009a69
 8009ac0:	08009c1b 	.word	0x08009c1b
 8009ac4:	08009a69 	.word	0x08009a69
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009a69 	.word	0x08009a69
 8009ad0:	08009a69 	.word	0x08009a69
 8009ad4:	08009be3 	.word	0x08009be3
 8009ad8:	680b      	ldr	r3, [r1, #0]
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	600a      	str	r2, [r1, #0]
 8009ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e0a3      	b.n	8009c34 <_printf_i+0x1f4>
 8009aec:	6825      	ldr	r5, [r4, #0]
 8009aee:	6808      	ldr	r0, [r1, #0]
 8009af0:	062e      	lsls	r6, r5, #24
 8009af2:	f100 0304 	add.w	r3, r0, #4
 8009af6:	d50a      	bpl.n	8009b0e <_printf_i+0xce>
 8009af8:	6805      	ldr	r5, [r0, #0]
 8009afa:	600b      	str	r3, [r1, #0]
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	da03      	bge.n	8009b08 <_printf_i+0xc8>
 8009b00:	232d      	movs	r3, #45	; 0x2d
 8009b02:	426d      	negs	r5, r5
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	485e      	ldr	r0, [pc, #376]	; (8009c84 <_printf_i+0x244>)
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	e019      	b.n	8009b42 <_printf_i+0x102>
 8009b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b12:	6805      	ldr	r5, [r0, #0]
 8009b14:	600b      	str	r3, [r1, #0]
 8009b16:	bf18      	it	ne
 8009b18:	b22d      	sxthne	r5, r5
 8009b1a:	e7ef      	b.n	8009afc <_printf_i+0xbc>
 8009b1c:	680b      	ldr	r3, [r1, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	1d18      	adds	r0, r3, #4
 8009b22:	6008      	str	r0, [r1, #0]
 8009b24:	0628      	lsls	r0, r5, #24
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0xec>
 8009b28:	681d      	ldr	r5, [r3, #0]
 8009b2a:	e002      	b.n	8009b32 <_printf_i+0xf2>
 8009b2c:	0669      	lsls	r1, r5, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0xe8>
 8009b30:	881d      	ldrh	r5, [r3, #0]
 8009b32:	4854      	ldr	r0, [pc, #336]	; (8009c84 <_printf_i+0x244>)
 8009b34:	2f6f      	cmp	r7, #111	; 0x6f
 8009b36:	bf0c      	ite	eq
 8009b38:	2308      	moveq	r3, #8
 8009b3a:	230a      	movne	r3, #10
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b42:	6866      	ldr	r6, [r4, #4]
 8009b44:	60a6      	str	r6, [r4, #8]
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	bfa2      	ittt	ge
 8009b4a:	6821      	ldrge	r1, [r4, #0]
 8009b4c:	f021 0104 	bicge.w	r1, r1, #4
 8009b50:	6021      	strge	r1, [r4, #0]
 8009b52:	b90d      	cbnz	r5, 8009b58 <_printf_i+0x118>
 8009b54:	2e00      	cmp	r6, #0
 8009b56:	d04d      	beq.n	8009bf4 <_printf_i+0x1b4>
 8009b58:	4616      	mov	r6, r2
 8009b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009b62:	5dc7      	ldrb	r7, [r0, r7]
 8009b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b68:	462f      	mov	r7, r5
 8009b6a:	42bb      	cmp	r3, r7
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	d9f4      	bls.n	8009b5a <_printf_i+0x11a>
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d10b      	bne.n	8009b8c <_printf_i+0x14c>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07df      	lsls	r7, r3, #31
 8009b78:	d508      	bpl.n	8009b8c <_printf_i+0x14c>
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	bfde      	ittt	le
 8009b82:	2330      	movle	r3, #48	; 0x30
 8009b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b8c:	1b92      	subs	r2, r2, r6
 8009b8e:	6122      	str	r2, [r4, #16]
 8009b90:	f8cd a000 	str.w	sl, [sp]
 8009b94:	464b      	mov	r3, r9
 8009b96:	aa03      	add	r2, sp, #12
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	f7ff fee2 	bl	8009964 <_printf_common>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d14c      	bne.n	8009c3e <_printf_i+0x1fe>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b004      	add	sp, #16
 8009baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bae:	4835      	ldr	r0, [pc, #212]	; (8009c84 <_printf_i+0x244>)
 8009bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	680e      	ldr	r6, [r1, #0]
 8009bb8:	061f      	lsls	r7, r3, #24
 8009bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bbe:	600e      	str	r6, [r1, #0]
 8009bc0:	d514      	bpl.n	8009bec <_printf_i+0x1ac>
 8009bc2:	07d9      	lsls	r1, r3, #31
 8009bc4:	bf44      	itt	mi
 8009bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bca:	6023      	strmi	r3, [r4, #0]
 8009bcc:	b91d      	cbnz	r5, 8009bd6 <_printf_i+0x196>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f023 0320 	bic.w	r3, r3, #32
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	e7b0      	b.n	8009b3c <_printf_i+0xfc>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	f043 0320 	orr.w	r3, r3, #32
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	2378      	movs	r3, #120	; 0x78
 8009be4:	4828      	ldr	r0, [pc, #160]	; (8009c88 <_printf_i+0x248>)
 8009be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bea:	e7e3      	b.n	8009bb4 <_printf_i+0x174>
 8009bec:	065e      	lsls	r6, r3, #25
 8009bee:	bf48      	it	mi
 8009bf0:	b2ad      	uxthmi	r5, r5
 8009bf2:	e7e6      	b.n	8009bc2 <_printf_i+0x182>
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	e7bb      	b.n	8009b70 <_printf_i+0x130>
 8009bf8:	680b      	ldr	r3, [r1, #0]
 8009bfa:	6826      	ldr	r6, [r4, #0]
 8009bfc:	6960      	ldr	r0, [r4, #20]
 8009bfe:	1d1d      	adds	r5, r3, #4
 8009c00:	600d      	str	r5, [r1, #0]
 8009c02:	0635      	lsls	r5, r6, #24
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	d501      	bpl.n	8009c0c <_printf_i+0x1cc>
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	e002      	b.n	8009c12 <_printf_i+0x1d2>
 8009c0c:	0671      	lsls	r1, r6, #25
 8009c0e:	d5fb      	bpl.n	8009c08 <_printf_i+0x1c8>
 8009c10:	8018      	strh	r0, [r3, #0]
 8009c12:	2300      	movs	r3, #0
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	4616      	mov	r6, r2
 8009c18:	e7ba      	b.n	8009b90 <_printf_i+0x150>
 8009c1a:	680b      	ldr	r3, [r1, #0]
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	600a      	str	r2, [r1, #0]
 8009c20:	681e      	ldr	r6, [r3, #0]
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	2100      	movs	r1, #0
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7f6 faf2 	bl	8000210 <memchr>
 8009c2c:	b108      	cbz	r0, 8009c32 <_printf_i+0x1f2>
 8009c2e:	1b80      	subs	r0, r0, r6
 8009c30:	6060      	str	r0, [r4, #4]
 8009c32:	6863      	ldr	r3, [r4, #4]
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	2300      	movs	r3, #0
 8009c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3c:	e7a8      	b.n	8009b90 <_printf_i+0x150>
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	4632      	mov	r2, r6
 8009c42:	4649      	mov	r1, r9
 8009c44:	4640      	mov	r0, r8
 8009c46:	47d0      	blx	sl
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d0ab      	beq.n	8009ba4 <_printf_i+0x164>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	079b      	lsls	r3, r3, #30
 8009c50:	d413      	bmi.n	8009c7a <_printf_i+0x23a>
 8009c52:	68e0      	ldr	r0, [r4, #12]
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	4298      	cmp	r0, r3
 8009c58:	bfb8      	it	lt
 8009c5a:	4618      	movlt	r0, r3
 8009c5c:	e7a4      	b.n	8009ba8 <_printf_i+0x168>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4632      	mov	r2, r6
 8009c62:	4649      	mov	r1, r9
 8009c64:	4640      	mov	r0, r8
 8009c66:	47d0      	blx	sl
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d09b      	beq.n	8009ba4 <_printf_i+0x164>
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	68e3      	ldr	r3, [r4, #12]
 8009c70:	9903      	ldr	r1, [sp, #12]
 8009c72:	1a5b      	subs	r3, r3, r1
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	dcf2      	bgt.n	8009c5e <_printf_i+0x21e>
 8009c78:	e7eb      	b.n	8009c52 <_printf_i+0x212>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	f104 0619 	add.w	r6, r4, #25
 8009c80:	e7f5      	b.n	8009c6e <_printf_i+0x22e>
 8009c82:	bf00      	nop
 8009c84:	0800a05d 	.word	0x0800a05d
 8009c88:	0800a06e 	.word	0x0800a06e

08009c8c <memcpy>:
 8009c8c:	440a      	add	r2, r1
 8009c8e:	4291      	cmp	r1, r2
 8009c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c94:	d100      	bne.n	8009c98 <memcpy+0xc>
 8009c96:	4770      	bx	lr
 8009c98:	b510      	push	{r4, lr}
 8009c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ca2:	4291      	cmp	r1, r2
 8009ca4:	d1f9      	bne.n	8009c9a <memcpy+0xe>
 8009ca6:	bd10      	pop	{r4, pc}

08009ca8 <memmove>:
 8009ca8:	4288      	cmp	r0, r1
 8009caa:	b510      	push	{r4, lr}
 8009cac:	eb01 0402 	add.w	r4, r1, r2
 8009cb0:	d902      	bls.n	8009cb8 <memmove+0x10>
 8009cb2:	4284      	cmp	r4, r0
 8009cb4:	4623      	mov	r3, r4
 8009cb6:	d807      	bhi.n	8009cc8 <memmove+0x20>
 8009cb8:	1e43      	subs	r3, r0, #1
 8009cba:	42a1      	cmp	r1, r4
 8009cbc:	d008      	beq.n	8009cd0 <memmove+0x28>
 8009cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cc6:	e7f8      	b.n	8009cba <memmove+0x12>
 8009cc8:	4402      	add	r2, r0
 8009cca:	4601      	mov	r1, r0
 8009ccc:	428a      	cmp	r2, r1
 8009cce:	d100      	bne.n	8009cd2 <memmove+0x2a>
 8009cd0:	bd10      	pop	{r4, pc}
 8009cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cda:	e7f7      	b.n	8009ccc <memmove+0x24>

08009cdc <_free_r>:
 8009cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cde:	2900      	cmp	r1, #0
 8009ce0:	d048      	beq.n	8009d74 <_free_r+0x98>
 8009ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ce6:	9001      	str	r0, [sp, #4]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f1a1 0404 	sub.w	r4, r1, #4
 8009cee:	bfb8      	it	lt
 8009cf0:	18e4      	addlt	r4, r4, r3
 8009cf2:	f000 f8d3 	bl	8009e9c <__malloc_lock>
 8009cf6:	4a20      	ldr	r2, [pc, #128]	; (8009d78 <_free_r+0x9c>)
 8009cf8:	9801      	ldr	r0, [sp, #4]
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	b933      	cbnz	r3, 8009d0e <_free_r+0x32>
 8009d00:	6063      	str	r3, [r4, #4]
 8009d02:	6014      	str	r4, [r2, #0]
 8009d04:	b003      	add	sp, #12
 8009d06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d0a:	f000 b8cd 	b.w	8009ea8 <__malloc_unlock>
 8009d0e:	42a3      	cmp	r3, r4
 8009d10:	d90b      	bls.n	8009d2a <_free_r+0x4e>
 8009d12:	6821      	ldr	r1, [r4, #0]
 8009d14:	1862      	adds	r2, r4, r1
 8009d16:	4293      	cmp	r3, r2
 8009d18:	bf04      	itt	eq
 8009d1a:	681a      	ldreq	r2, [r3, #0]
 8009d1c:	685b      	ldreq	r3, [r3, #4]
 8009d1e:	6063      	str	r3, [r4, #4]
 8009d20:	bf04      	itt	eq
 8009d22:	1852      	addeq	r2, r2, r1
 8009d24:	6022      	streq	r2, [r4, #0]
 8009d26:	602c      	str	r4, [r5, #0]
 8009d28:	e7ec      	b.n	8009d04 <_free_r+0x28>
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	b10b      	cbz	r3, 8009d34 <_free_r+0x58>
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d9fa      	bls.n	8009d2a <_free_r+0x4e>
 8009d34:	6811      	ldr	r1, [r2, #0]
 8009d36:	1855      	adds	r5, r2, r1
 8009d38:	42a5      	cmp	r5, r4
 8009d3a:	d10b      	bne.n	8009d54 <_free_r+0x78>
 8009d3c:	6824      	ldr	r4, [r4, #0]
 8009d3e:	4421      	add	r1, r4
 8009d40:	1854      	adds	r4, r2, r1
 8009d42:	42a3      	cmp	r3, r4
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	d1dd      	bne.n	8009d04 <_free_r+0x28>
 8009d48:	681c      	ldr	r4, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	6053      	str	r3, [r2, #4]
 8009d4e:	4421      	add	r1, r4
 8009d50:	6011      	str	r1, [r2, #0]
 8009d52:	e7d7      	b.n	8009d04 <_free_r+0x28>
 8009d54:	d902      	bls.n	8009d5c <_free_r+0x80>
 8009d56:	230c      	movs	r3, #12
 8009d58:	6003      	str	r3, [r0, #0]
 8009d5a:	e7d3      	b.n	8009d04 <_free_r+0x28>
 8009d5c:	6825      	ldr	r5, [r4, #0]
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf04      	itt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	bf04      	itt	eq
 8009d6c:	1949      	addeq	r1, r1, r5
 8009d6e:	6021      	streq	r1, [r4, #0]
 8009d70:	6054      	str	r4, [r2, #4]
 8009d72:	e7c7      	b.n	8009d04 <_free_r+0x28>
 8009d74:	b003      	add	sp, #12
 8009d76:	bd30      	pop	{r4, r5, pc}
 8009d78:	200000cc 	.word	0x200000cc

08009d7c <_malloc_r>:
 8009d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d7e:	1ccd      	adds	r5, r1, #3
 8009d80:	f025 0503 	bic.w	r5, r5, #3
 8009d84:	3508      	adds	r5, #8
 8009d86:	2d0c      	cmp	r5, #12
 8009d88:	bf38      	it	cc
 8009d8a:	250c      	movcc	r5, #12
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	4606      	mov	r6, r0
 8009d90:	db01      	blt.n	8009d96 <_malloc_r+0x1a>
 8009d92:	42a9      	cmp	r1, r5
 8009d94:	d903      	bls.n	8009d9e <_malloc_r+0x22>
 8009d96:	230c      	movs	r3, #12
 8009d98:	6033      	str	r3, [r6, #0]
 8009d9a:	2000      	movs	r0, #0
 8009d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9e:	f000 f87d 	bl	8009e9c <__malloc_lock>
 8009da2:	4921      	ldr	r1, [pc, #132]	; (8009e28 <_malloc_r+0xac>)
 8009da4:	680a      	ldr	r2, [r1, #0]
 8009da6:	4614      	mov	r4, r2
 8009da8:	b99c      	cbnz	r4, 8009dd2 <_malloc_r+0x56>
 8009daa:	4f20      	ldr	r7, [pc, #128]	; (8009e2c <_malloc_r+0xb0>)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	b923      	cbnz	r3, 8009dba <_malloc_r+0x3e>
 8009db0:	4621      	mov	r1, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f000 f862 	bl	8009e7c <_sbrk_r>
 8009db8:	6038      	str	r0, [r7, #0]
 8009dba:	4629      	mov	r1, r5
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	f000 f85d 	bl	8009e7c <_sbrk_r>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d123      	bne.n	8009e0e <_malloc_r+0x92>
 8009dc6:	230c      	movs	r3, #12
 8009dc8:	6033      	str	r3, [r6, #0]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f86c 	bl	8009ea8 <__malloc_unlock>
 8009dd0:	e7e3      	b.n	8009d9a <_malloc_r+0x1e>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	1b5b      	subs	r3, r3, r5
 8009dd6:	d417      	bmi.n	8009e08 <_malloc_r+0x8c>
 8009dd8:	2b0b      	cmp	r3, #11
 8009dda:	d903      	bls.n	8009de4 <_malloc_r+0x68>
 8009ddc:	6023      	str	r3, [r4, #0]
 8009dde:	441c      	add	r4, r3
 8009de0:	6025      	str	r5, [r4, #0]
 8009de2:	e004      	b.n	8009dee <_malloc_r+0x72>
 8009de4:	6863      	ldr	r3, [r4, #4]
 8009de6:	42a2      	cmp	r2, r4
 8009de8:	bf0c      	ite	eq
 8009dea:	600b      	streq	r3, [r1, #0]
 8009dec:	6053      	strne	r3, [r2, #4]
 8009dee:	4630      	mov	r0, r6
 8009df0:	f000 f85a 	bl	8009ea8 <__malloc_unlock>
 8009df4:	f104 000b 	add.w	r0, r4, #11
 8009df8:	1d23      	adds	r3, r4, #4
 8009dfa:	f020 0007 	bic.w	r0, r0, #7
 8009dfe:	1ac2      	subs	r2, r0, r3
 8009e00:	d0cc      	beq.n	8009d9c <_malloc_r+0x20>
 8009e02:	1a1b      	subs	r3, r3, r0
 8009e04:	50a3      	str	r3, [r4, r2]
 8009e06:	e7c9      	b.n	8009d9c <_malloc_r+0x20>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	6864      	ldr	r4, [r4, #4]
 8009e0c:	e7cc      	b.n	8009da8 <_malloc_r+0x2c>
 8009e0e:	1cc4      	adds	r4, r0, #3
 8009e10:	f024 0403 	bic.w	r4, r4, #3
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d0e3      	beq.n	8009de0 <_malloc_r+0x64>
 8009e18:	1a21      	subs	r1, r4, r0
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f000 f82e 	bl	8009e7c <_sbrk_r>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d1dd      	bne.n	8009de0 <_malloc_r+0x64>
 8009e24:	e7cf      	b.n	8009dc6 <_malloc_r+0x4a>
 8009e26:	bf00      	nop
 8009e28:	200000cc 	.word	0x200000cc
 8009e2c:	200000d0 	.word	0x200000d0

08009e30 <_realloc_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	4607      	mov	r7, r0
 8009e34:	4614      	mov	r4, r2
 8009e36:	460e      	mov	r6, r1
 8009e38:	b921      	cbnz	r1, 8009e44 <_realloc_r+0x14>
 8009e3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e3e:	4611      	mov	r1, r2
 8009e40:	f7ff bf9c 	b.w	8009d7c <_malloc_r>
 8009e44:	b922      	cbnz	r2, 8009e50 <_realloc_r+0x20>
 8009e46:	f7ff ff49 	bl	8009cdc <_free_r>
 8009e4a:	4625      	mov	r5, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	f000 f830 	bl	8009eb4 <_malloc_usable_size_r>
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d20f      	bcs.n	8009e78 <_realloc_r+0x48>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	f7ff ff8e 	bl	8009d7c <_malloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0f2      	beq.n	8009e4c <_realloc_r+0x1c>
 8009e66:	4631      	mov	r1, r6
 8009e68:	4622      	mov	r2, r4
 8009e6a:	f7ff ff0f 	bl	8009c8c <memcpy>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ff33 	bl	8009cdc <_free_r>
 8009e76:	e7e9      	b.n	8009e4c <_realloc_r+0x1c>
 8009e78:	4635      	mov	r5, r6
 8009e7a:	e7e7      	b.n	8009e4c <_realloc_r+0x1c>

08009e7c <_sbrk_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d06      	ldr	r5, [pc, #24]	; (8009e98 <_sbrk_r+0x1c>)
 8009e80:	2300      	movs	r3, #0
 8009e82:	4604      	mov	r4, r0
 8009e84:	4608      	mov	r0, r1
 8009e86:	602b      	str	r3, [r5, #0]
 8009e88:	f7f6 ff58 	bl	8000d3c <_sbrk>
 8009e8c:	1c43      	adds	r3, r0, #1
 8009e8e:	d102      	bne.n	8009e96 <_sbrk_r+0x1a>
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	b103      	cbz	r3, 8009e96 <_sbrk_r+0x1a>
 8009e94:	6023      	str	r3, [r4, #0]
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	20000b0c 	.word	0x20000b0c

08009e9c <__malloc_lock>:
 8009e9c:	4801      	ldr	r0, [pc, #4]	; (8009ea4 <__malloc_lock+0x8>)
 8009e9e:	f000 b811 	b.w	8009ec4 <__retarget_lock_acquire_recursive>
 8009ea2:	bf00      	nop
 8009ea4:	20000b14 	.word	0x20000b14

08009ea8 <__malloc_unlock>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__malloc_unlock+0x8>)
 8009eaa:	f000 b80c 	b.w	8009ec6 <__retarget_lock_release_recursive>
 8009eae:	bf00      	nop
 8009eb0:	20000b14 	.word	0x20000b14

08009eb4 <_malloc_usable_size_r>:
 8009eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eb8:	1f18      	subs	r0, r3, #4
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bfbc      	itt	lt
 8009ebe:	580b      	ldrlt	r3, [r1, r0]
 8009ec0:	18c0      	addlt	r0, r0, r3
 8009ec2:	4770      	bx	lr

08009ec4 <__retarget_lock_acquire_recursive>:
 8009ec4:	4770      	bx	lr

08009ec6 <__retarget_lock_release_recursive>:
 8009ec6:	4770      	bx	lr

08009ec8 <_init>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr

08009ed4 <_fini>:
 8009ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ed6:	bf00      	nop
 8009ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eda:	bc08      	pop	{r3}
 8009edc:	469e      	mov	lr, r3
 8009ede:	4770      	bx	lr
